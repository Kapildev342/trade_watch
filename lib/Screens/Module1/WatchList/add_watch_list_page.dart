import 'dart:convert';

import 'package:another_flushbar/flushbar.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:http/http.dart' as http;
import 'package:lottie/lottie.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:shimmer/shimmer.dart';
import 'package:tradewatchfinal/Constants/API/api.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/Theme/theme_page.dart';
import 'package:tradewatchfinal/Screens/Module1/bottom_navigation.dart';
import 'package:tradewatchfinal/Screens/Module5/TickerDetail/tickers_details_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/BusinessProfile/business_profile_page.dart';

class AddWatchlistPage extends StatefulWidget {
  final int newIndex;
  final int excIndex;
  final int countryIndex;
  final String? tickerId;

  const AddWatchlistPage({
    Key? key,
    required this.newIndex,
    required this.excIndex,
    required this.countryIndex,
    this.tickerId,
  }) : super(key: key);

  @override
  State<AddWatchlistPage> createState() => _AddWatchlistPageState();
}

class _AddWatchlistPageState extends State<AddWatchlistPage> with TickerProviderStateMixin, WidgetsBindingObserver {
  late final TabController _tabController;
  int newIndex = 0;
  int excIndex = 1;
  int countryIndex = 0;
  String mainUserToken = "";

  @override
  void initState() {
    newIndex = widget.newIndex;
    excIndex = widget.excIndex;
    countryIndex = widget.countryIndex;
    streamController2.stream.listen((event) {
      setState(() {
        liveStatusActive12 = event;
      });
    });
    super.initState();
    _tabController = TabController(length: 4, vsync: this, initialIndex: newIndex);
    if (newIndex == 0) {
      getLiveStatus(exc: excIndex);
    } else {
      streamController2.add(true);
    }
  }

  getLiveStatus({required int exc}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url,
        //options:Options( headers: {'Authorization': mainUserToken}),
        data: {
          "category": "stocks",
          "type": exc == 0
              ? "US"
              : exc == 1
                  ? "NSE"
                  : exc == 2
                      ? "BSE"
                      : "NSE",
        });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return WillPopScope(
      //canPop: !extraContainWatchList,
      onWillPop: () async {
        if (extraContainWatchList == false) {
          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
            return MainBottomNavigationPage(
                tType: true,
                text: "",
                caseNo1: 3,
                isHomeFirstTym: false,
                newIndex: _tabController.index,
                excIndex: currentMainIndex == 7
                    ? 0
                    : currentMainIndex == 1
                        ? 1
                        : currentMainIndex == 2
                            ? 2
                            : currentMainIndex == 8
                                ? 3
                                : currentMainIndex == 0
                                    ? 4
                                    : 0,
                countryIndex: currentMainIndex == 4
                    ? 0
                    : currentMainIndex == 5
                        ? 1
                        : 0);
          }));
          return true;
        } else {
          setState(() {
            extraContainWatchList = false;
          });
          return false;
        }
      },
      child: GestureDetector(
        onTap: () {
          setState(() {
            extraContainWatchList = false;
          });
        },
        child: Container(
          //color: const Color(0XFFFFFFFF),
          color: Theme.of(context).colorScheme.background,
          child: SafeArea(
            child: DefaultTabController(
              length: 4,
              initialIndex: newIndex,
              child: Scaffold(
                  // backgroundColor: const Color(0XFFFFFFFF),
                  backgroundColor: Theme.of(context).colorScheme.background,
                  appBar: AppBar(
                    toolbarHeight: height / 16.24,
                    // backgroundColor: const Color(0XFFFFFFFF),
                    backgroundColor: Theme.of(context).colorScheme.background,
                    title: Column(
                      children: [
                        SizedBox(
                          height: height / 18,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: [
                                GestureDetector(
                                    onTap: () {
                                      if (extraContainWatchList == false) {
                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                          return MainBottomNavigationPage(
                                              tType: true,
                                              text: "",
                                              caseNo1: 3,
                                              isHomeFirstTym: false,
                                              newIndex: _tabController.index,
                                              excIndex: currentMainIndex == 7
                                                  ? 0
                                                  : currentMainIndex == 1
                                                      ? 1
                                                      : currentMainIndex == 2
                                                          ? 2
                                                          : currentMainIndex == 8
                                                              ? 3
                                                              : currentMainIndex == 0
                                                                  ? 4
                                                                  : 0,
                                              countryIndex: currentMainIndex == 4
                                                  ? 0
                                                  : currentMainIndex == 5
                                                      ? 1
                                                      : 0);
                                        }));
                                      } else {
                                        setState(() {
                                          extraContainWatchList = false;
                                        });
                                      }
                                    },
                                    child: Icon(
                                      Icons.arrow_back,
                                      color: Theme.of(context).colorScheme.onPrimary,
                                      size: 25,
                                    )),
                                SizedBox(
                                  width: width / 27.4,
                                ),
                                Text("Add Watchlist", style: Theme.of(context).textTheme.titleSmall
                                    /*style: TextStyle(
                                    fontSize: text.scale(16),
                                    fontFamily: "Poppins",
                                    fontWeight: FontWeight.w600,
                                    color: const Color(0XFF000000),
                                  ),*/
                                    ),
                              ],
                            ),
                            _tabController.index == 0
                                ? liveStatusActive12
                                    ? Container(
                                        margin: const EdgeInsets.only(right: 15),
                                        height: 20,
                                        width: 20,
                                        child: Image.asset(
                                          isDarkTheme.value ? "assets/home_screen/live_dark.png" : "assets/home_screen/live.png",
                                          fit: BoxFit.fill,
                                        ),
                                      )
                                    : const SizedBox()
                                : const SizedBox(),
                          ],
                        ),
                        SizedBox(
                          height: height / 50.75,
                        ),
                      ],
                    ),
                    centerTitle: false,
                    automaticallyImplyLeading: false,
                    elevation: 0.0,
                    bottom: TabBar(
                        isScrollable: false,
                        controller: _tabController,
                        labelPadding: const EdgeInsets.all(0),
                        indicatorColor: const Color(0XFF0EA102),
                        indicatorSize: TabBarIndicatorSize.label,
                        dividerColor: Colors.transparent,
                        dividerHeight: 0.0,
                        splashFactory: NoSplash.splashFactory,
                        tabs: [
                          Text(
                            "Stocks",
                            /*style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              fontFamily: "Poppins",
                              color: const Color(0XFF000000),
                            ),*/
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                          Text(
                            "Crypto",
                            /*style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              fontFamily: "Poppins",
                              color: const Color(0XFF000000),
                            ),*/
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                          Text(
                            "Commodity",
                            /*style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              fontFamily: "Poppins",
                              color: const Color(0XFF000000),
                            ),*/
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                          Text(
                            "Forex",
                            /*style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              fontFamily: "Poppins",
                              color: const Color(0XFF000000),
                            ),*/
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                        ],
                        onTap: (value) async {
                          setState(() {
                            newIndex = value;
                            excIndex = 1;
                            countryIndex = 0;
                          });
                        }),
                  ),
                  body: TabBarView(
                    controller: _tabController,
                    physics: const ScrollPhysics(),
                    children: [
                      StocksWatchTabPage(
                        excIndex: excIndex,
                        id: widget.tickerId,
                      ),
                      CryptoWatchTabPage(
                        id: widget.tickerId,
                      ),
                      CommodityWatchTabPage(
                        countryIndex: countryIndex,
                        id: widget.tickerId,
                      ),
                      ForexWatchTabPage(
                        id: widget.tickerId,
                      ),
                    ],
                  )),
            ),
          ),
        ),
      ),
    );
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Records not Found",
            style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(18)),
          ),
        ),
      ],
    );
  }
}

class StocksWatchTabPage extends StatefulWidget {
  final int excIndex;
  final String? id;

  const StocksWatchTabPage({Key? key, required this.excIndex, this.id}) : super(key: key);

  @override
  State<StocksWatchTabPage> createState() => _StocksWatchTabPageState();
}

class _StocksWatchTabPageState extends State<StocksWatchTabPage> with TickerProviderStateMixin, WidgetsBindingObserver {
  TabController? _tabController;
  String mainUserToken = "";
  int excIndex = 1;

  @override
  void initState() {
    getAllDataMain(name: 'Add_WatchList_Page');
    _tabController = TabController(vsync: this, length: 5, initialIndex: widget.excIndex);
    super.initState();
  }

  @override
  void dispose() {
    _tabController!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return DefaultTabController(
      length: 5,
      child: Column(
        children: [
          SizedBox(height: height / 57.73),
          PreferredSize(
            preferredSize: Size.fromWidth(width / 13.7),
            child: SizedBox(
              height: 35,
              width: width,
              child: TabBar(
                  isScrollable: true,
                  indicatorWeight: 2,
                  controller: _tabController,
                  indicatorSize: TabBarIndicatorSize.label,
                  indicatorColor: const Color(0XFF0EA102),
                  tabAlignment: TabAlignment.center,
                  dividerColor: Colors.transparent,
                  dividerHeight: 0.0,
                  labelPadding: EdgeInsets.symmetric(horizontal: width / 17.86),
                  splashFactory: NoSplash.splashFactory,
                  tabs: [
                    Text("Indian Indexes",
                        /*style: TextStyle(
                        fontWeight: FontWeight.w500,
                        fontSize: text.scale(14),
                        color: const Color(0xff000000),
                      ),*/
                        style: Theme.of(context).textTheme.bodyMedium),
                    Text("NSE India",
                        /*style: TextStyle(
                        fontWeight: FontWeight.w500,
                        fontSize: text.scale(14),
                        color: const Color(0xff000000),
                      ),*/
                        style: Theme.of(context).textTheme.bodyMedium),
                    Text("BSE India",
                        /* style: TextStyle(
                        fontWeight: FontWeight.w500,
                        fontSize: text.scale(14),
                        color: const Color(0xff000000),
                      ),*/
                        style: Theme.of(context).textTheme.bodyMedium),
                    Text("USA Indexes",
                        /*style: TextStyle(
                        fontWeight: FontWeight.w500,
                        fontSize: text.scale(14),
                        color: const Color(0xff000000),
                      ),*/
                        style: Theme.of(context).textTheme.bodyMedium),
                    Text("USA Stocks",
                        /*style: TextStyle(
                        fontWeight: FontWeight.w500,
                        fontSize: text.scale(14),
                        color: const Color(0xff000000),
                      ),*/
                        style: Theme.of(context).textTheme.bodyMedium),
                  ]),
            ),
          ),
          SizedBox(height: height / 57.73),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              physics: const ScrollPhysics(),
              children: [
                IndianIndexesTabPage(id: widget.id),
                NSETabPage(id: widget.id),
                BSETabPage(id: widget.id),
                USAIndexesTabPage(id: widget.id),
                USATabPage(id: widget.id),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class IndianIndexesTabPage extends StatefulWidget {
  final String? id;

  const IndianIndexesTabPage({Key? key, this.id}) : super(key: key);

  @override
  State<IndianIndexesTabPage> createState() => _IndianIndexesTabPageState();
}

class _IndianIndexesTabPageState extends State<IndianIndexesTabPage> {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List mainExchangeIdList = [];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  @override
  void initState() {
    currentMainIndex = 7;
    getAllData();
    super.initState();
  }

  getAllData() async {
    await getLiveStatus();
    await getEx();
    widget.id != null ? await getWatchValues1(text: '') : debugPrint("nothing");
    await getWatchValues(text: '');
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {
      "category": "stocks",
      "type": "NSE",
    });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[1],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                ad.dispose();
              },
              onAdOpened: (Ad ad) {},
              onAdClosed: (Ad ad) {},
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "stocks",
      "category_id": mainCatIdList[0],
      "exchange_id": "625e59ec49d900f6585bc694",
      "type": "India",
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                ad.dispose();
              },
              onAdOpened: (Ad ad) {},
              onAdClosed: (Ad ad) {},
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                ad.dispose();
              },
              onAdOpened: (Ad ad) {},
              onAdClosed: (Ad ad) {},
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.45,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              onDoubleTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class NSETabPage extends StatefulWidget {
  final String? id;

  const NSETabPage({Key? key, this.id}) : super(key: key);

  @override
  State<NSETabPage> createState() => _NSETabPageState();
}

class _NSETabPageState extends State<NSETabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List mainExchangeIdList = [];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  @override
  void initState() {
    currentMainIndex = 1;
    getAllData();
    super.initState();
  }

  getAllData() async {
    await getLiveStatus();
    await getEx();
    widget.id != null ? await getWatchValues1(text: '') : debugPrint("nothing");
    await getWatchValues(text: '');
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {
      "category": "stocks",
      "type": "NSE",
    });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[1],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "stocks",
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[1],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(14), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.45,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              onDoubleTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);

                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class BSETabPage extends StatefulWidget {
  final String? id;

  const BSETabPage({
    Key? key,
    this.id,
  }) : super(key: key);

  @override
  State<BSETabPage> createState() => _BSETabPageState();
}

class _BSETabPageState extends State<BSETabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List mainExchangeIdList = [];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  @override
  void initState() {
    currentMainIndex = 2;
    getAllData();
    super.initState();
  }

  getAllData() async {
    await getLiveStatus();
    await getEx();
    widget.id != null ? await getWatchValues1(text: '') : debugPrint("nothing");
    await getWatchValues(text: '');
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {
      "category": "stocks",
      "type": "BSE",
    });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[2],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "stocks",
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[2],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.45,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'BSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(
                                          tickerId:
                                          watchIdList[
                                          index],
                                          category:
                                          'stocks');
                                  detailedShowSheet(
                                          context:
                                          context,
                                          indusValue:
                                          true);*/
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'BSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'stocks',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                      /*await detailTickersFunc(
                                          tickerId:
                                          watchIdList[
                                          index],
                                          category:
                                          'stocks');
                                  detailedShowSheet(
                                          context:
                                          context,
                                          indusValue:
                                          true);*/
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(10),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            /*setState(
                                              () {
                                            watchNotifyList[index] =!watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'BSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(
                                              () {
                                            watchNotifyList[index] =!watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'BSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              onDoubleTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'stocks',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                                /*await detailTickersFunc(
                                          tickerId:
                                          watchIdList[
                                          index],
                                          category:
                                          'stocks');
                                  detailedShowSheet(
                                          context:
                                          context,
                                          indusValue:
                                          true);*/
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'BSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'stocks',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                                /*await detailTickersFunc(
                                          tickerId:
                                          watchIdList[
                                          index],
                                          category:
                                          'stocks');
                                  detailedShowSheet(
                                          context:
                                          context,
                                          indusValue:
                                          true);*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(
                                              () {
                                            watchNotifyList[index] =!watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'BSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                /*setState(
                                              () {
                                            watchNotifyList[index] =!watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);

                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class USAIndexesTabPage extends StatefulWidget {
  final String? id;

  const USAIndexesTabPage({Key? key, this.id}) : super(key: key);

  @override
  State<USAIndexesTabPage> createState() => _USAIndexesTabPageState();
}

class _USAIndexesTabPageState extends State<USAIndexesTabPage> {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List mainExchangeIdList = [];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 8;
    getAllData();
    super.initState();
  }

  getAllData() async {
    await getLiveStatus();
    await getEx();
    widget.id != null ? await getWatchValues1(text: '') : debugPrint("nothing");
    await getWatchValues(text: '');
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {
      "category": "stocks",
      "type": "US",
    });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      // headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[0],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        loading = true;
        emptyList = false;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "stocks",
      "category_id": mainCatIdList[0],
      "exchange_id": "625e59ec49d900f6585bc694",
      "type": "US",
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}

    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(20))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return SizedBox(
      height: height / 1.62,
      child: NotificationListener<OverscrollIndicatorNotification>(
        onNotification: (overflow) {
          overflow.disallowIndicator();
          return true;
        },
        child: Column(
          children: [
            Container(
              height: height / 19.33,
              margin: EdgeInsets.symmetric(horizontal: width / 25),
              child: Row(
                children: [
                  Expanded(
                    child: extraContainWatchList
                        ? TextFormField(
                            cursorColor: Colors.green,
                            readOnly: true,
                            enabled: true,
                            style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                            controller: _searchController,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              fillColor: Theme.of(context).colorScheme.tertiary,
                              filled: true,
                              contentPadding: const EdgeInsets.only(left: 15),
                              prefixIcon: Padding(
                                  padding: const EdgeInsets.all(10.0),
                                  child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                              suffixIcon:
                                  _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                              focusedErrorBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              hintStyle: TextStyle(
                                  color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                              hintText: 'Search here',
                              border: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                            ),
                          )
                        : TextFormField(
                            cursorColor: Colors.green,
                            onChanged: (value) async {
                              setState(() {
                                loading = false;
                              });
                              await getWatchValues(text: value);
                            },
                            style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                            controller: _searchController,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              fillColor: Theme.of(context).colorScheme.tertiary,
                              filled: true,
                              contentPadding: const EdgeInsets.only(left: 15),
                              prefixIcon: Padding(
                                  padding: const EdgeInsets.all(10.0),
                                  child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                              suffixIcon: _searchController.text.isNotEmpty
                                  ? GestureDetector(
                                      onTap: () async {
                                        setState(() {
                                          _searchController.clear();
                                        });
                                        await getWatchValues(text: "");
                                        if (!mounted) {
                                          return;
                                        }
                                        FocusScope.of(context).unfocus();
                                      },
                                      child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                    )
                                  : const SizedBox(),
                              focusedErrorBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              hintStyle: TextStyle(
                                  color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                              hintText: 'Search here',
                              border: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                            ),
                          ),
                  ),
                  const SizedBox(width: 8),
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        extraContainWatchList = !extraContainWatchList;
                      });
                    },
                    child: Row(
                      children: [
                        GestureDetector(
                          child: SvgPicture.asset(
                            "lib/Constants/Assets/SMLogos/Frame 162.svg",
                            height: height / 54.13,
                            width: width / 18.25,
                            colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                          ),
                        ),
                        const SizedBox(
                          width: 3,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Sort",
                                /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                style: Theme.of(context).textTheme.labelLarge),
                            const SizedBox(width: 2),
                            Container(
                              height: 5,
                              width: 5,
                              decoration: const BoxDecoration(
                                color: Color(0XFF0EA102),
                                shape: BoxShape.circle,
                              ),
                            ),
                          ],
                        )
                      ],
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(
              height: height / 50.75,
            ),
            loading
                ? emptyList
                    ? const Padding(
                        padding: EdgeInsets.only(top: 50.0),
                        child: Center(child: Text("No search results found")),
                      )
                    : extraContainWatchList
                        ? Stack(
                            children: [
                              Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                height: height / 1.45,
                                child: ListView.builder(
                                  padding: const EdgeInsets.all(0.0),
                                  itemCount: watchTitleList.length,
                                  itemBuilder: (BuildContext context, int index) {
                                    if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                      return Column(
                                        children: [
                                          Container(
                                              height: height / 9.10,
                                              margin: const EdgeInsets.symmetric(horizontal: 15),
                                              child: AdWidget(ad: nativeAdList[index])),
                                          SizedBox(height: height / 57.73),
                                          Column(
                                            children: [
                                              Container(
                                                padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                                decoration: BoxDecoration(
                                                    color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                    borderRadius: BorderRadius.circular(15)),
                                                child: Row(
                                                  children: [
                                                    SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                    widget.id == watchIdList[index]
                                                        ? Shimmer.fromColors(
                                                            baseColor: Colors.black,
                                                            highlightColor: Colors.white,
                                                            direction: ShimmerDirection.ltr,
                                                            child: Wrap(
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  children: [
                                                                    Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 5,
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                                        children: [
                                                                          Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                                /* style: TextStyle(
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontSize: text.scale(12),
                                                                                      color: const Color(0xff000000))*/
                                                                                style: Theme.of(context).textTheme.labelLarge,
                                                                              ),
                                                                              Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                  style: TextStyle(
                                                                                      fontWeight: FontWeight.w400,
                                                                                      fontSize: text.scale(12),
                                                                                      color: watchStatusList[index] == "Increse"
                                                                                          ? const Color(0xff0EA102)
                                                                                          : const Color(0XFFFB1212))),
                                                                            ],
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchNotifyList[index]
                                                                        ? SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          )
                                                                        : SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchStarList[index]
                                                                        ? SizedBox(
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                            ))
                                                                        : SizedBox(
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/empty_star_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                            )),
                                                                    SizedBox(width: width / 37.5),
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          )
                                                        : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    )
                                                                  : SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/filled_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                      ))
                                                                  : SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                      )),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          ),
                                                  ],
                                                ),
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          )
                                        ],
                                      );
                                    }
                                    return Column(
                                      children: [
                                        Container(
                                          padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                          decoration: BoxDecoration(
                                              color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                              borderRadius: BorderRadius.circular(15)),
                                          child: Row(
                                            children: [
                                              SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                              widget.id == watchIdList[index]
                                                  ? Shimmer.fromColors(
                                                      baseColor: Colors.black,
                                                      highlightColor: Colors.white,
                                                      direction: ShimmerDirection.ltr,
                                                      child: Wrap(
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    )
                                                                  : SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/filled_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                      ))
                                                                  : SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                      )),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    )
                                                  : Row(
                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                      children: [
                                                        Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 5,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(width: width / 16.5),
                                                        watchNotifyList[index]
                                                            ? SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              )
                                                            : SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                        SizedBox(width: width / 16.5),
                                                        watchStarList[index]
                                                            ? SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                ))
                                                            : SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/empty_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                )),
                                                        SizedBox(width: width / 37.5),
                                                      ],
                                                    ),
                                            ],
                                          ),
                                        ),
                                        Divider(
                                          color: Theme.of(context).colorScheme.tertiary,
                                          thickness: 0.8,
                                        )
                                      ],
                                    );
                                  },
                                ),
                              ),
                              Positioned(
                                right: 15,
                                top: 15,
                                child: Container(
                                  width: width * 0.5,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(15),
                                    color: Theme.of(context).colorScheme.tertiary,
                                  ),
                                  child: Column(
                                    children: [
                                      ExpansionTile(
                                        title: Text(
                                          "CloseValue",
                                          style: TextStyle(
                                            fontSize: text.scale(10),
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                        children: [
                                          SizedBox(
                                            height: 35,
                                            child: RadioListTile(
                                                value: 1,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "High to Low",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                }),
                                          ),
                                          RadioListTile(
                                              value: 2,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "Low to High",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              })
                                        ],
                                      ),
                                      ExpansionTile(
                                        title: Text(
                                          "Change Percentage",
                                          style: TextStyle(
                                            fontSize: text.scale(10),
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                        children: [
                                          SizedBox(
                                            height: 35,
                                            child: RadioListTile(
                                                value: 3,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "High to Low",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                }),
                                          ),
                                          RadioListTile(
                                              value: 4,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "Low to High",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              })
                                        ],
                                      ),
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          selectedWatchListIndex != 0
                                              ? InkWell(
                                                  onTap: () async {
                                                    setState(() {
                                                      loading = false;
                                                      extraContainWatchList = false;
                                                      selectedWatchListIndex = 0;
                                                    });
                                                    await getWatchValues(text: _searchController.text);
                                                  },
                                                  child: Container(
                                                    padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                    child: Text(
                                                      "Clear",
                                                      style: TextStyle(
                                                        fontSize: text.scale(10),
                                                        fontWeight: FontWeight.w500,
                                                      ),
                                                    ),
                                                  ),
                                                )
                                              : const SizedBox(),
                                          InkWell(
                                            onTap: () async {
                                              setState(() {
                                                loading = false;
                                                extraContainWatchList = false;
                                              });
                                              await getWatchValues(text: _searchController.text);
                                            },
                                            child: Container(
                                              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                              margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                              decoration: BoxDecoration(
                                                color: const Color(0XFF0EA102),
                                                borderRadius: BorderRadius.circular(25),
                                              ),
                                              child: Text(
                                                "Apply",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  color: Colors.white,
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              )
                            ],
                          )
                        : Expanded(
                            child: Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              child: SmartRefresher(
                                controller: _refreshController,
                                enablePullDown: false,
                                enablePullUp: true,
                                footer: CustomFooter(
                                  builder: (BuildContext context, LoadStatus? mode) {
                                    Widget body;
                                    if (mode == LoadStatus.idle) {
                                      body = const Text("pull up to load");
                                    } else if (mode == LoadStatus.loading) {
                                      body = const CupertinoActivityIndicator();
                                    } else if (mode == LoadStatus.failed) {
                                      body = const Text("Load Failed!Click retry!");
                                    } else if (mode == LoadStatus.canLoading) {
                                      body = const Text("release to load more");
                                    } else {
                                      body = const Text("No more Data");
                                    }
                                    return SizedBox(
                                      height: height / 14.76,
                                      child: Center(child: body),
                                    );
                                  },
                                ),
                                onLoading: _onGetWatchLoading,
                                child: ListView.builder(
                                  padding: const EdgeInsets.all(0.0),
                                  itemCount: watchTitleList.length,
                                  itemBuilder: (BuildContext context, int index) {
                                    if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                      return Column(
                                        children: [
                                          Container(
                                              height: height / 9.10,
                                              margin: const EdgeInsets.symmetric(horizontal: 15),
                                              child: AdWidget(ad: nativeAdList[index])),
                                          SizedBox(height: height / 57.73),
                                          Column(
                                            children: [
                                              Container(
                                                padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                                decoration: BoxDecoration(
                                                    color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                    borderRadius: BorderRadius.circular(15)),
                                                child: Row(
                                                  children: [
                                                    InkWell(
                                                      onTap: () async {
                                                        /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                          return TickersDetailsPage(
                                                            category: 'stocks',
                                                            id: watchIdList[index],
                                                            exchange: 'US',
                                                            country: "USA",
                                                            name: watchTitleList[index],
                                                            fromWhere: 'add_watch',
                                                          );
                                                        }));
                                                      },
                                                      onDoubleTap: () async {
                                                        /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                          return TickersDetailsPage(
                                                            category: 'stocks',
                                                            id: watchIdList[index],
                                                            exchange: 'US',
                                                            country: "USA",
                                                            name: watchTitleList[index],
                                                            fromWhere: 'add_watch',
                                                          );
                                                        }));
                                                      },
                                                      child: SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                    ),
                                                    widget.id == watchIdList[index]
                                                        ? Shimmer.fromColors(
                                                            baseColor: Colors.black,
                                                            highlightColor: Colors.white,
                                                            direction: ShimmerDirection.ltr,
                                                            child: Wrap(
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  children: [
                                                                    InkWell(
                                                                      onTap: () async {
                                                                        // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                        // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return TickersDetailsPage(
                                                                            category: 'stocks',
                                                                            id: watchIdList[index],
                                                                            exchange: 'US',
                                                                            country: "USA",
                                                                            name: watchTitleList[index],
                                                                            fromWhere: 'add_watch',
                                                                          );
                                                                        }));
                                                                      },
                                                                      onDoubleTap: () async {
                                                                        // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                        // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return TickersDetailsPage(
                                                                            category: 'stocks',
                                                                            id: watchIdList[index],
                                                                            exchange: 'US',
                                                                            country: "USA",
                                                                            name: watchTitleList[index],
                                                                            fromWhere: 'add_watch',
                                                                          );
                                                                        }));
                                                                      },
                                                                      child: Row(
                                                                        children: [
                                                                          const SizedBox(
                                                                            width: 12,
                                                                          ),
                                                                          SizedBox(
                                                                            width: width / 3,
                                                                            child: Column(
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                                              children: [
                                                                                Text(
                                                                                  watchTitleList[index],
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w500,
                                                                                        fontSize: text.scale(14),
                                                                                        color: const Color(0xff000000),
                                                                                        overflow: TextOverflow.ellipsis)*/
                                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                                  maxLines: 1,
                                                                                ),
                                                                                Text(
                                                                                  watchSubTitleList[index],
                                                                                  /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0xffB0B0B0),
                                                                                      overflow: TextOverflow.ellipsis),*/
                                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 5,
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                                        children: [
                                                                          Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontSize: text.scale(12),
                                                                                      color: const Color(0xff000000))*/
                                                                                style: Theme.of(context).textTheme.labelLarge,
                                                                              ),
                                                                              Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                  style: TextStyle(
                                                                                      fontWeight: FontWeight.w400,
                                                                                      fontSize: text.scale(12),
                                                                                      color: watchStatusList[index] == "Increse"
                                                                                          ? const Color(0xff0EA102)
                                                                                          : const Color(0XFFFB1212))),
                                                                            ],
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchNotifyList[index]
                                                                        ? GestureDetector(
                                                                            onTap: () async {
                                                                              /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                              kToken = mainUserToken;
                                                                              await notifyBottomSheetMain1(
                                                                                  context: context,
                                                                                  currentIndex: index,
                                                                                  tickerId: watchIdList[index],
                                                                                  tickerName: watchTitleList[index],
                                                                                  editValue: true,
                                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                              setState(() {
                                                                                watchNotifyAddedBoolListMain[index]
                                                                                    ? watchNotifyList[index] = true
                                                                                    : watchNotifyList[index] = false;
                                                                                logEventFunc(
                                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                                        ? 'Set_Price_Alerts'
                                                                                        : 'Removed_Price_Alerts',
                                                                                    type: 'WatchList');
                                                                              });
                                                                            },
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                            ),
                                                                          )
                                                                        : GestureDetector(
                                                                            onTap: () async {
                                                                              if (mainSkipValue) {
                                                                                commonFlushBar(context: context, initFunction: initState);
                                                                              } else {
                                                                                kToken = mainUserToken;
                                                                                bool notifyAdded = await checkProfileVerify();
                                                                                if (notifyAdded) {
                                                                                  if (!mounted) {
                                                                                    return;
                                                                                  }
                                                                                  await notifyBottomSheetMain1(
                                                                                      context: context,
                                                                                      currentIndex: index,
                                                                                      tickerId: watchIdList[index],
                                                                                      tickerName: watchTitleList[index],
                                                                                      editValue: false,
                                                                                      closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                  setState(() {
                                                                                    watchNotifyAddedBoolListMain[index]
                                                                                        ? watchNotifyList[index] = true
                                                                                        : watchNotifyList[index] = false;
                                                                                    logEventFunc(
                                                                                        name: watchNotifyAddedBoolListMain[index]
                                                                                            ? 'Set_Price_Alerts'
                                                                                            : 'Removed_Price_Alerts',
                                                                                        type: 'WatchList');
                                                                                  });
                                                                                } else {
                                                                                  if (!mounted) {
                                                                                    return;
                                                                                  }
                                                                                  Flushbar(
                                                                                    message: "Please fill profile details",
                                                                                    duration: const Duration(seconds: 2),
                                                                                  ).show(context);
                                                                                }
                                                                              }
                                                                            },
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                            ),
                                                                          ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchStarList[index]
                                                                        ? GestureDetector(
                                                                            onTap: () async {
                                                                              logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                              setState(() {
                                                                                watchStarList[index] = !watchStarList[index];
                                                                              });
                                                                              await removeWatchList(
                                                                                  watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                            },
                                                                            child: SizedBox(
                                                                                height: height / 35.03,
                                                                                width: width / 16.30,
                                                                                child: SvgPicture.asset(
                                                                                  isDarkTheme.value
                                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                                )),
                                                                          )
                                                                        : GestureDetector(
                                                                            onTap: () async {
                                                                              if (mainSkipValue) {
                                                                                commonFlushBar(context: context, initFunction: initState);
                                                                              } else {
                                                                                bool added = await apiFunctionsMain.getAddWatchList(
                                                                                    tickerId: watchIdList[index],
                                                                                    context: context,
                                                                                    modelSetState: setState);
                                                                                if (added) {
                                                                                  logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                  setState(() {
                                                                                    watchStarList[index] = !watchStarList[index];
                                                                                  });
                                                                                }
                                                                              }
                                                                              // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                            },
                                                                            child: SizedBox(
                                                                                height: height / 35.03,
                                                                                width: width / 16.30,
                                                                                child: SvgPicture.asset(
                                                                                  isDarkTheme.value
                                                                                      ? "assets/home_screen/empty_star_dark.svg"
                                                                                      : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                                )),
                                                                          ),
                                                                    SizedBox(width: width / 37.5),
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          )
                                                        : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                onDoubleTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                child: Row(
                                                                  children: [
                                                                    const SizedBox(
                                                                      width: 12,
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 3,
                                                                      child: Column(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        mainAxisAlignment: MainAxisAlignment.center,
                                                                        children: [
                                                                          Text(
                                                                            watchTitleList[index],
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(14),
                                                                                  color: const Color(0xff000000),
                                                                                  overflow: TextOverflow.ellipsis)*/
                                                                            style: Theme.of(context).textTheme.bodyMedium,
                                                                            maxLines: 1,
                                                                          ),
                                                                          Text(
                                                                            watchSubTitleList[index],
                                                                            /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(10),
                                                                                color: const Color(0xffB0B0B0),
                                                                                overflow: TextOverflow.ellipsis),*/
                                                                            style: Theme.of(context).textTheme.bodySmall,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                        kToken = mainUserToken;
                                                                        await notifyBottomSheetMain1(
                                                                            context: context,
                                                                            currentIndex: index,
                                                                            tickerId: watchIdList[index],
                                                                            tickerName: watchTitleList[index],
                                                                            editValue: true,
                                                                            closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                        setState(() {
                                                                          watchNotifyAddedBoolListMain[index]
                                                                              ? watchNotifyList[index] = true
                                                                              : watchNotifyList[index] = false;
                                                                          logEventFunc(
                                                                              name: watchNotifyAddedBoolListMain[index]
                                                                                  ? 'Set_Price_Alerts'
                                                                                  : 'Removed_Price_Alerts',
                                                                              type: 'WatchList');
                                                                        });
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/ringing_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          kToken = mainUserToken;
                                                                          bool notifyAdded = await checkProfileVerify();
                                                                          if (notifyAdded) {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: false,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          } else {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            Flushbar(
                                                                              message: "Please fill profile details",
                                                                              duration: const Duration(seconds: 2),
                                                                            ).show(context);
                                                                          }
                                                                        }
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                        setState(() {
                                                                          watchStarList[index] = !watchStarList[index];
                                                                        });
                                                                        await removeWatchList(
                                                                            watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          )),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          bool added = await apiFunctionsMain.getAddWatchList(
                                                                              tickerId: watchIdList[index],
                                                                              context: context,
                                                                              modelSetState: setState);
                                                                          if (added) {
                                                                            logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                          }
                                                                        }
                                                                        // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                    ),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          ),
                                                  ],
                                                ),
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          )
                                        ],
                                      );
                                    }
                                    return Column(
                                      children: [
                                        Container(
                                          padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                          decoration: BoxDecoration(
                                              color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                              borderRadius: BorderRadius.circular(15)),
                                          child: Row(
                                            children: [
                                              InkWell(
                                                onTap: () async {
                                                  /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return TickersDetailsPage(
                                                      category: 'stocks',
                                                      id: watchIdList[index],
                                                      exchange: 'US',
                                                      country: "USA",
                                                      name: watchTitleList[index],
                                                      fromWhere: 'add_watch',
                                                    );
                                                  }));
                                                },
                                                onDoubleTap: () async {
                                                  /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return TickersDetailsPage(
                                                      category: 'stocks',
                                                      id: watchIdList[index],
                                                      exchange: 'US',
                                                      country: "USA",
                                                      name: watchTitleList[index],
                                                      fromWhere: 'add_watch',
                                                    );
                                                  }));
                                                },
                                                child: SizedBox(
                                                  height: height / 33.83,
                                                  width: width / 15.625,
                                                  child: Image.network(
                                                    watchLogoList[index],
                                                    fit: BoxFit.fill,
                                                    errorBuilder: (context, _, stack) {
                                                      return SvgPicture.network(watchLogoList[index]);
                                                    },
                                                  ),
                                                ),
                                              ),
                                              widget.id == watchIdList[index]
                                                  ? Shimmer.fromColors(
                                                      baseColor: Colors.black,
                                                      highlightColor: Colors.white,
                                                      direction: ShimmerDirection.ltr,
                                                      child: Wrap(
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                onDoubleTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                child: Row(
                                                                  children: [
                                                                    const SizedBox(
                                                                      width: 12,
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 3,
                                                                      child: Column(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        mainAxisAlignment: MainAxisAlignment.center,
                                                                        children: [
                                                                          Text(
                                                                            watchTitleList[index],
                                                                            style: Theme.of(context).textTheme.bodyMedium,
                                                                            maxLines: 1,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(14),
                                                                                  color: const Color(0xff000000),
                                                                                  overflow: TextOverflow.ellipsis)*/
                                                                          ),
                                                                          Text(
                                                                            watchSubTitleList[index],
                                                                            style: Theme.of(context).textTheme.bodySmall,
                                                                            /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(10),
                                                                                color: const Color(0xffB0B0B0),
                                                                                overflow: TextOverflow.ellipsis),*/
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                        kToken = mainUserToken;
                                                                        await notifyBottomSheetMain1(
                                                                            context: context,
                                                                            currentIndex: index,
                                                                            tickerId: watchIdList[index],
                                                                            tickerName: watchTitleList[index],
                                                                            editValue: true,
                                                                            closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                        setState(() {
                                                                          watchNotifyAddedBoolListMain[index]
                                                                              ? watchNotifyList[index] = true
                                                                              : watchNotifyList[index] = false;
                                                                          logEventFunc(
                                                                              name: watchNotifyAddedBoolListMain[index]
                                                                                  ? 'Set_Price_Alerts'
                                                                                  : 'Removed_Price_Alerts',
                                                                              type: 'WatchList');
                                                                        });
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/ringing_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          kToken = mainUserToken;
                                                                          bool notifyAdded = await checkProfileVerify();
                                                                          if (notifyAdded) {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: false,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          } else {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            Flushbar(
                                                                              message: "Please fill profile details",
                                                                              duration: const Duration(seconds: 2),
                                                                            ).show(context);
                                                                          }
                                                                        }
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                        setState(() {
                                                                          watchStarList[index] = !watchStarList[index];
                                                                        });
                                                                        await removeWatchList(
                                                                            watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          )),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          bool added = await apiFunctionsMain.getAddWatchList(
                                                                              tickerId: watchIdList[index],
                                                                              context: context,
                                                                              modelSetState: setState);
                                                                          if (added) {
                                                                            logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                          }
                                                                        }
                                                                        // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                    ),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    )
                                                  : Row(
                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchIdList[index],
                                                                exchange: 'US',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'add_watch',
                                                              );
                                                            }));
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchIdList[index],
                                                                exchange: 'US',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'add_watch',
                                                              );
                                                            }));
                                                          },
                                                          child: Row(
                                                            children: [
                                                              const SizedBox(
                                                                width: 12,
                                                              ),
                                                              SizedBox(
                                                                width: width / 3,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 5,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(width: width / 16.5),
                                                        watchNotifyList[index]
                                                            ? GestureDetector(
                                                                onTap: () async {
                                                                  /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                  kToken = mainUserToken;
                                                                  await notifyBottomSheetMain1(
                                                                      context: context,
                                                                      currentIndex: index,
                                                                      tickerId: watchIdList[index],
                                                                      tickerName: watchTitleList[index],
                                                                      editValue: true,
                                                                      closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                  setState(() {
                                                                    watchNotifyAddedBoolListMain[index]
                                                                        ? watchNotifyList[index] = true
                                                                        : watchNotifyList[index] = false;
                                                                    logEventFunc(
                                                                        name: watchNotifyAddedBoolListMain[index]
                                                                            ? 'Set_Price_Alerts'
                                                                            : 'Removed_Price_Alerts',
                                                                        type: 'WatchList');
                                                                  });
                                                                },
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/ringing_bell_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                ),
                                                              )
                                                            : GestureDetector(
                                                                onTap: () async {
                                                                  if (mainSkipValue) {
                                                                    commonFlushBar(context: context, initFunction: initState);
                                                                  } else {
                                                                    kToken = mainUserToken;
                                                                    bool notifyAdded = await checkProfileVerify();
                                                                    if (notifyAdded) {
                                                                      if (!mounted) {
                                                                        return;
                                                                      }
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    } else {
                                                                      if (!mounted) {
                                                                        return;
                                                                      }
                                                                      Flushbar(
                                                                        message: "Please fill profile details",
                                                                        duration: const Duration(seconds: 2),
                                                                      ).show(context);
                                                                    }
                                                                  }
                                                                },
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/empty_bell_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                ),
                                                              ),
                                                        SizedBox(width: width / 16.5),
                                                        watchStarList[index]
                                                            ? GestureDetector(
                                                                onTap: () async {
                                                                  logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                  setState(() {
                                                                    watchStarList[index] = !watchStarList[index];
                                                                  });
                                                                  await removeWatchList(
                                                                      watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                },
                                                                child: SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    )),
                                                              )
                                                            : GestureDetector(
                                                                onTap: () async {
                                                                  if (mainSkipValue) {
                                                                    commonFlushBar(context: context, initFunction: initState);
                                                                  } else {
                                                                    bool added = await apiFunctionsMain.getAddWatchList(
                                                                        tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                    if (added) {
                                                                      logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                    }
                                                                  }
                                                                  // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                },
                                                                child: SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                              ),
                                                        SizedBox(width: width / 37.5),
                                                      ],
                                                    ),
                                            ],
                                          ),
                                        ),
                                        Divider(
                                          color: Theme.of(context).colorScheme.tertiary,
                                          thickness: 0.8,
                                        )
                                      ],
                                    );
                                  },
                                ),
                              ),
                            ),
                          )
                : Center(
                    child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                  ),
          ],
        ),
      ),
    );
  }
}

class USATabPage extends StatefulWidget {
  final String? id;

  const USATabPage({Key? key, this.id}) : super(key: key);

  @override
  State<USATabPage> createState() => _USATabPageState();
}

class _USATabPageState extends State<USATabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List mainExchangeIdList = [];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 0;
    getAllData();
    super.initState();
  }

  getAllData() async {
    await getLiveStatus();
    await getEx();
    widget.id != null ? await getWatchValues1(text: '') : debugPrint("nothing");
    await getWatchValues(text: '');
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {
      "category": "stocks",
      "type": "US",
    });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController2.add(responseData["response"]);
    }
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      // headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[0],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        loading = true;
        emptyList = false;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "stocks",
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[0],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}

    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return SizedBox(
      height: height / 1.62,
      child: NotificationListener<OverscrollIndicatorNotification>(
        onNotification: (overflow) {
          overflow.disallowIndicator();
          return true;
        },
        child: Column(
          children: [
            Container(
              height: height / 19.33,
              margin: EdgeInsets.symmetric(horizontal: width / 25),
              child: Row(
                children: [
                  Expanded(
                    child: extraContainWatchList
                        ? TextFormField(
                            cursorColor: Colors.green,
                            readOnly: true,
                            enabled: true,
                            style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                            controller: _searchController,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              fillColor: Theme.of(context).colorScheme.tertiary,
                              filled: true,
                              contentPadding: const EdgeInsets.only(left: 15),
                              prefixIcon: Padding(
                                  padding: const EdgeInsets.all(10.0),
                                  child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                              suffixIcon:
                                  _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                              focusedErrorBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              hintStyle: TextStyle(
                                  color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                              hintText: 'Search here',
                              border: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                            ),
                          )
                        : TextFormField(
                            cursorColor: Colors.green,
                            onChanged: (value) async {
                              setState(() {
                                loading = false;
                              });
                              await getWatchValues(text: value);
                            },
                            style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                            controller: _searchController,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              fillColor: Theme.of(context).colorScheme.tertiary,
                              filled: true,
                              contentPadding: const EdgeInsets.only(left: 15),
                              prefixIcon: Padding(
                                  padding: const EdgeInsets.all(10.0),
                                  child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                              suffixIcon: _searchController.text.isNotEmpty
                                  ? GestureDetector(
                                      onTap: () async {
                                        setState(() {
                                          _searchController.clear();
                                        });
                                        await getWatchValues(text: "");
                                        if (!mounted) {
                                          return;
                                        }
                                        FocusScope.of(context).unfocus();
                                      },
                                      child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                    )
                                  : const SizedBox(),
                              focusedErrorBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                              hintStyle: TextStyle(
                                  color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                              hintText: 'Search here',
                              border: OutlineInputBorder(
                                borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                borderRadius: BorderRadius.circular(15),
                              ),
                            ),
                          ),
                  ),
                  const SizedBox(width: 8),
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        extraContainWatchList = !extraContainWatchList;
                      });
                    },
                    child: Row(
                      children: [
                        GestureDetector(
                          child: SvgPicture.asset(
                            "lib/Constants/Assets/SMLogos/Frame 162.svg",
                            height: height / 54.13,
                            width: width / 18.25,
                            colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                          ),
                        ),
                        const SizedBox(
                          width: 3,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Sort",
                                /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                style: Theme.of(context).textTheme.labelLarge),
                            const SizedBox(width: 2),
                            Container(
                              height: 5,
                              width: 5,
                              decoration: const BoxDecoration(
                                color: Color(0XFF0EA102),
                                shape: BoxShape.circle,
                              ),
                            ),
                          ],
                        )
                      ],
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(
              height: height / 50.75,
            ),
            loading
                ? emptyList
                    ? const Padding(
                        padding: EdgeInsets.only(top: 50.0),
                        child: Center(child: Text("No search results found")),
                      )
                    : extraContainWatchList
                        ? Stack(
                            children: [
                              Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                height: height / 1.45,
                                child: ListView.builder(
                                  padding: const EdgeInsets.all(0.0),
                                  itemCount: watchTitleList.length,
                                  itemBuilder: (BuildContext context, int index) {
                                    if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                      return Column(
                                        children: [
                                          Container(
                                              height: height / 9.10,
                                              margin: const EdgeInsets.symmetric(horizontal: 15),
                                              child: AdWidget(ad: nativeAdList[index])),
                                          SizedBox(height: height / 57.73),
                                          Column(
                                            children: [
                                              Container(
                                                padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                                decoration: BoxDecoration(
                                                    color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                    borderRadius: BorderRadius.circular(15)),
                                                child: Row(
                                                  children: [
                                                    SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                    widget.id == watchIdList[index]
                                                        ? Shimmer.fromColors(
                                                            baseColor: Colors.black,
                                                            highlightColor: Colors.white,
                                                            direction: ShimmerDirection.ltr,
                                                            child: Wrap(
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  children: [
                                                                    Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 5,
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                                        children: [
                                                                          Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                                style: Theme.of(context).textTheme.labelLarge,
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontSize: text.scale(12),
                                                                                      color: const Color(0xff000000))*/
                                                                              ),
                                                                              Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                  style: TextStyle(
                                                                                      fontWeight: FontWeight.w400,
                                                                                      fontSize: text.scale(12),
                                                                                      color: watchStatusList[index] == "Increse"
                                                                                          ? const Color(0xff0EA102)
                                                                                          : const Color(0XFFFB1212))),
                                                                            ],
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchNotifyList[index]
                                                                        ? SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          )
                                                                        : SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchStarList[index]
                                                                        ? SizedBox(
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                            ))
                                                                        : SizedBox(
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/empty_star_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                            )),
                                                                    SizedBox(width: width / 37.5),
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          )
                                                        : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    )
                                                                  : SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/filled_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                      ))
                                                                  : SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                      )),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          ),
                                                  ],
                                                ),
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          )
                                        ],
                                      );
                                    }
                                    return Column(
                                      children: [
                                        Container(
                                          padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                          decoration: BoxDecoration(
                                              color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                              borderRadius: BorderRadius.circular(15)),
                                          child: Row(
                                            children: [
                                              SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                              widget.id == watchIdList[index]
                                                  ? Shimmer.fromColors(
                                                      baseColor: Colors.black,
                                                      highlightColor: Colors.white,
                                                      direction: ShimmerDirection.ltr,
                                                      child: Wrap(
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /* style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    )
                                                                  : SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/filled_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                      ))
                                                                  : SizedBox(
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_star_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                      )),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    )
                                                  : Row(
                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                      children: [
                                                        Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 5,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(width: width / 16.5),
                                                        watchNotifyList[index]
                                                            ? SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              )
                                                            : SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                        SizedBox(width: width / 16.5),
                                                        watchStarList[index]
                                                            ? SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                ))
                                                            : SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/empty_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                )),
                                                        SizedBox(width: width / 37.5),
                                                      ],
                                                    ),
                                            ],
                                          ),
                                        ),
                                        Divider(
                                          color: Theme.of(context).colorScheme.tertiary,
                                          thickness: 0.8,
                                        )
                                      ],
                                    );
                                  },
                                ),
                              ),
                              Positioned(
                                right: 15,
                                top: 15,
                                child: Container(
                                  width: width * 0.5,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(15),
                                    color: Theme.of(context).colorScheme.tertiary,
                                  ),
                                  child: Column(
                                    children: [
                                      ExpansionTile(
                                        title: Text(
                                          "CloseValue",
                                          style: TextStyle(
                                            fontSize: text.scale(10),
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                        children: [
                                          SizedBox(
                                            height: 35,
                                            child: RadioListTile(
                                                value: 1,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "High to Low",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                }),
                                          ),
                                          RadioListTile(
                                              value: 2,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "Low to High",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              })
                                        ],
                                      ),
                                      ExpansionTile(
                                        title: Text(
                                          "Change Percentage",
                                          style: TextStyle(
                                            fontSize: text.scale(10),
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                        children: [
                                          SizedBox(
                                            height: 35,
                                            child: RadioListTile(
                                                value: 3,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "High to Low",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                }),
                                          ),
                                          RadioListTile(
                                              value: 4,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "Low to High",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              })
                                        ],
                                      ),
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          selectedWatchListIndex != 0
                                              ? InkWell(
                                                  onTap: () async {
                                                    setState(() {
                                                      loading = false;
                                                      extraContainWatchList = false;
                                                      selectedWatchListIndex = 0;
                                                    });
                                                    await getWatchValues(text: _searchController.text);
                                                  },
                                                  child: Container(
                                                    padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                    child: Text(
                                                      "Clear",
                                                      style: TextStyle(
                                                        fontSize: text.scale(10),
                                                        fontWeight: FontWeight.w500,
                                                      ),
                                                    ),
                                                  ),
                                                )
                                              : const SizedBox(),
                                          InkWell(
                                            onTap: () async {
                                              setState(() {
                                                loading = false;
                                                extraContainWatchList = false;
                                              });
                                              await getWatchValues(text: _searchController.text);
                                            },
                                            child: Container(
                                              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                              margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                              decoration: BoxDecoration(
                                                color: const Color(0XFF0EA102),
                                                borderRadius: BorderRadius.circular(25),
                                              ),
                                              child: Text(
                                                "Apply",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  color: Colors.white,
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              )
                            ],
                          )
                        : Expanded(
                            child: Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              child: SmartRefresher(
                                controller: _refreshController,
                                enablePullDown: false,
                                enablePullUp: true,
                                footer: CustomFooter(
                                  builder: (BuildContext context, LoadStatus? mode) {
                                    Widget body;
                                    if (mode == LoadStatus.idle) {
                                      body = const Text("pull up to load");
                                    } else if (mode == LoadStatus.loading) {
                                      body = const CupertinoActivityIndicator();
                                    } else if (mode == LoadStatus.failed) {
                                      body = const Text("Load Failed!Click retry!");
                                    } else if (mode == LoadStatus.canLoading) {
                                      body = const Text("release to load more");
                                    } else {
                                      body = const Text("No more Data");
                                    }
                                    return SizedBox(
                                      height: height / 14.76,
                                      child: Center(child: body),
                                    );
                                  },
                                ),
                                onLoading: _onGetWatchLoading,
                                child: ListView.builder(
                                  padding: const EdgeInsets.all(0.0),
                                  itemCount: watchTitleList.length,
                                  itemBuilder: (BuildContext context, int index) {
                                    if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                      return Column(
                                        children: [
                                          Container(
                                              height: height / 9.10,
                                              margin: const EdgeInsets.symmetric(horizontal: 15),
                                              child: AdWidget(ad: nativeAdList[index])),
                                          SizedBox(height: height / 57.73),
                                          Column(
                                            children: [
                                              Container(
                                                padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                                decoration: BoxDecoration(
                                                    color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                    borderRadius: BorderRadius.circular(15)),
                                                child: Row(
                                                  children: [
                                                    InkWell(
                                                      onTap: () async {
                                                        /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                          return TickersDetailsPage(
                                                            category: 'stocks',
                                                            id: watchIdList[index],
                                                            exchange: 'US',
                                                            country: "USA",
                                                            name: watchTitleList[index],
                                                            fromWhere: 'add_watch',
                                                          );
                                                        }));
                                                      },
                                                      onDoubleTap: () async {
                                                        /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                          return TickersDetailsPage(
                                                            category: 'stocks',
                                                            id: watchIdList[index],
                                                            exchange: 'US',
                                                            country: "USA",
                                                            name: watchTitleList[index],
                                                            fromWhere: 'add_watch',
                                                          );
                                                        }));
                                                      },
                                                      child: SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                    ),
                                                    widget.id == watchIdList[index]
                                                        ? Shimmer.fromColors(
                                                            baseColor: Colors.black,
                                                            highlightColor: Colors.white,
                                                            direction: ShimmerDirection.ltr,
                                                            child: Wrap(
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  children: [
                                                                    InkWell(
                                                                      onTap: () async {
                                                                        // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                        // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return TickersDetailsPage(
                                                                            category: 'stocks',
                                                                            id: watchIdList[index],
                                                                            exchange: 'US',
                                                                            country: "USA",
                                                                            name: watchTitleList[index],
                                                                            fromWhere: 'add_watch',
                                                                          );
                                                                        }));
                                                                      },
                                                                      onDoubleTap: () async {
                                                                        // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                        // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return TickersDetailsPage(
                                                                            category: 'stocks',
                                                                            id: watchIdList[index],
                                                                            exchange: 'US',
                                                                            country: "USA",
                                                                            name: watchTitleList[index],
                                                                            fromWhere: 'add_watch',
                                                                          );
                                                                        }));
                                                                      },
                                                                      child: Row(
                                                                        children: [
                                                                          const SizedBox(
                                                                            width: 12,
                                                                          ),
                                                                          SizedBox(
                                                                            width: width / 3,
                                                                            child: Column(
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                                              children: [
                                                                                Text(
                                                                                  watchTitleList[index],
                                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                                  maxLines: 1,
                                                                                  /* style: TextStyle(
                                                                                        fontWeight: FontWeight.w500,
                                                                                        fontSize: text.scale(14),
                                                                                        color: const Color(0xff000000),
                                                                                        overflow: TextOverflow.ellipsis)*/
                                                                                ),
                                                                                Text(
                                                                                  watchSubTitleList[index],
                                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                                  /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0xffB0B0B0),
                                                                                      overflow: TextOverflow.ellipsis),*/
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 5,
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                                        children: [
                                                                          Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                                style: Theme.of(context).textTheme.labelLarge,
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontSize: text.scale(12),
                                                                                      color: const Color(0xff000000))*/
                                                                              ),
                                                                              Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                  style: TextStyle(
                                                                                      fontWeight: FontWeight.w400,
                                                                                      fontSize: text.scale(12),
                                                                                      color: watchStatusList[index] == "Increse"
                                                                                          ? const Color(0xff0EA102)
                                                                                          : const Color(0XFFFB1212))),
                                                                            ],
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchNotifyList[index]
                                                                        ? GestureDetector(
                                                                            onTap: () async {
                                                                              /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                              kToken = mainUserToken;
                                                                              await notifyBottomSheetMain1(
                                                                                  context: context,
                                                                                  currentIndex: index,
                                                                                  tickerId: watchIdList[index],
                                                                                  tickerName: watchTitleList[index],
                                                                                  editValue: true,
                                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                              setState(() {
                                                                                watchNotifyAddedBoolListMain[index]
                                                                                    ? watchNotifyList[index] = true
                                                                                    : watchNotifyList[index] = false;
                                                                                logEventFunc(
                                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                                        ? 'Set_Price_Alerts'
                                                                                        : 'Removed_Price_Alerts',
                                                                                    type: 'WatchList');
                                                                              });
                                                                            },
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                            ),
                                                                          )
                                                                        : GestureDetector(
                                                                            onTap: () async {
                                                                              if (mainSkipValue) {
                                                                                commonFlushBar(context: context, initFunction: initState);
                                                                              } else {
                                                                                kToken = mainUserToken;
                                                                                bool notifyAdded = await checkProfileVerify();
                                                                                if (notifyAdded) {
                                                                                  if (!mounted) {
                                                                                    return;
                                                                                  }
                                                                                  await notifyBottomSheetMain1(
                                                                                      context: context,
                                                                                      currentIndex: index,
                                                                                      tickerId: watchIdList[index],
                                                                                      tickerName: watchTitleList[index],
                                                                                      editValue: false,
                                                                                      closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                  setState(() {
                                                                                    watchNotifyAddedBoolListMain[index]
                                                                                        ? watchNotifyList[index] = true
                                                                                        : watchNotifyList[index] = false;
                                                                                    logEventFunc(
                                                                                        name: watchNotifyAddedBoolListMain[index]
                                                                                            ? 'Set_Price_Alerts'
                                                                                            : 'Removed_Price_Alerts',
                                                                                        type: 'WatchList');
                                                                                  });
                                                                                } else {
                                                                                  if (!mounted) {
                                                                                    return;
                                                                                  }
                                                                                  Flushbar(
                                                                                    message: "Please fill profile details",
                                                                                    duration: const Duration(seconds: 2),
                                                                                  ).show(context);
                                                                                }
                                                                              }
                                                                            },
                                                                            child: SvgPicture.asset(
                                                                              isDarkTheme.value
                                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                            ),
                                                                          ),
                                                                    SizedBox(width: width / 16.5),
                                                                    watchStarList[index]
                                                                        ? GestureDetector(
                                                                            onTap: () async {
                                                                              logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                              setState(() {
                                                                                watchStarList[index] = !watchStarList[index];
                                                                              });
                                                                              await removeWatchList(
                                                                                  watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                            },
                                                                            child: SizedBox(
                                                                                height: height / 35.03,
                                                                                width: width / 16.30,
                                                                                child: SvgPicture.asset(
                                                                                  isDarkTheme.value
                                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                                )),
                                                                          )
                                                                        : GestureDetector(
                                                                            onTap: () async {
                                                                              if (mainSkipValue) {
                                                                                commonFlushBar(context: context, initFunction: initState);
                                                                              } else {
                                                                                bool added = await apiFunctionsMain.getAddWatchList(
                                                                                    tickerId: watchIdList[index],
                                                                                    context: context,
                                                                                    modelSetState: setState);
                                                                                if (added) {
                                                                                  logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                  setState(() {
                                                                                    watchStarList[index] = !watchStarList[index];
                                                                                  });
                                                                                }
                                                                              }
                                                                              // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                            },
                                                                            child: SizedBox(
                                                                                height: height / 35.03,
                                                                                width: width / 16.30,
                                                                                child: SvgPicture.asset(
                                                                                  isDarkTheme.value
                                                                                      ? "assets/home_screen/empty_star_dark.svg"
                                                                                      : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                                )),
                                                                          ),
                                                                    SizedBox(width: width / 37.5),
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          )
                                                        : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                onDoubleTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                child: Row(
                                                                  children: [
                                                                    const SizedBox(
                                                                      width: 12,
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 3,
                                                                      child: Column(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        mainAxisAlignment: MainAxisAlignment.center,
                                                                        children: [
                                                                          Text(
                                                                            watchTitleList[index],
                                                                            style: Theme.of(context).textTheme.bodyMedium,
                                                                            maxLines: 1,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(14),
                                                                                  color: const Color(0xff000000),
                                                                                  overflow: TextOverflow.ellipsis)*/
                                                                          ),
                                                                          Text(
                                                                            watchSubTitleList[index],
                                                                            /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(10),
                                                                                color: const Color(0xffB0B0B0),
                                                                                overflow: TextOverflow.ellipsis),*/
                                                                            style: Theme.of(context).textTheme.bodySmall,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                        kToken = mainUserToken;
                                                                        await notifyBottomSheetMain1(
                                                                            context: context,
                                                                            currentIndex: index,
                                                                            tickerId: watchIdList[index],
                                                                            tickerName: watchTitleList[index],
                                                                            editValue: true,
                                                                            closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                        setState(() {
                                                                          watchNotifyAddedBoolListMain[index]
                                                                              ? watchNotifyList[index] = true
                                                                              : watchNotifyList[index] = false;
                                                                          logEventFunc(
                                                                              name: watchNotifyAddedBoolListMain[index]
                                                                                  ? 'Set_Price_Alerts'
                                                                                  : 'Removed_Price_Alerts',
                                                                              type: 'WatchList');
                                                                        });
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/ringing_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          kToken = mainUserToken;
                                                                          bool notifyAdded = await checkProfileVerify();
                                                                          if (notifyAdded) {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: false,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          } else {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            Flushbar(
                                                                              message: "Please fill profile details",
                                                                              duration: const Duration(seconds: 2),
                                                                            ).show(context);
                                                                          }
                                                                        }
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                        setState(() {
                                                                          watchStarList[index] = !watchStarList[index];
                                                                        });
                                                                        await removeWatchList(
                                                                            watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          )),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          bool added = await apiFunctionsMain.getAddWatchList(
                                                                              tickerId: watchIdList[index],
                                                                              context: context,
                                                                              modelSetState: setState);
                                                                          if (added) {
                                                                            logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                          }
                                                                        }
                                                                        // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                    ),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          ),
                                                  ],
                                                ),
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          )
                                        ],
                                      );
                                    }
                                    return Column(
                                      children: [
                                        Container(
                                          padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                          decoration: BoxDecoration(
                                              color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                              borderRadius: BorderRadius.circular(15)),
                                          child: Row(
                                            children: [
                                              InkWell(
                                                onTap: () async {
                                                  /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return TickersDetailsPage(
                                                      category: 'stocks',
                                                      id: watchIdList[index],
                                                      exchange: 'US',
                                                      country: "USA",
                                                      name: watchTitleList[index],
                                                      fromWhere: 'add_watch',
                                                    );
                                                  }));
                                                },
                                                onDoubleTap: () async {
                                                  /*mainVariables.selectedTickerId.value=watchIdList[index];
                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));*/
                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return TickersDetailsPage(
                                                      category: 'stocks',
                                                      id: watchIdList[index],
                                                      exchange: 'US',
                                                      country: "USA",
                                                      name: watchTitleList[index],
                                                      fromWhere: 'add_watch',
                                                    );
                                                  }));
                                                },
                                                child: SizedBox(
                                                  height: height / 33.83,
                                                  width: width / 15.625,
                                                  child: Image.network(
                                                    watchLogoList[index],
                                                    fit: BoxFit.fill,
                                                    errorBuilder: (context, _, stack) {
                                                      return SvgPicture.network(watchLogoList[index]);
                                                    },
                                                  ),
                                                ),
                                              ),
                                              widget.id == watchIdList[index]
                                                  ? Shimmer.fromColors(
                                                      baseColor: Colors.black,
                                                      highlightColor: Colors.white,
                                                      direction: ShimmerDirection.ltr,
                                                      child: Wrap(
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                onDoubleTap: () async {
                                                                  // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                  // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return TickersDetailsPage(
                                                                      category: 'stocks',
                                                                      id: watchIdList[index],
                                                                      exchange: 'US',
                                                                      country: "USA",
                                                                      name: watchTitleList[index],
                                                                      fromWhere: 'add_watch',
                                                                    );
                                                                  }));
                                                                },
                                                                child: Row(
                                                                  children: [
                                                                    const SizedBox(
                                                                      width: 12,
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 3,
                                                                      child: Column(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        mainAxisAlignment: MainAxisAlignment.center,
                                                                        children: [
                                                                          Text(
                                                                            watchTitleList[index],
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(14),
                                                                                  color: const Color(0xff000000),
                                                                                  overflow: TextOverflow.ellipsis)*/
                                                                            style: Theme.of(context).textTheme.bodyMedium,
                                                                            maxLines: 1,
                                                                          ),
                                                                          Text(
                                                                            watchSubTitleList[index],
                                                                            /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(10),
                                                                                color: const Color(0xffB0B0B0),
                                                                                overflow: TextOverflow.ellipsis),*/
                                                                            style: Theme.of(context).textTheme.bodySmall,
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(
                                                                width: width / 5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                                      children: [
                                                                        Text(
                                                                          "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w700,
                                                                                fontSize: text.scale(12),
                                                                                color: const Color(0xff000000))*/
                                                                          style: Theme.of(context).textTheme.labelLarge,
                                                                        ),
                                                                        Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                            style: TextStyle(
                                                                                fontWeight: FontWeight.w400,
                                                                                fontSize: text.scale(12),
                                                                                color: watchStatusList[index] == "Increse"
                                                                                    ? const Color(0xff0EA102)
                                                                                    : const Color(0XFFFB1212))),
                                                                      ],
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(width: width / 16.5),
                                                              watchNotifyList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                        kToken = mainUserToken;
                                                                        await notifyBottomSheetMain1(
                                                                            context: context,
                                                                            currentIndex: index,
                                                                            tickerId: watchIdList[index],
                                                                            tickerName: watchTitleList[index],
                                                                            editValue: true,
                                                                            closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                        setState(() {
                                                                          watchNotifyAddedBoolListMain[index]
                                                                              ? watchNotifyList[index] = true
                                                                              : watchNotifyList[index] = false;
                                                                          logEventFunc(
                                                                              name: watchNotifyAddedBoolListMain[index]
                                                                                  ? 'Set_Price_Alerts'
                                                                                  : 'Removed_Price_Alerts',
                                                                              type: 'WatchList');
                                                                        });
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/ringing_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          kToken = mainUserToken;
                                                                          bool notifyAdded = await checkProfileVerify();
                                                                          if (notifyAdded) {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: false,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          } else {
                                                                            if (!mounted) {
                                                                              return;
                                                                            }
                                                                            Flushbar(
                                                                              message: "Please fill profile details",
                                                                              duration: const Duration(seconds: 2),
                                                                            ).show(context);
                                                                          }
                                                                        }
                                                                      },
                                                                      child: SvgPicture.asset(
                                                                        isDarkTheme.value
                                                                            ? "assets/home_screen/empty_bell_dark.svg"
                                                                            : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                      ),
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              watchStarList[index]
                                                                  ? GestureDetector(
                                                                      onTap: () async {
                                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                        setState(() {
                                                                          watchStarList[index] = !watchStarList[index];
                                                                        });
                                                                        await removeWatchList(
                                                                            watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          )),
                                                                    )
                                                                  : GestureDetector(
                                                                      onTap: () async {
                                                                        if (mainSkipValue) {
                                                                          commonFlushBar(context: context, initFunction: initState);
                                                                        } else {
                                                                          bool added = await apiFunctionsMain.getAddWatchList(
                                                                              tickerId: watchIdList[index],
                                                                              context: context,
                                                                              modelSetState: setState);
                                                                          if (added) {
                                                                            logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                          }
                                                                        }
                                                                        // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                      },
                                                                      child: SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                    ),
                                                              SizedBox(width: width / 37.5),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    )
                                                  : Row(
                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchIdList[index],
                                                                exchange: 'US',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'add_watch',
                                                              );
                                                            }));
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchIdList[index],
                                                                exchange: 'US',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'add_watch',
                                                              );
                                                            }));
                                                          },
                                                          child: Row(
                                                            children: [
                                                              const SizedBox(
                                                                width: 12,
                                                              ),
                                                              SizedBox(
                                                                width: width / 3,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 5,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(width: width / 16.5),
                                                        watchNotifyList[index]
                                                            ? GestureDetector(
                                                                onTap: () async {
                                                                  /*setState(() {
                                    watchNotifyList[index] = !watchNotifyList[index];
                                    watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                  kToken = mainUserToken;
                                                                  await notifyBottomSheetMain1(
                                                                      context: context,
                                                                      currentIndex: index,
                                                                      tickerId: watchIdList[index],
                                                                      tickerName: watchTitleList[index],
                                                                      editValue: true,
                                                                      closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                  setState(() {
                                                                    watchNotifyAddedBoolListMain[index]
                                                                        ? watchNotifyList[index] = true
                                                                        : watchNotifyList[index] = false;
                                                                    logEventFunc(
                                                                        name: watchNotifyAddedBoolListMain[index]
                                                                            ? 'Set_Price_Alerts'
                                                                            : 'Removed_Price_Alerts',
                                                                        type: 'WatchList');
                                                                  });
                                                                },
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/ringing_bell_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                ),
                                                              )
                                                            : GestureDetector(
                                                                onTap: () async {
                                                                  if (mainSkipValue) {
                                                                    commonFlushBar(context: context, initFunction: initState);
                                                                  } else {
                                                                    kToken = mainUserToken;
                                                                    bool notifyAdded = await checkProfileVerify();
                                                                    if (notifyAdded) {
                                                                      if (!mounted) {
                                                                        return;
                                                                      }
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    } else {
                                                                      if (!mounted) {
                                                                        return;
                                                                      }
                                                                      Flushbar(
                                                                        message: "Please fill profile details",
                                                                        duration: const Duration(seconds: 2),
                                                                      ).show(context);
                                                                    }
                                                                  }
                                                                },
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/empty_bell_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                ),
                                                              ),
                                                        SizedBox(width: width / 16.5),
                                                        watchStarList[index]
                                                            ? GestureDetector(
                                                                onTap: () async {
                                                                  logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                  setState(() {
                                                                    watchStarList[index] = !watchStarList[index];
                                                                  });
                                                                  await removeWatchList(
                                                                      watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                },
                                                                child: SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    )),
                                                              )
                                                            : GestureDetector(
                                                                onTap: () async {
                                                                  if (mainSkipValue) {
                                                                    commonFlushBar(context: context, initFunction: initState);
                                                                  } else {
                                                                    bool added = await apiFunctionsMain.getAddWatchList(
                                                                        tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                    if (added) {
                                                                      logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                    }
                                                                  }
                                                                  // getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                },
                                                                child: SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                              ),
                                                        SizedBox(width: width / 37.5),
                                                      ],
                                                    ),
                                            ],
                                          ),
                                        ),
                                        Divider(
                                          color: Theme.of(context).colorScheme.tertiary,
                                          thickness: 0.8,
                                        )
                                      ],
                                    );
                                  },
                                ),
                              ),
                            ),
                          )
                : Center(
                    child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                  ),
          ],
        ),
      ),
    );
  }
}

class CryptoWatchTabPage extends StatefulWidget {
  final String? id;

  const CryptoWatchTabPage({
    Key? key,
    this.id,
  }) : super(key: key);

  @override
  State<CryptoWatchTabPage> createState() => _CryptoWatchTabPageState();
}

class _CryptoWatchTabPageState extends State<CryptoWatchTabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[1], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "crypto",
      "category_id": mainCatIdList[1],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  void initState() {
    currentMainIndex = 3;
    widget.id != null ? getWatchValues1(text: '') : debugPrint("nothing");
    streamController2.add(true);
    getWatchValues(text: '');
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          SizedBox(
            height: height / 40.6,
          ),
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.35,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'crypto',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'crypto',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'crypto',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'crypto',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'crypto',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'crypto',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(() {
                                        watchNotifyList[index] =!watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(
                                          notifyId:
                                          watchNotifyAddedIdList[
                                          index],
                                          tickerId:
                                          watchIdList[
                                          index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'crypto',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              onDoubleTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'crypto',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'crypto',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'crypto',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);

                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'crypto',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'crypto',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                /*setState(() {
                                        watchNotifyList[index] =!watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(
                                          notifyId:
                                          watchNotifyAddedIdList[
                                          index],
                                          tickerId:
                                          watchIdList[
                                          index]);*/
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);

                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class CommodityWatchTabPage extends StatefulWidget {
  final int countryIndex;
  final String? id;

  const CommodityWatchTabPage({Key? key, required this.countryIndex, this.id}) : super(key: key);

  @override
  State<CommodityWatchTabPage> createState() => _CommodityWatchTabPageState();
}

class _CommodityWatchTabPageState extends State<CommodityWatchTabPage> with TickerProviderStateMixin, WidgetsBindingObserver {
  TabController? _tabController;

  @override
  void initState() {
    _tabController = TabController(vsync: this, length: 2, initialIndex: widget.countryIndex);
    super.initState();
  }

  @override
  void dispose() {
    _tabController!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return DefaultTabController(
      length: 2,
      child: Column(
        children: [
          Padding(
            padding: EdgeInsets.symmetric(vertical: height / 50.75),
            child: TabBar(
                isScrollable: false,
                indicatorWeight: 2,
                controller: _tabController,
                labelPadding: EdgeInsets.zero,
                indicatorSize: TabBarIndicatorSize.label,
                dividerColor: Colors.transparent,
                dividerHeight: 0.0,
                indicatorColor: const Color(0XFF0EA102),
                splashFactory: NoSplash.splashFactory,
                onTap: (int newIndex) async {},
                tabs: [
                  Text("India",
                      /*style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: text.scale(14),
                      color: const Color(0xff000000),
                    ),*/
                      style: Theme.of(context).textTheme.bodyMedium),
                  Text("USA",
                      /*style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: text.scale(14),
                      color: const Color(0xff000000),
                    ),*/
                      style: Theme.of(context).textTheme.bodyMedium),
                ]),
          ),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              physics: const ScrollPhysics(),
              children: [
                IndiaTabPage(
                  id: widget.id,
                ),
                CommodityUSATabPage(
                  id: widget.id,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class IndiaTabPage extends StatefulWidget {
  final String? id;

  const IndiaTabPage({
    Key? key,
    this.id,
  }) : super(key: key);

  @override
  State<IndiaTabPage> createState() => _IndiaTabPageState();
}

class _IndiaTabPageState extends State<IndiaTabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List<String> countryList = ["India", "USA"];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[2], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "commodity",
      "category_id": mainCatIdList[2],
      "country": countryList[0],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[0],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  void initState() {
    currentMainIndex = 4;
    widget.id != null ? getWatchValues1(text: '') : debugPrint("nothing");
    streamController2.add(true);
    getWatchValues(text: '');
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.45,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                  /* style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'commodity',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'commodity',
                                                          id: watchIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'add_watch',
                                                        );
                                                      }));
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'commodity',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return TickersDetailsPage(
                                                                          category: 'commodity',
                                                                          id: watchIdList[index],
                                                                          exchange: 'NSE',
                                                                          country: "India",
                                                                          name: watchTitleList[index],
                                                                          fromWhere: 'add_watch',
                                                                        );
                                                                      }));
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Row(
                                                                              children: [
                                                                                Text("\u{20B9}",
                                                                                    style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000),
                                                                                        fontFamily: "Robonto")),
                                                                                Text(
                                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                                  /*style: TextStyle(
                                                                                        fontWeight: FontWeight.w700,
                                                                                        fontSize: text.scale(12),
                                                                                        color: const Color(0xff000000))*/
                                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                                ),
                                                                              ],
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                            //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'commodity',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'commodity',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                      //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              onDoubleTap: () async {
                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "India",
                                                    name: watchTitleList[index],
                                                    fromWhere: 'add_watch',
                                                  );
                                                }));
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'commodity',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              onDoubleTap: () async {
                                                                // mainVariables.selectedTickerId.value=watchIdList[index];
                                                                // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return TickersDetailsPage(
                                                                    category: 'commodity',
                                                                    id: watchIdList[index],
                                                                    exchange: 'NSE',
                                                                    country: "India",
                                                                    name: watchTitleList[index],
                                                                    fromWhere: 'add_watch',
                                                                  );
                                                                }));
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Row(
                                                                        children: [
                                                                          Text("\u{20B9}",
                                                                              style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000),
                                                                                  fontFamily: "Robonto")),
                                                                          Text(
                                                                            watchCloseList[index].toStringAsFixed(2),
                                                                            style: Theme.of(context).textTheme.labelLarge,
                                                                            /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontSize: text.scale(12),
                                                                                  color: const Color(0xff000000))*/
                                                                          ),
                                                                        ],
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                      //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'commodity',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'commodity',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'add_watch',
                                                            );
                                                          }));
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Row(
                                                                  children: [
                                                                    Text("\u{20B9}",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000),
                                                                            fontFamily: "Robonto")),
                                                                    Text(
                                                                      watchCloseList[index].toStringAsFixed(2),
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                    ),
                                                                  ],
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                                //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class CommodityUSATabPage extends StatefulWidget {
  final String? id;

  const CommodityUSATabPage({Key? key, this.id}) : super(key: key);

  @override
  State<CommodityUSATabPage> createState() => _CommodityUSATabPageState();
}

class _CommodityUSATabPageState extends State<CommodityUSATabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool loading = false;
  bool emptyList = false;
  List<String> countryList = ["India", "USA"];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
      setState(() {
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "commodity",
      "category_id": mainCatIdList[2],
      "country": countryList[1],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        "country": countryList[1],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}

    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[2], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  @override
  void initState() {
    currentMainIndex = 5;
    streamController2.add(true);
    widget.id != null ? getWatchValues1(text: '') : debugPrint("nothing");
    getWatchValues(text: '');
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.45,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                      MaterialPageRoute(builder:
                                          (BuildContext context) {
                                        return TickersDetailsPage(
                                            category: 'commodity',
                                            id: watchIdList[index],
                                            exchange: 'NSE',
                                            country: "USA",
                                            name: watchTitleList[index],fromWhere: 'add_watch',);
                                      }));*/
                                                    },
                                                    onDoubleTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                      MaterialPageRoute(builder:
                                          (BuildContext context) {
                                        return TickersDetailsPage(
                                            category: 'commodity',
                                            id: watchIdList[index],
                                            exchange: 'NSE',
                                            country: "USA",
                                            name: watchTitleList[index],fromWhere: 'add_watch',);
                                      }));*/
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                              MaterialPageRoute(builder:
                                                  (BuildContext context) {
                                                return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "USA",
                                                    name: watchTitleList[index],fromWhere: 'add_watch',);
                                              }));*/
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                              MaterialPageRoute(builder:
                                                  (BuildContext context) {
                                                return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "USA",
                                                    name: watchTitleList[index],fromWhere: 'add_watch',);
                                              }));*/
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                            //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                      MaterialPageRoute(builder:
                                          (BuildContext context) {
                                        return TickersDetailsPage(
                                            category: 'commodity',
                                            id: watchIdList[index],
                                            exchange: 'NSE',
                                            country: "USA",
                                            name: watchTitleList[index],fromWhere: 'add_watch',);
                                      }));*/
                                              },
                                              onDoubleTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                      MaterialPageRoute(builder:
                                          (BuildContext context) {
                                        return TickersDetailsPage(
                                            category: 'commodity',
                                            id: watchIdList[index],
                                            exchange: 'NSE',
                                            country: "USA",
                                            name: watchTitleList[index],fromWhere: 'add_watch',);
                                      }));*/
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                              MaterialPageRoute(builder:
                                                  (BuildContext context) {
                                                return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "USA",
                                                    name: watchTitleList[index],fromWhere: 'add_watch',);
                                              }));*/
                                                              },
                                                              onDoubleTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                              MaterialPageRoute(builder:
                                                  (BuildContext context) {
                                                return TickersDetailsPage(
                                                    category: 'commodity',
                                                    id: watchIdList[index],
                                                    exchange: 'NSE',
                                                    country: "USA",
                                                    name: watchTitleList[index],fromWhere: 'add_watch',);
                                              }));*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                      //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                    },
                                                    onDoubleTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'commodity',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "USA",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /* style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                            //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                              },
                                                              onDoubleTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                      //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                              },
                                              onDoubleTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                              },
                                                              onDoubleTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'commodity',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "USA",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                      //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          mainVariables.selectedTickerId.value = watchIdList[index];
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return const BusinessProfilePage();
                                                          }));
                                                          /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                        },
                                                        onDoubleTap: () async {
                                                          mainVariables.selectedTickerId.value = watchIdList[index];
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return const BusinessProfilePage();
                                                          }));
                                                          /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'commodity',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "USA",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                /*setState(
                                              () {
                                                watchNotifyList[index] = !watchNotifyList[index];
                                                watchNotifyAddedBoolList[index]=false;
                                          });
                                  await removeNotifyList(
                                          notifyId: watchNotifyAddedIdList[index],
                                          tickerId: watchIdList[index]);*/
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);

                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                                //getWatchValues(text: _searchController1.text, newIndex: _tabController.index, excIndex: _tabController1.index, countryIndex: _tabController2.index);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

class ForexWatchTabPage extends StatefulWidget {
  final String? id;

  const ForexWatchTabPage({
    Key? key,
    this.id,
  }) : super(key: key);

  @override
  State<ForexWatchTabPage> createState() => _ForexWatchTabPageState();
}

class _ForexWatchTabPageState extends State<ForexWatchTabPage> with WidgetsBindingObserver {
  final TextEditingController _searchController = TextEditingController();
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = "";
  int newInt = 0;
  List<String> watchIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<bool> watchStarList = [];
  List<String> watchStatusList = [];
  List<String> watchAddedIdList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  bool emptyList = false;
  bool loading = false;
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    super.dispose();
  }

  getWatchValues({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (widget.id == null) {
        watchIdList.clear();
        watchTitleList.clear();
        watchSubTitleList.clear();
        watchLogoList.clear();
        watchCloseList.clear();
        watchPercentageList.clear();
        watchNotifyList.clear();
        watchStarList.clear();
        watchStatusList.clear();
        watchAddedIdList.clear();
        watchNotifyAddedIdList.clear();
        watchNotifyAddedBoolList.clear();
        watchNotifyAddedBoolListMain.clear();
        nativeAdList.clear();
        nativeAdIsLoadedList.clear();
      }
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
        emptyList = false;
        loading = true;
      });
    } else {
      setState(() {
        emptyList = true;
        loading = true;
      });
    }
  }

  getWatchValues1({required String text}) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    data = {
      "category": "forex",
      "category_id": mainCatIdList[3],
      "skip": 0,
      "search": text,
      "ticker_exist": true,
      'tickers': [widget.id],
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      watchIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStarList.clear();
      watchStatusList.clear();
      watchAddedIdList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    }
  }

  void _onGetWatchLoading() async {
    String text = "";
    setState(() {
      newInt = newInt + 20;
      text = _searchController.text;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchTickers;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": text,
        "ticker_exist": false,
        'tickers': [widget.id],
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        for (int i = 0; i < responseData["response"].length; i++) {
          nativeAdIsLoadedList.add(false);
          nativeAdList.add(NativeAd(
            adUnitId: adVariables.nativeAdUnitId,
            request: const AdRequest(),
            nativeTemplateStyle: NativeTemplateStyle(
              templateType: TemplateType.small,
              mainBackgroundColor: Theme.of(context).colorScheme.background,
            ),
            listener: NativeAdListener(
              onAdLoaded: (Ad ad) {
                debugPrint('$NativeAd loaded.');
                setState(() {
                  nativeAdIsLoadedList[i] = true;
                });
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                debugPrint('$NativeAd failedToLoad: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
              onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
            ),
          )..load());
          watchIdList.add(responseData["response"][i]["_id"]);
          watchTitleList.add(responseData["response"][i]["name"]);
          watchSubTitleList.add(responseData["response"][i]["code"]);
          watchLogoList.add(responseData["response"][i]["logo_url"]);
          watchCloseList.add((responseData["response"][i]["close"]).toDouble());
          watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
          watchNotifyList.add(responseData["response"][i]["notification"]);
          watchStarList.add(responseData["response"][i]["watchlist"]);
          watchStatusList.add(responseData["response"][i]["state"]);
          watchNotifyAddedBoolList.add(false);
          watchNotifyAddedBoolListMain.add(false);
          if (responseData["response"][i]["watch_list"].length != 0) {
            watchAddedIdList.add(responseData["response"][i]["watch_list"][0]["_id"]);
          } else {
            watchAddedIdList.add("");
          }
          if (responseData["response"][i]["watchnotification"].length != 0) {
            watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
          } else {
            watchNotifyAddedIdList.add("");
          }
        }
      });
    } else {}

    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, "ticker_id": tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  Future<dynamic> notifyBottomSheet({
    required BuildContext context,
    required String tickerId,
    required String tickerName,
    required bool bellStatus,
    required String text,
    required int currentIndex,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          bellStatus ? "Turn Off Notification" : "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      /*Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: _height / 34.80,
                            width: _width / 16.07,
                            margin: EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),*/
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              //loading3 = false;
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[3], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  @override
  void initState() {
    currentMainIndex = 6;
    streamController2.add(true);
    widget.id != null ? getWatchValues1(text: '') : debugPrint("nothing");
    getWatchValues(text: '');
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return NotificationListener<OverscrollIndicatorNotification>(
      onNotification: (overflow) {
        overflow.disallowIndicator();
        return true;
      },
      child: Column(
        children: [
          SizedBox(
            height: height / 40.6,
          ),
          Container(
            height: height / 19.33,
            margin: EdgeInsets.symmetric(horizontal: width / 25),
            child: Row(
              children: [
                Expanded(
                  child: extraContainWatchList
                      ? TextFormField(
                          cursorColor: Colors.green,
                          readOnly: true,
                          enabled: true,
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon:
                                _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        )
                      : TextFormField(
                          cursorColor: Colors.green,
                          onChanged: (value) async {
                            setState(() {
                              loading = false;
                            });
                            await getWatchValues(text: value);
                          },
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _searchController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: InputDecoration(
                            fillColor: Theme.of(context).colorScheme.tertiary,
                            filled: true,
                            contentPadding: const EdgeInsets.only(left: 15),
                            prefixIcon: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                            suffixIcon: _searchController.text.isNotEmpty
                                ? GestureDetector(
                                    onTap: () async {
                                      setState(() {
                                        _searchController.clear();
                                      });
                                      await getWatchValues(text: "");
                                      if (!mounted) {
                                        return;
                                      }
                                      FocusScope.of(context).unfocus();
                                    },
                                    child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                  )
                                : const SizedBox(),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                            hintStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                            hintText: 'Search here',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                              borderRadius: BorderRadius.circular(15),
                            ),
                          ),
                        ),
                ),
                const SizedBox(width: 8),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      extraContainWatchList = !extraContainWatchList;
                    });
                  },
                  child: Row(
                    children: [
                      GestureDetector(
                        child: SvgPicture.asset(
                          "lib/Constants/Assets/SMLogos/Frame 162.svg",
                          height: height / 54.13,
                          width: width / 18.25,
                          colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                        ),
                      ),
                      const SizedBox(
                        width: 3,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("Sort",
                              /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                              style: Theme.of(context).textTheme.labelLarge),
                          const SizedBox(width: 2),
                          Container(
                            height: 5,
                            width: 5,
                            decoration: const BoxDecoration(
                              color: Color(0XFF0EA102),
                              shape: BoxShape.circle,
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: height / 50.75,
          ),
          loading
              ? emptyList
                  ? const Padding(
                      padding: EdgeInsets.only(top: 50.0),
                      child: Center(child: Text("No search results found")),
                    )
                  : extraContainWatchList
                      ? Stack(
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              height: height / 1.35,
                              child: ListView.builder(
                                shrinkWrap: true,
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  SizedBox(
                                                    height: height / 33.83,
                                                    width: width / 15.625,
                                                    child: Image.network(
                                                      watchLogoList[index],
                                                      fit: BoxFit.fill,
                                                      errorBuilder: (context, _, stack) {
                                                        return SvgPicture.network(watchLogoList[index]);
                                                      },
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      const SizedBox(
                                                                        width: 12,
                                                                      ),
                                                                      SizedBox(
                                                                        width: width / 3,
                                                                        child: Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          mainAxisAlignment: MainAxisAlignment.center,
                                                                          children: [
                                                                            Text(
                                                                              watchTitleList[index],
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(14),
                                                                                    color: const Color(0xff000000),
                                                                                    overflow: TextOverflow.ellipsis)*/
                                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                                              maxLines: 1,
                                                                            ),
                                                                            Text(
                                                                              watchSubTitleList[index],
                                                                              style: Theme.of(context).textTheme.bodySmall,
                                                                              /*style: TextStyle(
                                                                                  fontWeight: FontWeight.w500,
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xffB0B0B0),
                                                                                  overflow: TextOverflow.ellipsis),*/
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              watchCloseList[index].toStringAsFixed(2),
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/ringing_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        )
                                                                      : SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_bell_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                          ))
                                                                      : SizedBox(
                                                                          height: height / 35.03,
                                                                          width: width / 16.30,
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_star_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                          )),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            SizedBox(
                                              height: height / 33.83,
                                              width: width / 15.625,
                                              child: Image.network(
                                                watchLogoList[index],
                                                fit: BoxFit.fill,
                                                errorBuilder: (context, _, stack) {
                                                  return SvgPicture.network(watchLogoList[index]);
                                                },
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 12,
                                                                ),
                                                                SizedBox(
                                                                  width: width / 3,
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                                    children: [
                                                                      Text(
                                                                        watchTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodyMedium,
                                                                        maxLines: 1,
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(14),
                                                                              color: const Color(0xff000000),
                                                                              overflow: TextOverflow.ellipsis)*/
                                                                      ),
                                                                      Text(
                                                                        watchSubTitleList[index],
                                                                        style: Theme.of(context).textTheme.bodySmall,
                                                                        /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0xffB0B0B0),
                                                                            overflow: TextOverflow.ellipsis),*/
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/filled_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                    ))
                                                                : SizedBox(
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_star_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                    )),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Row(
                                                        children: [
                                                          const SizedBox(
                                                            width: 12,
                                                          ),
                                                          SizedBox(
                                                            width: width / 3,
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                Text(
                                                                  watchTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodyMedium,
                                                                  maxLines: 1,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(14),
                                                                        color: const Color(0xff000000),
                                                                        overflow: TextOverflow.ellipsis)*/
                                                                ),
                                                                Text(
                                                                  watchSubTitleList[index],
                                                                  style: Theme.of(context).textTheme.bodySmall,
                                                                  /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xffB0B0B0),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                              ))
                                                          : SizedBox(
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                              )),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                            Positioned(
                              right: 15,
                              top: 15,
                              child: Container(
                                width: width * 0.5,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(15),
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                                child: Column(
                                  children: [
                                    ExpansionTile(
                                      title: Text(
                                        "CloseValue",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 1,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 2,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    ExpansionTile(
                                      title: Text(
                                        "Change Percentage",
                                        style: TextStyle(
                                          fontSize: text.scale(10),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      children: [
                                        SizedBox(
                                          height: 35,
                                          child: RadioListTile(
                                              value: 3,
                                              groupValue: selectedWatchListIndex,
                                              controlAffinity: ListTileControlAffinity.trailing,
                                              title: Text(
                                                "High to Low",
                                                style: TextStyle(
                                                  fontSize: text.scale(10),
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                              onChanged: (value) {
                                                setState(() {
                                                  selectedWatchListIndex = int.parse(value!.toString());
                                                });
                                              }),
                                        ),
                                        RadioListTile(
                                            value: 4,
                                            groupValue: selectedWatchListIndex,
                                            controlAffinity: ListTileControlAffinity.trailing,
                                            title: Text(
                                              "Low to High",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            onChanged: (value) {
                                              setState(() {
                                                selectedWatchListIndex = int.parse(value!.toString());
                                              });
                                            })
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        selectedWatchListIndex != 0
                                            ? InkWell(
                                                onTap: () async {
                                                  setState(() {
                                                    loading = false;
                                                    extraContainWatchList = false;
                                                    selectedWatchListIndex = 0;
                                                  });
                                                  await getWatchValues(text: _searchController.text);
                                                },
                                                child: Container(
                                                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                  child: Text(
                                                    "Clear",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                ),
                                              )
                                            : const SizedBox(),
                                        InkWell(
                                          onTap: () async {
                                            setState(() {
                                              loading = false;
                                              extraContainWatchList = false;
                                            });
                                            await getWatchValues(text: _searchController.text);
                                          },
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                            margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                            decoration: BoxDecoration(
                                              color: const Color(0XFF0EA102),
                                              borderRadius: BorderRadius.circular(25),
                                            ),
                                            child: Text(
                                              "Apply",
                                              style: TextStyle(
                                                fontSize: text.scale(10),
                                                color: Colors.white,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            )
                          ],
                        )
                      : Expanded(
                          child: Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 25),
                            child: SmartRefresher(
                              controller: _refreshController,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up to load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: height / 14.76,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: _onGetWatchLoading,
                              child: ListView.builder(
                                padding: const EdgeInsets.all(0.0),
                                itemCount: watchTitleList.length,
                                itemBuilder: (BuildContext context, int index) {
                                  if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                    return Column(
                                      children: [
                                        Container(
                                            height: height / 9.10,
                                            margin: const EdgeInsets.symmetric(horizontal: 15),
                                            child: AdWidget(ad: nativeAdList[index])),
                                        SizedBox(height: height / 57.73),
                                        Column(
                                          children: [
                                            Container(
                                              padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                                  borderRadius: BorderRadius.circular(15)),
                                              child: Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                    },
                                                    onDoubleTap: () async {
                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                    },
                                                    child: SizedBox(
                                                      height: height / 33.83,
                                                      width: width / 15.625,
                                                      child: Image.network(
                                                        watchLogoList[index],
                                                        fit: BoxFit.fill,
                                                        errorBuilder: (context, _, stack) {
                                                          return SvgPicture.network(watchLogoList[index]);
                                                        },
                                                      ),
                                                    ),
                                                  ),
                                                  widget.id == watchIdList[index]
                                                      ? Shimmer.fromColors(
                                                          baseColor: Colors.black,
                                                          highlightColor: Colors.white,
                                                          direction: ShimmerDirection.ltr,
                                                          child: Wrap(
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'forex',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                                    },
                                                                    onDoubleTap: () async {
                                                                      mainVariables.selectedTickerId.value = watchIdList[index];
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return const BusinessProfilePage();
                                                                      }));
                                                                      /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'forex',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                                    },
                                                                    child: Row(
                                                                      children: [
                                                                        const SizedBox(
                                                                          width: 12,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 3,
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              Text(
                                                                                watchTitleList[index],
                                                                                /*style: TextStyle(
                                                                                      fontWeight: FontWeight.w500,
                                                                                      fontSize: text.scale(14),
                                                                                      color: const Color(0xff000000),
                                                                                      overflow: TextOverflow.ellipsis)*/
                                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                                maxLines: 1,
                                                                              ),
                                                                              Text(
                                                                                watchSubTitleList[index],
                                                                                style: Theme.of(context).textTheme.bodySmall,
                                                                                /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w500,
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0xffB0B0B0),
                                                                                    overflow: TextOverflow.ellipsis),*/
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 5,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              watchCloseList[index].toStringAsFixed(2),
                                                                              style: Theme.of(context).textTheme.labelLarge,
                                                                              /*style: TextStyle(
                                                                                    fontWeight: FontWeight.w700,
                                                                                    fontSize: text.scale(12),
                                                                                    color: const Color(0xff000000))*/
                                                                            ),
                                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                                style: TextStyle(
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontSize: text.scale(12),
                                                                                    color: watchStatusList[index] == "Increse"
                                                                                        ? const Color(0xff0EA102)
                                                                                        : const Color(0XFFFB1212))),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchNotifyList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                            kToken = mainUserToken;
                                                                            await notifyBottomSheetMain1(
                                                                                context: context,
                                                                                currentIndex: index,
                                                                                tickerId: watchIdList[index],
                                                                                tickerName: watchTitleList[index],
                                                                                editValue: true,
                                                                                closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                            setState(() {
                                                                              watchNotifyAddedBoolListMain[index]
                                                                                  ? watchNotifyList[index] = true
                                                                                  : watchNotifyList[index] = false;
                                                                              logEventFunc(
                                                                                  name: watchNotifyAddedBoolListMain[index]
                                                                                      ? 'Set_Price_Alerts'
                                                                                      : 'Removed_Price_Alerts',
                                                                                  type: 'WatchList');
                                                                            });
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/ringing_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              kToken = mainUserToken;
                                                                              bool notifyAdded = await checkProfileVerify();
                                                                              if (notifyAdded) {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                await notifyBottomSheetMain1(
                                                                                    context: context,
                                                                                    currentIndex: index,
                                                                                    tickerId: watchIdList[index],
                                                                                    tickerName: watchTitleList[index],
                                                                                    editValue: false,
                                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                                setState(() {
                                                                                  watchNotifyAddedBoolListMain[index]
                                                                                      ? watchNotifyList[index] = true
                                                                                      : watchNotifyList[index] = false;
                                                                                  logEventFunc(
                                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                                          ? 'Set_Price_Alerts'
                                                                                          : 'Removed_Price_Alerts',
                                                                                      type: 'WatchList');
                                                                                });
                                                                              } else {
                                                                                if (!mounted) {
                                                                                  return;
                                                                                }
                                                                                Flushbar(
                                                                                  message: "Please fill profile details",
                                                                                  duration: const Duration(seconds: 2),
                                                                                ).show(context);
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SvgPicture.asset(
                                                                            isDarkTheme.value
                                                                                ? "assets/home_screen/empty_bell_dark.svg"
                                                                                : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                            height: height / 35.03,
                                                                            width: width / 16.30,
                                                                          ),
                                                                        ),
                                                                  SizedBox(width: width / 16.5),
                                                                  watchStarList[index]
                                                                      ? GestureDetector(
                                                                          onTap: () async {
                                                                            logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                            setState(() {
                                                                              watchStarList[index] = !watchStarList[index];
                                                                            });
                                                                            await removeWatchList(
                                                                                watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/filled_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                              )),
                                                                        )
                                                                      : GestureDetector(
                                                                          onTap: () async {
                                                                            if (mainSkipValue) {
                                                                              commonFlushBar(context: context, initFunction: initState);
                                                                            } else {
                                                                              bool added = await apiFunctionsMain.getAddWatchList(
                                                                                  tickerId: watchIdList[index],
                                                                                  context: context,
                                                                                  modelSetState: setState);
                                                                              if (added) {
                                                                                logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                                setState(() {
                                                                                  watchStarList[index] = !watchStarList[index];
                                                                                });
                                                                              }
                                                                            }
                                                                          },
                                                                          child: SizedBox(
                                                                              height: height / 35.03,
                                                                              width: width / 16.30,
                                                                              child: SvgPicture.asset(
                                                                                isDarkTheme.value
                                                                                    ? "assets/home_screen/empty_star_dark.svg"
                                                                                    : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                              )),
                                                                        ),
                                                                  SizedBox(width: width / 37.5),
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        )
                                                      : Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                              },
                                                              onDoubleTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          /* style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        ),
                                                ],
                                              ),
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        )
                                      ],
                                    );
                                  }
                                  return Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.symmetric(vertical: height / 50.75, horizontal: 5),
                                        decoration: BoxDecoration(
                                            color: widget.id == watchIdList[index] ? Colors.green.shade100 : Colors.transparent,
                                            borderRadius: BorderRadius.circular(15)),
                                        child: Row(
                                          children: [
                                            InkWell(
                                              onTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                              },
                                              onDoubleTap: () async {
                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const BusinessProfilePage();
                                                }));
                                                /*Navigator.push(context,
                                                MaterialPageRoute(builder:
                                                    (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                              },
                                              child: SizedBox(
                                                height: height / 33.83,
                                                width: width / 15.625,
                                                child: Image.network(
                                                  watchLogoList[index],
                                                  fit: BoxFit.fill,
                                                  errorBuilder: (context, _, stack) {
                                                    return SvgPicture.network(watchLogoList[index]);
                                                  },
                                                ),
                                              ),
                                            ),
                                            widget.id == watchIdList[index]
                                                ? Shimmer.fromColors(
                                                    baseColor: Colors.black,
                                                    highlightColor: Colors.white,
                                                    direction: ShimmerDirection.ltr,
                                                    child: Wrap(
                                                      children: [
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            InkWell(
                                                              onTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'forex',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                              },
                                                              onDoubleTap: () async {
                                                                mainVariables.selectedTickerId.value = watchIdList[index];
                                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                  return const BusinessProfilePage();
                                                                }));
                                                                /*Navigator.push(context,
                                                        MaterialPageRoute(builder:
                                                            (BuildContext context) {
                                                          return TickersDetailsPage(
                                                              category: 'forex',
                                                              id: watchIdList[index],
                                                              exchange: 'NSE',
                                                              country: "India",
                                                              name: watchTitleList[index],fromWhere: 'add_watch',);
                                                        }));*/
                                                              },
                                                              child: Row(
                                                                children: [
                                                                  const SizedBox(
                                                                    width: 12,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3,
                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                                      children: [
                                                                        Text(
                                                                          watchTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodyMedium,
                                                                          maxLines: 1,
                                                                          /*style: TextStyle(
                                                                                fontWeight: FontWeight.w500,
                                                                                fontSize: text.scale(14),
                                                                                color: const Color(0xff000000),
                                                                                overflow: TextOverflow.ellipsis)*/
                                                                        ),
                                                                        Text(
                                                                          watchSubTitleList[index],
                                                                          style: Theme.of(context).textTheme.bodySmall,
                                                                          /*style: TextStyle(
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xffB0B0B0),
                                                                              overflow: TextOverflow.ellipsis),*/
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(
                                                              width: width / 5,
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.end,
                                                                    children: [
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                      Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w400,
                                                                              fontSize: text.scale(12),
                                                                              color: watchStatusList[index] == "Increse"
                                                                                  ? const Color(0xff0EA102)
                                                                                  : const Color(0XFFFB1212))),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            SizedBox(width: width / 16.5),
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(() {
                                        watchNotifyList[index] = !watchNotifyList[index];
                                        watchNotifyAddedBoolList[index]=false;
                                  });
                                  await removeNotifyList(notifyId: watchNotifyAddedIdList[index], tickerId: watchIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        kToken = mainUserToken;
                                                                        bool notifyAdded = await checkProfileVerify();
                                                                        if (notifyAdded) {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          await notifyBottomSheetMain1(
                                                                              context: context,
                                                                              currentIndex: index,
                                                                              tickerId: watchIdList[index],
                                                                              tickerName: watchTitleList[index],
                                                                              editValue: false,
                                                                              closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                          setState(() {
                                                                            watchNotifyAddedBoolListMain[index]
                                                                                ? watchNotifyList[index] = true
                                                                                : watchNotifyList[index] = false;
                                                                            logEventFunc(
                                                                                name: watchNotifyAddedBoolListMain[index]
                                                                                    ? 'Set_Price_Alerts'
                                                                                    : 'Removed_Price_Alerts',
                                                                                type: 'WatchList');
                                                                          });
                                                                        } else {
                                                                          if (!mounted) {
                                                                            return;
                                                                          }
                                                                          Flushbar(
                                                                            message: "Please fill profile details",
                                                                            duration: const Duration(seconds: 2),
                                                                          ).show(context);
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            watchStarList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                      setState(() {
                                                                        watchStarList[index] = !watchStarList[index];
                                                                      });
                                                                      await removeWatchList(
                                                                          watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/filled_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                        )),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      if (mainSkipValue) {
                                                                        commonFlushBar(context: context, initFunction: initState);
                                                                      } else {
                                                                        bool added = await apiFunctionsMain.getAddWatchList(
                                                                            tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                        if (added) {
                                                                          logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                          setState(() {
                                                                            watchStarList[index] = !watchStarList[index];
                                                                          });
                                                                        }
                                                                      }
                                                                    },
                                                                    child: SizedBox(
                                                                        height: height / 35.03,
                                                                        width: width / 16.30,
                                                                        child: SvgPicture.asset(
                                                                          isDarkTheme.value
                                                                              ? "assets/home_screen/empty_star_dark.svg"
                                                                              : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                        )),
                                                                  ),
                                                            SizedBox(width: width / 37.5),
                                                          ],
                                                        )
                                                      ],
                                                    ),
                                                  )
                                                : Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          mainVariables.selectedTickerId.value = watchIdList[index];
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return const BusinessProfilePage();
                                                          }));
                                                          /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                        },
                                                        onDoubleTap: () async {
                                                          mainVariables.selectedTickerId.value = watchIdList[index];
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return const BusinessProfilePage();
                                                          }));
                                                          /*Navigator.push(context,
                                                    MaterialPageRoute(builder:
                                                        (BuildContext context) {
                                                  return TickersDetailsPage(
                                                      category: 'forex',
                                                      id: watchIdList[index],
                                                      exchange: 'NSE',
                                                      country: "India",
                                                      name: watchTitleList[index],fromWhere: 'add_watch',);
                                                }));*/
                                                        },
                                                        child: Row(
                                                          children: [
                                                            const SizedBox(
                                                              width: 12,
                                                            ),
                                                            SizedBox(
                                                              width: width / 3,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /* style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 5,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(width: width / 16.5),
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  kToken = mainUserToken;
                                                                  bool notifyAdded = await checkProfileVerify();
                                                                  if (notifyAdded) {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  } else {
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    Flushbar(
                                                                      message: "Please fill profile details",
                                                                      duration: const Duration(seconds: 2),
                                                                    ).show(context);
                                                                  }
                                                                }
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      watchStarList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                setState(() {
                                                                  watchStarList[index] = !watchStarList[index];
                                                                });
                                                                await removeWatchList(watchId: watchAddedIdList[index], tickerId: watchIdList[index]);
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                if (mainSkipValue) {
                                                                  commonFlushBar(context: context, initFunction: initState);
                                                                } else {
                                                                  bool added = await apiFunctionsMain.getAddWatchList(
                                                                      tickerId: watchIdList[index], context: context, modelSetState: setState);
                                                                  if (added) {
                                                                    logEventFunc(name: 'Added_Watchlist', type: 'WatchList');
                                                                    setState(() {
                                                                      watchStarList[index] = !watchStarList[index];
                                                                    });
                                                                  }
                                                                }
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyStar.svg",
                                                                  )),
                                                            ),
                                                      SizedBox(width: width / 37.5),
                                                    ],
                                                  ),
                                          ],
                                        ),
                                      ),
                                      Divider(
                                        color: Theme.of(context).colorScheme.tertiary,
                                        thickness: 0.8,
                                      )
                                    ],
                                  );
                                },
                              ),
                            ),
                          ),
                        )
              : Center(
                  child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                )
        ],
      ),
    );
  }
}

bool extraContainWatchList = false;
int selectedWatchListIndex = 0;
