import 'dart:convert';

import 'package:another_flushbar/flushbar.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:http/http.dart' as http;
import 'package:lottie/lottie.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tradewatchfinal/Constants/API/api.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/Settings/settings_skip_view.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/Settings/settings_view.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/Theme/theme_page.dart';
import 'package:tradewatchfinal/Screens/Module1/bottom_navigation.dart';
import 'package:tradewatchfinal/Screens/Module1/notifications_page.dart';
import 'package:tradewatchfinal/Screens/Module5/TickerDetail/tickers_details_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/BusinessProfile/business_profile_page.dart';

import 'add_watch_list_page.dart';

class WatchList extends StatefulWidget {
  final int newIndex;
  final int excIndex;
  final int countryIndex;

  const WatchList({Key? key, required this.newIndex, required this.excIndex, required this.countryIndex}) : super(key: key);

  @override
  State<WatchList> createState() => _WatchListState();
}

class _WatchListState extends State<WatchList> with TickerProviderStateMixin {
  late final TabController _tabController;
  String mainUserToken = "";

  @override
  void initState() {
    mainSkipValue ? debugPrint("nothing") : pageVisitFunc(pageName: 'watchlist');
    streamController3.stream.listen((event) {
      if (mounted) {
        setState(() {
          liveStatusActive11 = event;
        });
      }
    });
    super.initState();
    _tabController = TabController(length: 4, vsync: this, initialIndex: widget.newIndex);
    getAllDataMain(name: 'Watchlist_Page');
    getNotifyCountAndImage();
    if (widget.newIndex == 0) {
      getLiveStatus(excIndex: widget.excIndex);
    } else {
      streamController3.add(true);
    }
  }

  getNotifyCountAndImage() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await functionsMain.getNotifyCount();
    avatarMain.value = prefs.getString('newUserAvatar') ?? "https://tradewatch-s3.s3.ap-south-1.amazonaws.com/users/user.png";
  }

  getLiveStatus({required int excIndex}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url,
        //options:Options( headers: {'Authorization': mainUserToken}),
        data: {
          "category": "stocks",
          "type": excIndex == 0
              ? "US"
              : excIndex == 1
                  ? "NSE"
                  : excIndex == 1
                      ? "BSE"
                      : "NSE",
        });
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    return WillPopScope(
      onWillPop: () async {
        if (extraContainWatchList == false) {
          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
            return const MainBottomNavigationPage(
              tType: true,
              text: "",
              caseNo1: 0,
              newIndex: 0,
              excIndex: 0,
              countryIndex: 0,
              isHomeFirstTym: false,
            );
          }));
          return true;
        } else {
          setState(() {
            extraContainWatchList = false;
          });
          return false;
        }
      },
      child: GestureDetector(
        onTap: () {
          setState(() {
            extraContainWatchList = false;
          });
        },
        child: Container(
          // color: const Color(0XFFFFFFFF),
          color: Theme.of(context).colorScheme.background,
          child: SafeArea(
            child: DefaultTabController(
              length: 4,
              child: Scaffold(
                  // backgroundColor: const Color(0XFFFFFFFF),
                  backgroundColor: Theme.of(context).colorScheme.background,
                  appBar: AppBar(
                    toolbarHeight: height / 6,
                    //backgroundColor: const Color(0XFFFFFFFF),
                    backgroundColor: Theme.of(context).colorScheme.background,
                    automaticallyImplyLeading: false,
                    title: Column(
                      children: [
                        SizedBox(
                          height: height / 25.75,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  "Watchlist",
                                  //style: TextStyle(fontSize: text.scale(26), color: Colors.black, fontWeight: FontWeight.w900, fontFamily: "Poppins"),
                                  style: Theme.of(context).textTheme.titleLarge,
                                ),
                              ],
                            ),
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                GestureDetector(
                                    onTap: () async {
                                      bool response = await Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return const NotificationsPage();
                                      }));
                                      if (response) {
                                        await functionsMain.getNotifyCount();
                                        setState(() {});
                                      }
                                    },
                                    child: widgetsMain.getNotifyBadge(context: context)),
                                SizedBox(
                                  width: width / 23.43,
                                ),
                                GestureDetector(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return mainSkipValue ? const SettingsSkipView() : const SettingsView();
                                      }));
                                    },
                                    child: widgetsMain.getProfileImage(context: context, isLogged: mainSkipValue))
                              ],
                            ),
                          ],
                        ),
                        SizedBox(
                          height: height / 32.48,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            InkWell(
                              onTap: () {
                                if (extraContainWatchList) {
                                  setState(() {
                                    extraContainWatchList = false;
                                  });
                                } else {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) => AddWatchlistPage(
                                                newIndex: _tabController.index,
                                                excIndex: currentMainIndex == 7
                                                    ? 0
                                                    : currentMainIndex == 1
                                                        ? 1
                                                        : currentMainIndex == 2
                                                            ? 2
                                                            : currentMainIndex == 8
                                                                ? 3
                                                                : currentMainIndex == 0
                                                                    ? 4
                                                                    : 0,
                                                countryIndex: currentMainIndex == 4
                                                    ? 0
                                                    : currentMainIndex == 5
                                                        ? 1
                                                        : 0,
                                              )));
                                }
                              },
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  Container(
                                    height: height / 34.80,
                                    width: width / 16.07,
                                    margin: const EdgeInsets.only(right: 15),
                                    decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                                    child: SvgPicture.asset(
                                      "lib/Constants/Assets/SMLogos/Plus.svg",
                                      fit: BoxFit.fill,
                                      //colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.primary, BlendMode.srcIn),
                                    ),
                                  ),
                                  Text("Add Watchlist",
                                      /* style: TextStyle(
                                      fontWeight: FontWeight.w600,
                                      fontSize: text.scale(16),
                                      color: const Color(0XFF0EA102),
                                    ),*/
                                      style: Theme.of(context).textTheme.titleSmall!.copyWith(color: Theme.of(context).colorScheme.primary)),
                                ],
                              ),
                            ),
                            _tabController.index == 0
                                ? liveStatusActive11
                                    ? Container(
                                        height: height / 34.80,
                                        width: width / 16.07,
                                        margin: const EdgeInsets.only(right: 5),
                                        decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                                        child: Image.asset(
                                          isDarkTheme.value ? "assets/home_screen/live_dark.png" : "assets/home_screen/live.png",
                                          fit: BoxFit.fill,
                                        ),
                                      )
                                    : const SizedBox()
                                : const SizedBox(),
                          ],
                        ),
                        SizedBox(
                          height: height / 25.75,
                        ),
                      ],
                    ),
                    elevation: 0.0,
                    shadowColor: Theme.of(context).colorScheme.tertiary,
                    bottom: TabBar(
                        controller: _tabController,
                        isScrollable: false,
                        labelPadding: const EdgeInsets.all(0),
                        indicatorColor: const Color(0XFF0EA102),
                        indicatorSize: TabBarIndicatorSize.label,
                        dividerColor: Colors.transparent,
                        dividerHeight: 0.0,
                        splashFactory: NoSplash.splashFactory,
                        tabs: [
                          Text("Stocks",
                              /*style: TextStyle(
                                fontSize: text.scale(14),
                                fontWeight: FontWeight.w500,
                                color: Colors.black,
                                fontFamily: "Poppins",
                              ),*/
                              style: Theme.of(context).textTheme.bodyMedium),
                          Text("Crypto",
                              /*style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              color: Colors.black,
                              fontFamily: "Poppins",
                            ),*/
                              style: Theme.of(context).textTheme.bodyMedium),
                          Text("Commodity",
                              /* style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              color: Colors.black,
                              fontFamily: "Poppins",
                            ),*/
                              style: Theme.of(context).textTheme.bodyMedium),
                          Text("Forex",
                              /* style: TextStyle(
                              fontSize: text.scale(14),
                              fontWeight: FontWeight.w500,
                              color: Colors.black,
                              fontFamily: "Poppins",
                            ),*/
                              style: Theme.of(context).textTheme.bodyMedium),
                        ]),
                  ),
                  body: TabBarView(
                    controller: _tabController,
                    physics: const ScrollPhysics(),
                    children: [
                      StocksWatchTabListPage(
                        excIndex: widget.excIndex,
                      ),
                      const CryptoWatchTabListPage(),
                      CommodityWatchTabListPage(countryIndex: widget.countryIndex),
                      const ForexWatchTabListPage(),
                    ],
                  )),
            ),
          ),
        ),
      ),
    );
  }
}

class StocksWatchTabListPage extends StatefulWidget {
  final int excIndex;

  const StocksWatchTabListPage({Key? key, required this.excIndex}) : super(key: key);

  @override
  State<StocksWatchTabListPage> createState() => _StocksWatchTabListPageState();
}

class _StocksWatchTabListPageState extends State<StocksWatchTabListPage> with TickerProviderStateMixin, WidgetsBindingObserver {
  TabController? _tabController;
  String mainUserToken = "";
  int excIndex = 1;

  @override
  void initState() {
    _tabController = TabController(vsync: this, length: 5, initialIndex: widget.excIndex);
    super.initState();
  }

  @override
  void dispose() {
    _tabController!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    return DefaultTabController(
      length: 5,
      child: Column(
        children: [
          SizedBox(height: height / 57.73),
          PreferredSize(
            preferredSize: Size.fromWidth(width / 13.7),
            child: SizedBox(
                height: 35,
                width: width,
                child: TabBar(
                    isScrollable: true,
                    indicatorWeight: 2,
                    controller: _tabController,
                    indicatorSize: TabBarIndicatorSize.label,
                    indicatorColor: const Color(0XFF0EA102),
                    tabAlignment: TabAlignment.center,
                    dividerColor: Colors.transparent,
                    dividerHeight: 0.0,
                    labelPadding: EdgeInsets.symmetric(horizontal: width / 17.86),
                    splashFactory: NoSplash.splashFactory,
                    tabs: [
                      Text("Indian Indexes",
                          /*style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: text.scale(14),
                          color: const Color(0xff000000),
                        ),*/
                          style: Theme.of(context).textTheme.bodyMedium),
                      Text("NSE India",
                          /*style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: text.scale(14),
                          color: const Color(0xff000000),
                        ),*/
                          style: Theme.of(context).textTheme.bodyMedium),
                      Text("BSE India",
                          /*style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: text.scale(14),
                          color: const Color(0xff000000),
                        ),*/
                          style: Theme.of(context).textTheme.bodyMedium),
                      Text("USA Indexes",
                          /*style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: text.scale(14),
                          color: const Color(0xff000000),
                        ),*/
                          style: Theme.of(context).textTheme.bodyMedium),
                      Text("USA Stocks",
                          /*style: TextStyle(
                          fontWeight: FontWeight.w500,
                          fontSize: text.scale(14),
                          color: const Color(0xff000000),
                        ),*/
                          style: Theme.of(context).textTheme.bodyMedium),
                    ])),
          ),
          SizedBox(height: height / 57.73),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              physics: const ScrollPhysics(),
              children: const [
                IndianIndexesTabPage(),
                NSETabListPage(),
                BSETabListPage(),
                USAIndexesTabPage(),
                USATabListPage(),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class IndianIndexesTabPage extends StatefulWidget {
  const IndianIndexesTabPage({Key? key}) : super(key: key);

  @override
  State<IndianIndexesTabPage> createState() => _IndianIndexesTabPageState();
}

class _IndianIndexesTabPageState extends State<IndianIndexesTabPage> {
  int newInt = 0;
  bool loading1 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';
  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 7;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading1 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    await getLiveStatus();
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      // headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"category": "stocks", "type": "NSE"});
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  removeWatchList({
    required String watchId,
    required String tickerId,
  }) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[1],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({
    required String notifyId,
    required String tickerId,
  }) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": 0,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              ad.dispose();
            },
            onAdOpened: (Ad ad) {},
            onAdClosed: (Ad ad) {},
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading1 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading1 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "India",
        "skip": newInt,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              ad.dispose();
            },
            onAdOpened: (Ad ad) {},
            onAdClosed: (Ad ad) {},
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading1 = true;
      });
    } else {
      setState(() {
        loading1 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 0,
                                      excIndex: 1,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: Theme.of(context).textTheme.bodyMedium!.copyWith(fontSize: text.scale(15)),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? Icon(Icons.cancel, size: 22, color: Theme.of(context).colorScheme.primary)
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading1 = true;
                                });
                                await getWatchValues();
                              },
                              style: Theme.of(context).textTheme.bodyMedium!.copyWith(fontSize: text.scale(15)),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: Icon(Icons.cancel, size: 22, color: Theme.of(context).colorScheme.primary),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading1
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading1 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading1 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'NSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'NSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /* style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(watchCloseList[index].toStringAsFixed(2),
                                                                    /* style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class NSETabListPage extends StatefulWidget {
  const NSETabListPage({Key? key}) : super(key: key);

  @override
  State<NSETabListPage> createState() => _NSETabListPageState();
}

class _NSETabListPageState extends State<NSETabListPage> {
  int newInt = 0;
  bool loading1 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';

  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 1;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading1 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    await getLiveStatus();
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      // headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"category": "stocks", "type": "NSE"});
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[1],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading1 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading1 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[1],
        "skip": newInt,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading1 = true;
      });
    } else {
      setState(() {
        loading1 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 0,
                                      excIndex: 1,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? Icon(Icons.cancel, size: 22, color: Theme.of(context).colorScheme.primary)
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading1 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading1
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading1 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading1 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'NSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'NSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'NSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class BSETabListPage extends StatefulWidget {
  const BSETabListPage({Key? key}) : super(key: key);

  @override
  State<BSETabListPage> createState() => _BSETabListPageState();
}

class _BSETabListPageState extends State<BSETabListPage> {
  int newInt = 0;
  bool loading2 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';

  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 2;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading2 = false;

    super.dispose();
  }

  getAllData() async {
    await getEx();
    await getLiveStatus();
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"category": "stocks", "type": "BSE"});
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[2],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": 0,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());

        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading2 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading2 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[2],
        "skip": newInt,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());

        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading2 = true;
      });
    } else {
      setState(() {
        loading2 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 0,
                                      excIndex: 2,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading2 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading2
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              ),
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis))*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading2 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading2 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'BSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'stocks',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'BSE',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /* await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'BSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'stocks',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'BSE',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /* await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class USAIndexesTabPage extends StatefulWidget {
  const USAIndexesTabPage({Key? key}) : super(key: key);

  @override
  State<USAIndexesTabPage> createState() => _USAIndexesTabPageState();
}

class _USAIndexesTabPageState extends State<USAIndexesTabPage> {
  int newInt = 0;
  bool loading = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';
  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 8;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    await getLiveStatus();
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url,
        //options:Options( headers: {'Authorization': mainUserToken}),
        data: {"category": "stocks", "type": "US"});
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[0],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": "625e59ec49d900f6585bc694",
        "type": "US",
        "skip": newInt,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading = true;
      });
    } else {
      setState(() {
        loading = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 0,
                                      excIndex: 0,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              child: SmartRefresher(
                                controller: _refreshController,
                                enablePullDown: false,
                                enablePullUp: true,
                                footer: CustomFooter(
                                  builder: (BuildContext context, LoadStatus? mode) {
                                    Widget body;
                                    if (mode == LoadStatus.idle) {
                                      body = const Text("pull up to load");
                                    } else if (mode == LoadStatus.loading) {
                                      body = const CupertinoActivityIndicator();
                                    } else if (mode == LoadStatus.failed) {
                                      body = const Text("Load Failed!Click retry!");
                                    } else if (mode == LoadStatus.canLoading) {
                                      body = const Text("release to load more");
                                    } else {
                                      body = const Text("No more Data");
                                    }
                                    return SizedBox(
                                      height: height / 14.76,
                                      child: Center(child: body),
                                    );
                                  },
                                ),
                                onLoading: _onGetWatchLoading,
                                child: ListView.builder(
                                    shrinkWrap: true,
                                    itemCount: watchTitleList.length,
                                    itemBuilder: (BuildContext context, int index) {
                                      if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                        return Column(
                                          children: [
                                            Container(
                                                height: height / 9.10,
                                                margin: const EdgeInsets.symmetric(horizontal: 15),
                                                child: AdWidget(ad: nativeAdList[index])),
                                            SizedBox(height: height / 57.73),
                                            Container(
                                              margin: const EdgeInsets.symmetric(vertical: 10),
                                              child: Column(
                                                children: [
                                                  index == 0
                                                      ? SizedBox(
                                                          height: height / 50.75,
                                                        )
                                                      : const SizedBox(),
                                                  Row(
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchTickerIdList[index],
                                                              exchange: 'US',
                                                              country: "USA",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'watch',
                                                            );
                                                          }));
                                                          /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchTickerIdList[index],
                                                              exchange: 'US',
                                                              country: "USA",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'watch',
                                                            );
                                                          }));
                                                          /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                        },
                                                        child: Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 4,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                            Padding(
                                                              padding: const EdgeInsets.only(left: 5.0),
                                                              child: watchStatusList[index] == "Increse"
                                                                  ? const Icon(
                                                                      Icons.arrow_upward,
                                                                      color: Color(0xff0EA102),
                                                                      size: 15,
                                                                    )
                                                                  : const Icon(
                                                                      Icons.arrow_downward,
                                                                      color: Color(0XFFFB1212),
                                                                      size: 15,
                                                                    ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      Expanded(
                                                          child: Row(
                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                        children: [
                                                          watchNotifyList[index]
                                                              ? GestureDetector(
                                                                  onTap: () async {
                                                                    kToken = mainUserToken;
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchTickerIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: true,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  },
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                                )
                                                              : GestureDetector(
                                                                  onTap: () async {
                                                                    kToken = mainUserToken;
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchTickerIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  },
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                                ),
                                                          SizedBox(width: width / 16.5),
                                                          GestureDetector(
                                                            onTap: () async {
                                                              logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                              await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                              getWatchValues();
                                                            },
                                                            child: SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ),
                                                        ],
                                                      ))
                                                    ],
                                                  ),
                                                  Divider(
                                                    color: Theme.of(context).colorScheme.tertiary,
                                                    thickness: 0.8,
                                                  )
                                                ],
                                              ),
                                            )
                                          ],
                                        );
                                      }
                                      return Container(
                                        margin: const EdgeInsets.symmetric(vertical: 10),
                                        child: Column(
                                          children: [
                                            index == 0
                                                ? SizedBox(
                                                    height: height / 50.75,
                                                  )
                                                : const SizedBox(),
                                            Row(
                                              children: [
                                                InkWell(
                                                  onTap: () async {
                                                    // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                    // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                    Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                      return TickersDetailsPage(
                                                        category: 'stocks',
                                                        id: watchTickerIdList[index],
                                                        exchange: 'US',
                                                        country: "USA",
                                                        name: watchTitleList[index],
                                                        fromWhere: 'watch',
                                                      );
                                                    }));
                                                    /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                  },
                                                  onDoubleTap: () async {
                                                    // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                    // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                    Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                      return TickersDetailsPage(
                                                        category: 'stocks',
                                                        id: watchTickerIdList[index],
                                                        exchange: 'US',
                                                        country: "USA",
                                                        name: watchTitleList[index],
                                                        fromWhere: 'watch',
                                                      );
                                                    }));
                                                    /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                  },
                                                  child: Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                SizedBox(
                                                  width: width / 4,
                                                  child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      Column(
                                                        crossAxisAlignment: CrossAxisAlignment.end,
                                                        children: [
                                                          Text(
                                                            "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                            /*style: TextStyle(
                                                                  fontWeight: FontWeight.w700,
                                                                  fontSize: text.scale(12),
                                                                  color: const Color(0xff000000))*/
                                                            style: Theme.of(context).textTheme.labelLarge,
                                                          ),
                                                          Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                              style: TextStyle(
                                                                  fontWeight: FontWeight.w400,
                                                                  fontSize: text.scale(12),
                                                                  color: watchStatusList[index] == "Increse"
                                                                      ? const Color(0xff0EA102)
                                                                      : const Color(0XFFFB1212))),
                                                        ],
                                                      ),
                                                      Padding(
                                                        padding: const EdgeInsets.only(left: 5.0),
                                                        child: watchStatusList[index] == "Increse"
                                                            ? const Icon(
                                                                Icons.arrow_upward,
                                                                color: Color(0xff0EA102),
                                                                size: 15,
                                                              )
                                                            : const Icon(
                                                                Icons.arrow_downward,
                                                                color: Color(0XFFFB1212),
                                                                size: 15,
                                                              ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                Expanded(
                                                    child: Row(
                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                  children: [
                                                    watchNotifyList[index]
                                                        ? GestureDetector(
                                                            onTap: () async {
                                                              kToken = mainUserToken;
                                                              await notifyBottomSheetMain1(
                                                                  context: context,
                                                                  currentIndex: index,
                                                                  tickerId: watchTickerIdList[index],
                                                                  tickerName: watchTitleList[index],
                                                                  editValue: true,
                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                              setState(() {
                                                                watchNotifyAddedBoolListMain[index]
                                                                    ? watchNotifyList[index] = true
                                                                    : watchNotifyList[index] = false;
                                                                logEventFunc(
                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                        ? 'Set_Price_Alerts'
                                                                        : 'Removed_Price_Alerts',
                                                                    type: 'WatchList');
                                                              });
                                                            },
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                          )
                                                        : GestureDetector(
                                                            onTap: () async {
                                                              kToken = mainUserToken;
                                                              await notifyBottomSheetMain1(
                                                                  context: context,
                                                                  currentIndex: index,
                                                                  tickerId: watchTickerIdList[index],
                                                                  tickerName: watchTitleList[index],
                                                                  editValue: false,
                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                              setState(() {
                                                                watchNotifyAddedBoolListMain[index]
                                                                    ? watchNotifyList[index] = true
                                                                    : watchNotifyList[index] = false;
                                                                logEventFunc(
                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                        ? 'Set_Price_Alerts'
                                                                        : 'Removed_Price_Alerts',
                                                                    type: 'WatchList');
                                                              });
                                                            },
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                          ),
                                                    SizedBox(width: width / 16.5),
                                                    GestureDetector(
                                                      onTap: () async {
                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                        await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                        getWatchValues();
                                                      },
                                                      child: SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ),
                                                  ],
                                                ))
                                              ],
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        ),
                                      );
                                    }),
                              ),
                            ))
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class USATabListPage extends StatefulWidget {
  const USATabListPage({Key? key}) : super(key: key);

  @override
  State<USATabListPage> createState() => _USATabListPageState();
}

class _USATabListPageState extends State<USATabListPage> {
  int newInt = 0;
  bool loading = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';
  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 0;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    await getLiveStatus();
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  getLiveStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionHome + liveCheck;
    var response = await dioMain.post(url,
        //options:Options( headers: {'Authorization': mainUserToken}),
        data: {"category": "stocks", "type": "US"});
    var responseData = response.data;
    if (responseData["status"]) {
      streamController3.add(responseData["response"]);
    }
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {
      "category_id": mainCatIdList[0],
      "exchange_id": mainExchangeIdList[0],
      "ticker_id": tickerId,
      "min_value": minValue,
      "max_value": maxvalue
    };
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "stocks",
        "category_id": mainCatIdList[0],
        "exchange_id": mainExchangeIdList[0],
        "skip": newInt,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading = true;
      });
    } else {
      setState(() {
        loading = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 0,
                                      excIndex: 0,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 25),
                              child: SmartRefresher(
                                controller: _refreshController,
                                enablePullDown: false,
                                enablePullUp: true,
                                footer: CustomFooter(
                                  builder: (BuildContext context, LoadStatus? mode) {
                                    Widget body;
                                    if (mode == LoadStatus.idle) {
                                      body = const Text("pull up to load");
                                    } else if (mode == LoadStatus.loading) {
                                      body = const CupertinoActivityIndicator();
                                    } else if (mode == LoadStatus.failed) {
                                      body = const Text("Load Failed!Click retry!");
                                    } else if (mode == LoadStatus.canLoading) {
                                      body = const Text("release to load more");
                                    } else {
                                      body = const Text("No more Data");
                                    }
                                    return SizedBox(
                                      height: height / 14.76,
                                      child: Center(child: body),
                                    );
                                  },
                                ),
                                onLoading: _onGetWatchLoading,
                                child: ListView.builder(
                                    shrinkWrap: true,
                                    itemCount: watchTitleList.length,
                                    itemBuilder: (BuildContext context, int index) {
                                      if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                        return Column(
                                          children: [
                                            Container(
                                                height: height / 9.10,
                                                margin: const EdgeInsets.symmetric(horizontal: 15),
                                                child: AdWidget(ad: nativeAdList[index])),
                                            SizedBox(height: height / 57.73),
                                            Container(
                                              margin: const EdgeInsets.symmetric(vertical: 10),
                                              child: Column(
                                                children: [
                                                  index == 0
                                                      ? SizedBox(
                                                          height: height / 50.75,
                                                        )
                                                      : const SizedBox(),
                                                  Row(
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchTickerIdList[index],
                                                              exchange: 'US',
                                                              country: "USA",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'watch',
                                                            );
                                                          }));
                                                          /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                        },
                                                        onDoubleTap: () async {
                                                          // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                          // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                          Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                            return TickersDetailsPage(
                                                              category: 'stocks',
                                                              id: watchTickerIdList[index],
                                                              exchange: 'US',
                                                              country: "USA",
                                                              name: watchTitleList[index],
                                                              fromWhere: 'watch',
                                                            );
                                                          }));
                                                          /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                        },
                                                        child: Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: width / 4,
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            Column(
                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                              children: [
                                                                Text(
                                                                  "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                                Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w400,
                                                                        fontSize: text.scale(12),
                                                                        color: watchStatusList[index] == "Increse"
                                                                            ? const Color(0xff0EA102)
                                                                            : const Color(0XFFFB1212))),
                                                              ],
                                                            ),
                                                            Padding(
                                                              padding: const EdgeInsets.only(left: 5.0),
                                                              child: watchStatusList[index] == "Increse"
                                                                  ? const Icon(
                                                                      Icons.arrow_upward,
                                                                      color: Color(0xff0EA102),
                                                                      size: 15,
                                                                    )
                                                                  : const Icon(
                                                                      Icons.arrow_downward,
                                                                      color: Color(0XFFFB1212),
                                                                      size: 15,
                                                                    ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      Expanded(
                                                          child: Row(
                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                        children: [
                                                          watchNotifyList[index]
                                                              ? GestureDetector(
                                                                  onTap: () async {
                                                                    kToken = mainUserToken;
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchTickerIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: true,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  },
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                                )
                                                              : GestureDetector(
                                                                  onTap: () async {
                                                                    kToken = mainUserToken;
                                                                    await notifyBottomSheetMain1(
                                                                        context: context,
                                                                        currentIndex: index,
                                                                        tickerId: watchTickerIdList[index],
                                                                        tickerName: watchTitleList[index],
                                                                        editValue: false,
                                                                        closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                    setState(() {
                                                                      watchNotifyAddedBoolListMain[index]
                                                                          ? watchNotifyList[index] = true
                                                                          : watchNotifyList[index] = false;
                                                                      logEventFunc(
                                                                          name: watchNotifyAddedBoolListMain[index]
                                                                              ? 'Set_Price_Alerts'
                                                                              : 'Removed_Price_Alerts',
                                                                          type: 'WatchList');
                                                                    });
                                                                  },
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                                ),
                                                          SizedBox(width: width / 16.5),
                                                          GestureDetector(
                                                            onTap: () async {
                                                              logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                              await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                              getWatchValues();
                                                            },
                                                            child: SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ),
                                                        ],
                                                      ))
                                                    ],
                                                  ),
                                                  Divider(
                                                    color: Theme.of(context).colorScheme.tertiary,
                                                    thickness: 0.8,
                                                  )
                                                ],
                                              ),
                                            )
                                          ],
                                        );
                                      }
                                      return Container(
                                        margin: const EdgeInsets.symmetric(vertical: 10),
                                        child: Column(
                                          children: [
                                            index == 0
                                                ? SizedBox(
                                                    height: height / 50.75,
                                                  )
                                                : const SizedBox(),
                                            Row(
                                              children: [
                                                InkWell(
                                                  onTap: () async {
                                                    // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                    // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                    Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                      return TickersDetailsPage(
                                                        category: 'stocks',
                                                        id: watchTickerIdList[index],
                                                        exchange: 'US',
                                                        country: "USA",
                                                        name: watchTitleList[index],
                                                        fromWhere: 'watch',
                                                      );
                                                    }));
                                                    /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                  },
                                                  onDoubleTap: () async {
                                                    // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                    // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                    Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                      return TickersDetailsPage(
                                                        category: 'stocks',
                                                        id: watchTickerIdList[index],
                                                        exchange: 'US',
                                                        country: "USA",
                                                        name: watchTitleList[index],
                                                        fromWhere: 'watch',
                                                      );
                                                    }));
                                                    /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'stocks');
                                      detailedShowSheet(context: context,indusValue: true);*/
                                                  },
                                                  child: Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                SizedBox(
                                                  width: width / 4,
                                                  child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      Column(
                                                        crossAxisAlignment: CrossAxisAlignment.end,
                                                        children: [
                                                          Text(
                                                            "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                            /*style: TextStyle(
                                                                  fontWeight: FontWeight.w700,
                                                                  fontSize: text.scale(12),
                                                                  color: const Color(0xff000000))*/
                                                            style: Theme.of(context).textTheme.labelLarge,
                                                          ),
                                                          Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                              style: TextStyle(
                                                                  fontWeight: FontWeight.w400,
                                                                  fontSize: text.scale(12),
                                                                  color: watchStatusList[index] == "Increse"
                                                                      ? const Color(0xff0EA102)
                                                                      : const Color(0XFFFB1212))),
                                                        ],
                                                      ),
                                                      Padding(
                                                        padding: const EdgeInsets.only(left: 5.0),
                                                        child: watchStatusList[index] == "Increse"
                                                            ? const Icon(
                                                                Icons.arrow_upward,
                                                                color: Color(0xff0EA102),
                                                                size: 15,
                                                              )
                                                            : const Icon(
                                                                Icons.arrow_downward,
                                                                color: Color(0XFFFB1212),
                                                                size: 15,
                                                              ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                Expanded(
                                                    child: Row(
                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                  children: [
                                                    watchNotifyList[index]
                                                        ? GestureDetector(
                                                            onTap: () async {
                                                              kToken = mainUserToken;
                                                              await notifyBottomSheetMain1(
                                                                  context: context,
                                                                  currentIndex: index,
                                                                  tickerId: watchTickerIdList[index],
                                                                  tickerName: watchTitleList[index],
                                                                  editValue: true,
                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                              setState(() {
                                                                watchNotifyAddedBoolListMain[index]
                                                                    ? watchNotifyList[index] = true
                                                                    : watchNotifyList[index] = false;
                                                                logEventFunc(
                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                        ? 'Set_Price_Alerts'
                                                                        : 'Removed_Price_Alerts',
                                                                    type: 'WatchList');
                                                              });
                                                            },
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                          )
                                                        : GestureDetector(
                                                            onTap: () async {
                                                              kToken = mainUserToken;
                                                              await notifyBottomSheetMain1(
                                                                  context: context,
                                                                  currentIndex: index,
                                                                  tickerId: watchTickerIdList[index],
                                                                  tickerName: watchTitleList[index],
                                                                  editValue: false,
                                                                  closeValue: watchCloseList[index].toStringAsFixed(2));
                                                              setState(() {
                                                                watchNotifyAddedBoolListMain[index]
                                                                    ? watchNotifyList[index] = true
                                                                    : watchNotifyList[index] = false;
                                                                logEventFunc(
                                                                    name: watchNotifyAddedBoolListMain[index]
                                                                        ? 'Set_Price_Alerts'
                                                                        : 'Removed_Price_Alerts',
                                                                    type: 'WatchList');
                                                              });
                                                            },
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                          ),
                                                    SizedBox(width: width / 16.5),
                                                    GestureDetector(
                                                      onTap: () async {
                                                        logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                        await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                        getWatchValues();
                                                      },
                                                      child: SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ),
                                                  ],
                                                ))
                                              ],
                                            ),
                                            Divider(
                                              color: Theme.of(context).colorScheme.tertiary,
                                              thickness: 0.8,
                                            )
                                          ],
                                        ),
                                      );
                                    }),
                              ),
                            ))
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class CryptoWatchTabListPage extends StatefulWidget {
  const CryptoWatchTabListPage({Key? key}) : super(key: key);

  @override
  State<CryptoWatchTabListPage> createState() => _CryptoWatchTabListPageState();
}

class _CryptoWatchTabListPageState extends State<CryptoWatchTabListPage> {
  int newInt = 0;
  bool loading3 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';

  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 3;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading3 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    streamController3.add(true);
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;

    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[1], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;

    if (selectedWatchListIndex == 1) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": 0,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading3 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading3 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "crypto",
        "category_id": mainCatIdList[1],
        "skip": newInt,
        "search": _searchController.text,
      };
    }

    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading3 = true;
      });
    } else {
      setState(() {
        loading3 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({required int currentIndex, required String tickerId, required String tickerName, required String text}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            height: height / 34.80,
                            width: width / 16.07,
                            margin: const EdgeInsets.only(right: 25),
                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/dollar_image.svg",
                              fit: BoxFit.fill,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\$)',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\$)',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 1,
                                      excIndex: 1,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(15)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              SizedBox(height: height / 50.75),
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading3 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading3
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                    margin: EdgeInsets.symmetric(horizontal: width / 25),
                                    height: height / 1.75,
                                    child: ListView.builder(
                                        shrinkWrap: true,
                                        itemCount: watchTitleList.length,
                                        itemBuilder: (BuildContext context, int index) {
                                          if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                            return Column(
                                              children: [
                                                Container(
                                                    height: height / 9.10,
                                                    margin: const EdgeInsets.symmetric(horizontal: 15),
                                                    child: AdWidget(ad: nativeAdList[index])),
                                                SizedBox(height: height / 57.73),
                                                Container(
                                                  margin: const EdgeInsets.symmetric(vertical: 10),
                                                  child: Column(
                                                    children: [
                                                      Row(
                                                        children: [
                                                          Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                          SizedBox(
                                                            width: width / 4,
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                              children: [
                                                                Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.end,
                                                                  children: [
                                                                    Text(
                                                                      "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w700,
                                                                            fontSize: text.scale(12),
                                                                            color: const Color(0xff000000))*/
                                                                      style: Theme.of(context).textTheme.labelLarge,
                                                                    ),
                                                                    Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                        style: TextStyle(
                                                                            fontWeight: FontWeight.w400,
                                                                            fontSize: text.scale(12),
                                                                            color: watchStatusList[index] == "Increse"
                                                                                ? const Color(0xff0EA102)
                                                                                : const Color(0XFFFB1212))),
                                                                  ],
                                                                ),
                                                                Padding(
                                                                  padding: const EdgeInsets.only(left: 5.0),
                                                                  child: watchStatusList[index] == "Increse"
                                                                      ? const Icon(
                                                                          Icons.arrow_upward,
                                                                          color: Color(0xff0EA102),
                                                                          size: 15,
                                                                        )
                                                                      : const Icon(
                                                                          Icons.arrow_downward,
                                                                          color: Color(0XFFFB1212),
                                                                          size: 15,
                                                                        ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          Expanded(
                                                              child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              watchNotifyList[index]
                                                                  ? SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    )
                                                                  : SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                              SizedBox(width: width / 16.5),
                                                              SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ],
                                                          ))
                                                        ],
                                                      ),
                                                      Divider(
                                                        color: Theme.of(context).colorScheme.tertiary,
                                                        thickness: 0.8,
                                                      )
                                                    ],
                                                  ),
                                                )
                                              ],
                                            );
                                          }
                                          return Container(
                                            margin: const EdgeInsets.symmetric(vertical: 10),
                                            child: Column(
                                              children: [
                                                Row(
                                                  children: [
                                                    Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                    SizedBox(
                                                      width: width / 4,
                                                      child: Row(
                                                        mainAxisAlignment: MainAxisAlignment.end,
                                                        children: [
                                                          Column(
                                                            crossAxisAlignment: CrossAxisAlignment.end,
                                                            children: [
                                                              Text(
                                                                "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w700,
                                                                      fontSize: text.scale(12),
                                                                      color: const Color(0xff000000))*/
                                                                style: Theme.of(context).textTheme.labelLarge,
                                                              ),
                                                              Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                  style: TextStyle(
                                                                      fontWeight: FontWeight.w400,
                                                                      fontSize: text.scale(12),
                                                                      color: watchStatusList[index] == "Increse"
                                                                          ? const Color(0xff0EA102)
                                                                          : const Color(0XFFFB1212))),
                                                            ],
                                                          ),
                                                          Padding(
                                                            padding: const EdgeInsets.only(left: 5.0),
                                                            child: watchStatusList[index] == "Increse"
                                                                ? const Icon(
                                                                    Icons.arrow_upward,
                                                                    color: Color(0xff0EA102),
                                                                    size: 15,
                                                                  )
                                                                : const Icon(
                                                                    Icons.arrow_downward,
                                                                    color: Color(0XFFFB1212),
                                                                    size: 15,
                                                                  ),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                    Expanded(
                                                        child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        watchNotifyList[index]
                                                            ? SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              )
                                                            : SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                        SizedBox(width: width / 16.5),
                                                        SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ],
                                                    ))
                                                  ],
                                                ),
                                                Divider(
                                                  color: Theme.of(context).colorScheme.tertiary,
                                                  thickness: 0.8,
                                                )
                                              ],
                                            ),
                                          );
                                        })),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading3 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading3 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(
                                  horizontal: width / 25,
                                ),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'crypto',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'USA',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'crypto');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'crypto',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'USA',
                                                                country: "USA",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'crypto');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'crypto',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'USA',
                                                          country: "USA",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'crypto');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'crypto',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'USA',
                                                          country: "USA",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'crypto');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class CommodityWatchTabListPage extends StatefulWidget {
  final int countryIndex;

  const CommodityWatchTabListPage({Key? key, required this.countryIndex}) : super(key: key);

  @override
  State<CommodityWatchTabListPage> createState() => _CommodityWatchTabListPageState();
}

class _CommodityWatchTabListPageState extends State<CommodityWatchTabListPage> with TickerProviderStateMixin, WidgetsBindingObserver {
  TabController? _tabController;

  @override
  void initState() {
    _tabController = TabController(vsync: this, length: 2, initialIndex: widget.countryIndex);
    super.initState();
  }

  @override
  void dispose() {
    _tabController!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    return DefaultTabController(
      length: 2,
      child: Column(
        children: [
          Padding(
            padding: EdgeInsets.symmetric(vertical: height / 50.75),
            child: TabBar(
                isScrollable: false,
                indicatorWeight: 2,
                controller: _tabController,
                labelPadding: EdgeInsets.zero,
                indicatorSize: TabBarIndicatorSize.label,
                dividerColor: Colors.transparent,
                dividerHeight: 0.0,
                indicatorColor: const Color(0XFF0EA102),
                splashFactory: NoSplash.splashFactory,
                onTap: (int newIndex) async {},
                tabs: [
                  Text("India", style: Theme.of(context).textTheme.bodyMedium
                      /* style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: text.scale(14),
                      color: const Color(0xff000000),
                    ),*/
                      ),
                  Text("USA", style: Theme.of(context).textTheme.bodyMedium
                      /* style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: text.scale(14),
                      color: const Color(0xff000000),
                    ),*/
                      ),
                ]),
          ),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              physics: const ScrollPhysics(),
              children: const [
                IndiaTabListPage(),
                CommodityUSATabListPage(),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class IndiaTabListPage extends StatefulWidget {
  const IndiaTabListPage({Key? key}) : super(key: key);

  @override
  State<IndiaTabListPage> createState() => _IndiaTabListPageState();
}

class _IndiaTabListPageState extends State<IndiaTabListPage> {
  int newInt = 0;
  bool loading4 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';

  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<String> countryList = ["India", "USA"];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 4;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading4 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    streamController3.add(true);
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      // headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[2], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      watchNotifyAddedBoolListMain.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading4 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading4 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[0],
        "skip": newInt,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.clear();
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading4 = true;
      });
    } else {
      setState(() {
        loading4 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 2,
                                      excIndex: 1,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading4 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading4
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading4 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading4 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'commodity',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'India',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                            // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return TickersDetailsPage(
                                                                category: 'commodity',
                                                                id: watchTickerIdList[index],
                                                                exchange: 'India',
                                                                country: "India",
                                                                name: watchTitleList[index],
                                                                fromWhere: 'watch',
                                                              );
                                                            }));
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Row(
                                                                    children: [
                                                                      Text("\u{20B9}",
                                                                          style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              fontFamily: 'Robonto',
                                                                              color: const Color(0xff000000))),
                                                                      Text(
                                                                        watchCloseList[index].toStringAsFixed(2),
                                                                        /*style: TextStyle(
                                                                              fontWeight: FontWeight.w700,
                                                                              fontSize: text.scale(12),
                                                                              color: const Color(0xff000000))*/
                                                                        style: Theme.of(context).textTheme.labelLarge,
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'commodity',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'India',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      // mainVariables.selectedTickerId.value=watchTickerIdList[index];
                                                      // Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {return BusinessProfilePage();}));
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return TickersDetailsPage(
                                                          category: 'commodity',
                                                          id: watchTickerIdList[index],
                                                          exchange: 'India',
                                                          country: "India",
                                                          name: watchTitleList[index],
                                                          fromWhere: 'watch',
                                                        );
                                                      }));
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Row(
                                                              children: [
                                                                Text("\u{20B9}",
                                                                    style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        fontFamily: 'Robonto',
                                                                        color: const Color(0xff000000))),
                                                                Text(
                                                                  watchCloseList[index].toStringAsFixed(2),
                                                                  /*style: TextStyle(
                                                                        fontWeight: FontWeight.w700,
                                                                        fontSize: text.scale(12),
                                                                        color: const Color(0xff000000))*/
                                                                  style: Theme.of(context).textTheme.labelLarge,
                                                                ),
                                                              ],
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class CommodityUSATabListPage extends StatefulWidget {
  const CommodityUSATabListPage({Key? key}) : super(key: key);

  @override
  State<CommodityUSATabListPage> createState() => _CommodityUSATabListPageState();
}

class _CommodityUSATabListPageState extends State<CommodityUSATabListPage> {
  int newInt = 0;
  bool loading5 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';
  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<String> countryList = ["India", "USA"];
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 5;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading5 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    streamController3.add(true);
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[2], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading5 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading5 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "commodity",
        "category_id": mainCatIdList[2],
        'country': countryList[1],
        "skip": newInt,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading5 = true;
      });
    } else {
      setState(() {
        loading5 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({required int currentIndex, required String tickerId, required String tickerName, required String text}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                              height: height / 34.80,
                              width: width / 16.07,
                              margin: const EdgeInsets.only(right: 25),
                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15)),
                              child: Image.asset("lib/Constants/Assets/SMLogos/rupee.png")),
                        ],
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min(\u{20B9})',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max(\u{20B9})',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            //getWatchValues(newIndex: newIndex, excIndex: excIndex,countryIndex:countryIndex, text: text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 2,
                                      excIndex: 1,
                                      countryIndex: 1,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading5 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading5
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.9,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading5 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading5 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 25),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    index == 0
                                                        ? SizedBox(
                                                            height: height / 50.75,
                                                          )
                                                        : const SizedBox(),
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return const BusinessProfilePage();
                                                            }));
                                                            /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'commodity',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'USA',
                                                        country: "USA",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return const BusinessProfilePage();
                                                            }));
                                                            /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'commodity',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'USA',
                                                        country: "USA",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              index == 0
                                                  ? SizedBox(
                                                      height: height / 50.75,
                                                    )
                                                  : const SizedBox(),
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'commodity',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'USA',
                                                        country: "USA",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'commodity',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'USA',
                                                        country: "USA",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'commodity');
                                  detailedShowSheet(context: context,indusValue: true);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              "\$${watchCloseList[index].toStringAsFixed(2)}",
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}

class ForexWatchTabListPage extends StatefulWidget {
  const ForexWatchTabListPage({Key? key}) : super(key: key);

  @override
  State<ForexWatchTabListPage> createState() => _ForexWatchTabListPageState();
}

class _ForexWatchTabListPageState extends State<ForexWatchTabListPage> {
  int newInt = 0;
  bool loading6 = false;
  bool emptyList = false;
  final RefreshController _refreshController = RefreshController(initialRefresh: false);
  String mainUserToken = '';
  List mainExchangeIdList = [];
  List<String> watchIdList = [];
  List<String> watchTickerIdList = [];
  List<String> watchTitleList = [];
  List<String> watchSubTitleList = [];
  List<String> watchLogoList = [];
  List<double> watchCloseList = [];
  List<double> watchPercentageList = [];
  List<bool> watchNotifyList = [];
  List<String> watchStatusList = [];
  List<String> watchNotifyAddedIdList = [];
  List<bool> watchNotifyAddedBoolList = [];
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _minController = TextEditingController();
  final TextEditingController _maxController = TextEditingController();
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    currentMainIndex = 6;
    super.initState();
    getAllData();
  }

  @override
  void dispose() {
    for (int i = 0; i < nativeAdList.length; i++) {
      nativeAdList[i].dispose();
    }
    loading6 = false;
    super.dispose();
  }

  getAllData() async {
    await getEx();
    streamController3.add(true);
    mainSkipValue ? debugPrint("nothing") : await getWatchValues();
  }

  getEx() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = Uri.parse(baseurl + versionLocker + getExchanges);
    var response = await http.post(
      url,
      //headers: {'Authorization': mainUserToken},
    );
    var responseData = json.decode(response.body);
    if (responseData["status"]) {
      mainExchangeIdList.clear();
      if (mounted) {
        setState(() {
          for (int i = 0; i < responseData["response"].length; i++) {
            mainExchangeIdList.add(responseData["response"][i]["_id"]);
          }
        });
      }
    } else {}
  }

  removeWatchList({required String watchId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemove;
    var response =
        await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"watchlist_id": watchId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  addNotifyList({
    required String tickerId,
    required String minValue,
    required String maxvalue,
  }) async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListAddNotify;
    data = {"category_id": mainCatIdList[3], "ticker_id": tickerId, "min_value": minValue, "max_value": maxvalue};
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  removeNotifyList({required String notifyId, required String tickerId}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    var url = baseurl + versionWatch + watchListRemoveNotify;
    var response = await dioMain
        .post(url, options: Options(headers: {'Authorization': mainUserToken}), data: {"notification_id": notifyId, 'ticker_id': tickerId});
    var responseData = response.data;
    if (responseData["status"]) {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    } else {
      if (!mounted) {
        return;
      }
      Flushbar(
        message: responseData["message"],
        duration: const Duration(seconds: 2),
      ).show(context);
    }
  }

  getWatchValues() async {
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": 0,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      watchIdList.clear();
      watchTickerIdList.clear();
      watchTitleList.clear();
      watchSubTitleList.clear();
      watchLogoList.clear();
      watchCloseList.clear();
      watchPercentageList.clear();
      watchNotifyList.clear();
      watchStatusList.clear();
      watchNotifyAddedIdList.clear();
      watchNotifyAddedBoolList.clear();
      watchNotifyAddedBoolListMain.clear();
      nativeAdList.clear();
      nativeAdIsLoadedList.clear();
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading6 = true;
      });
    } else {
      setState(() {
        emptyList = false;
        loading6 = true;
      });
    }
  }

  void _onGetWatchLoading() async {
    setState(() {
      newInt = newInt + 20;
    });
    Map<String, dynamic> data = {};
    SharedPreferences prefs = await SharedPreferences.getInstance();
    mainUserToken = prefs.getString('newUserToken') ?? "";
    // var url = Uri.parse(baseurl + versionHome + tradeStocks);
    var url = baseurl + versionWatch + watchList;
    if (selectedWatchListIndex == 1) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 2) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "close", 'type': 'asc'}
      };
    } else if (selectedWatchListIndex == 3) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'dsc'}
      };
    } else if (selectedWatchListIndex == 4) {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": _searchController.text,
        'sort': {"name": "change_p", 'type': 'asc'}
      };
    } else {
      data = {
        "category": "forex",
        "category_id": mainCatIdList[3],
        "skip": newInt,
        "search": _searchController.text,
      };
    }
    var response = await dioMain.post(url, options: Options(headers: {'Authorization': mainUserToken}), data: data);
    var responseData = response.data;
    if (responseData["status"]) {
      setState(() {
        emptyList = true;
      });
      for (int i = 0; i < responseData["response"].length; i++) {
        nativeAdIsLoadedList.add(false);
        nativeAdList.add(NativeAd(
          adUnitId: adVariables.nativeAdUnitId,
          request: const AdRequest(),
          nativeTemplateStyle: NativeTemplateStyle(
            templateType: TemplateType.small,
            mainBackgroundColor: Theme.of(context).colorScheme.background,
          ),
          listener: NativeAdListener(
            onAdLoaded: (Ad ad) {
              debugPrint('$NativeAd loaded.');
              setState(() {
                nativeAdIsLoadedList[i] = true;
              });
            },
            onAdFailedToLoad: (Ad ad, LoadAdError error) {
              debugPrint('$NativeAd failedToLoad: $error');
              ad.dispose();
            },
            onAdOpened: (Ad ad) => debugPrint('$NativeAd onAdOpened.'),
            onAdClosed: (Ad ad) => debugPrint('$NativeAd onAdClosed.'),
          ),
        )..load());
        watchIdList.add(responseData["response"][i]["_id"]);
        watchTickerIdList.add(responseData["response"][i]["ticker_id"]);
        watchTitleList.add(responseData["response"][i]["name"]);
        watchSubTitleList.add(responseData["response"][i]["code"]);
        watchLogoList.add(responseData["response"][i]["logo_url"]);
        watchCloseList.add((responseData["response"][i]["close"]).toDouble());
        watchPercentageList.add((responseData["response"][i]["change_p"]).toDouble());
        watchNotifyList.add(responseData["response"][i]["notification"]);
        watchStatusList.add(responseData["response"][i]["state"]);
        watchNotifyAddedBoolList.add(false);
        watchNotifyAddedBoolListMain.add(false);
        if (responseData["response"][i]["watchnotification"].length != 0) {
          watchNotifyAddedIdList.add(responseData["response"][i]["watchnotification"][0]["_id"]);
        } else {
          watchNotifyAddedIdList.add("");
        }
      }
      setState(() {
        loading6 = true;
      });
    } else {
      setState(() {
        loading6 = true;
      });
    }
    if (mounted) setState(() {});
    _refreshController.loadComplete();
  }

  Future<dynamic> notifyBottomSheet({
    required int currentIndex,
    required String tickerId,
    required String tickerName,
    required String text,
  }) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            top: Radius.circular(30),
          ),
        ),
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(
            builder: (BuildContext context, StateSetter modelSetState) {
              return SingleChildScrollView(
                child: Container(
                  margin: const EdgeInsets.all(15.0),
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        height: height / 54.13,
                      ),
                      Center(
                        child: Text(
                          "Turn On Notification",
                          style: TextStyle(fontWeight: FontWeight.w700, color: const Color(0XFF000000), fontSize: text.scale(20)),
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.only(left: 10),
                        child: Text('You will be notified when the price of $tickerName will cross the threshold points the you will enter below.',
                            style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12))),
                      ),
                      SizedBox(height: height / 50.75),
                      SizedBox(height: height / 50.75),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _minController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Min',
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1),
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: height / 101.5),
                      SizedBox(
                        height: height / 14.5,
                        child: TextFormField(
                          style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                          controller: _maxController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            contentPadding: const EdgeInsets.only(left: 15),
                            focusedErrorBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            border: OutlineInputBorder(
                              borderSide: const BorderSide(color: Color(0xFFA5A5A5), width: 1.5),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            labelStyle: TextStyle(
                                color: const Color(0XFFA5A5A5), fontSize: text.scale(15), fontWeight: FontWeight.w400, fontFamily: "Robonto"),
                            labelText: 'Max',
                          ),
                        ),
                      ),
                      SizedBox(
                        height: height / 32.48,
                      ),
                      GestureDetector(
                        onTap: () async {
                          if (double.parse(_maxController.text) < double.parse(_minController.text)) {
                            Flushbar(
                              message: "Max value must greater than min value",
                              duration: const Duration(seconds: 2),
                            ).show(context);
                          } else {
                            if (!mounted) {
                              return;
                            }
                            Navigator.pop(context);
                            setState(() {
                              watchNotifyAddedBoolList[currentIndex] = true;
                            });
                            await addNotifyList(tickerId: tickerId, minValue: _minController.text, maxvalue: _maxController.text);
                            _minController.clear();
                            _maxController.clear();
                          }
                        },
                        child: Container(
                          decoration: const BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(20)),
                            color: Color(0XFF0EA102),
                          ),
                          width: width,
                          height: height / 14.5,
                          child: Center(
                            child: Text(
                              "Turn On",
                              style: TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: text.scale(16), fontFamily: "Poppins"),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        });
  }

  Column buildColumn({required BuildContext context}) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          height: height / 2.97,
          width: width / 1.34,
          child: SvgPicture.asset("lib/Constants/Assets/SMLogos/undraw.svg"),
        ),
        SizedBox(
          height: height / 33.83,
        ),
        Center(
          child: Text(
            "Your watchlist is empty",
            style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18)),
          ),
        ),
        Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RichText(
                text: TextSpan(
                    text: 'Add watchlist',
                    style: const TextStyle(fontWeight: FontWeight.w700, color: Color(0xff0EA102), decoration: TextDecoration.underline),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const AddWatchlistPage(
                                      newIndex: 3,
                                      excIndex: 1,
                                      countryIndex: 0,
                                    )));
                      }),
              ),
              Text(
                ' so you can monitor it.',
                style: TextStyle(fontWeight: FontWeight.w700, fontSize: text.scale(14)),
              )
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.height;
    double width = MediaQuery.of(context).size.width;
    TextScaler text = MediaQuery.of(context).textScaler;
    return mainSkipValue
        ? buildColumn(context: context)
        : Column(
            children: [
              SizedBox(height: height / 50.75),
              Container(
                margin: EdgeInsets.symmetric(horizontal: width / 25),
                height: height / 21.65,
                child: Row(
                  children: [
                    Expanded(
                      child: extraContainWatchList
                          ? TextFormField(
                              cursorColor: Colors.green,
                              readOnly: true,
                              enabled: true,
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon:
                                    _searchController.text.isNotEmpty ? const Icon(Icons.cancel, size: 22, color: Colors.black) : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            )
                          : TextFormField(
                              cursorColor: Colors.green,
                              onChanged: (value) async {
                                setState(() {
                                  loading6 = true;
                                });
                                await getWatchValues();
                              },
                              style: TextStyle(fontSize: text.scale(15), fontFamily: "Poppins"),
                              controller: _searchController,
                              keyboardType: TextInputType.emailAddress,
                              decoration: InputDecoration(
                                fillColor: Theme.of(context).colorScheme.tertiary,
                                filled: true,
                                contentPadding: const EdgeInsets.only(left: 15),
                                prefixIcon: Padding(
                                    padding: const EdgeInsets.all(10.0),
                                    child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                                suffixIcon: _searchController.text.isNotEmpty
                                    ? GestureDetector(
                                        onTap: () async {
                                          setState(() {
                                            _searchController.clear();
                                          });
                                          await getWatchValues();
                                          if (!mounted) {
                                            return;
                                          }
                                          FocusScope.of(context).unfocus();
                                        },
                                        child: const Icon(Icons.cancel, size: 22, color: Colors.black),
                                      )
                                    : const SizedBox(),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                hintStyle: TextStyle(
                                    color: const Color(0XFFA5A5A5), fontSize: text.scale(14), fontWeight: FontWeight.w500, fontFamily: "Poppins"),
                                hintText: 'Search here',
                                border: OutlineInputBorder(
                                  borderSide: const BorderSide(color: Colors.transparent /*Color(0xffD8D8D8)*/, width: 0.1 /*0.5*/),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                              ),
                            ),
                    ),
                    const SizedBox(width: 8),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          extraContainWatchList = !extraContainWatchList;
                        });
                      },
                      child: Row(
                        children: [
                          GestureDetector(
                            child: SvgPicture.asset(
                              "lib/Constants/Assets/SMLogos/Frame 162.svg",
                              height: height / 54.13,
                              width: width / 18.25,
                              colorFilter: ColorFilter.mode(Theme.of(context).colorScheme.onPrimary, BlendMode.srcIn),
                            ),
                          ),
                          const SizedBox(
                            width: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Sort",
                                  /*style: TextStyle(
                                  fontSize: text.scale(12),
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xff000000),
                                ),*/
                                  style: Theme.of(context).textTheme.labelLarge),
                              const SizedBox(width: 2),
                              Container(
                                height: 5,
                                width: 5,
                                decoration: const BoxDecoration(
                                  color: Color(0XFF0EA102),
                                  shape: BoxShape.circle,
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              loading6
                  ? emptyList
                      ? extraContainWatchList
                          ? Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(horizontal: width / 25),
                                  height: height / 1.75,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    Row(
                                                      children: [
                                                        Row(
                                                          children: [
                                                            SizedBox(
                                                              height: height / 33.83,
                                                              width: width / 15.625,
                                                              child: Image.network(
                                                                watchLogoList[index],
                                                                fit: BoxFit.fill,
                                                                errorBuilder: (context, _, stack) {
                                                                  return SvgPicture.network(watchLogoList[index]);
                                                                },
                                                              ),
                                                            ),
                                                            const SizedBox(width: 12),
                                                            SizedBox(
                                                              width: width / 3.4,
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  Text(
                                                                    watchTitleList[index],
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(14),
                                                                          color: const Color(0xff000000),
                                                                          overflow: TextOverflow.ellipsis)*/
                                                                    style: Theme.of(context).textTheme.bodyMedium,
                                                                    maxLines: 1,
                                                                  ),
                                                                  Text(
                                                                    watchSubTitleList[index],
                                                                    /*style: TextStyle(
                                                                        fontWeight: FontWeight.w500,
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0xffB0B0B0),
                                                                        overflow: TextOverflow.ellipsis),*/
                                                                    style: Theme.of(context).textTheme.bodySmall,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    watchCloseList[index].toStringAsFixed(2),
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/ringing_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  )
                                                                : SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/empty_bell_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                    height: height / 35.03,
                                                                    width: width / 16.30,
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            SizedBox(
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                                child: SvgPicture.asset(
                                                                  isDarkTheme.value
                                                                      ? "assets/home_screen/filled_star_dark.svg"
                                                                      : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                )),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              Row(
                                                children: [
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 33.83,
                                                        width: width / 15.625,
                                                        child: Image.network(
                                                          watchLogoList[index],
                                                          fit: BoxFit.fill,
                                                          errorBuilder: (context, _, stack) {
                                                            return SvgPicture.network(watchLogoList[index]);
                                                          },
                                                        ),
                                                      ),
                                                      const SizedBox(width: 12),
                                                      SizedBox(
                                                        width: width / 3.4,
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            Text(
                                                              watchTitleList[index],
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(14),
                                                                    color: const Color(0xff000000),
                                                                    overflow: TextOverflow.ellipsis)*/
                                                              style: Theme.of(context).textTheme.bodyMedium,
                                                              maxLines: 1,
                                                            ),
                                                            Text(
                                                              watchSubTitleList[index],
                                                              /*style: TextStyle(
                                                                  fontWeight: FontWeight.w500,
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xffB0B0B0),
                                                                  overflow: TextOverflow.ellipsis),*/
                                                              style: Theme.of(context).textTheme.bodySmall,
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              watchCloseList[index].toStringAsFixed(2),
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/ringing_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            )
                                                          : SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/empty_bell_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                              height: height / 35.03,
                                                              width: width / 16.30,
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      SizedBox(
                                                          height: height / 35.03,
                                                          width: width / 16.30,
                                                          child: SvgPicture.asset(
                                                            isDarkTheme.value
                                                                ? "assets/home_screen/filled_star_dark.svg"
                                                                : "lib/Constants/Assets/SMLogos/Star.svg",
                                                          )),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                                Positioned(
                                  right: 15,
                                  top: 15,
                                  child: Container(
                                    width: width * 0.5,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      color: Theme.of(context).colorScheme.tertiary,
                                    ),
                                    child: Column(
                                      children: [
                                        ExpansionTile(
                                          title: Text(
                                            "CloseValue",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 1,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 2,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        ExpansionTile(
                                          title: Text(
                                            "Change Percentage",
                                            style: TextStyle(
                                              fontSize: text.scale(10),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          children: [
                                            SizedBox(
                                              height: 35,
                                              child: RadioListTile(
                                                  value: 3,
                                                  groupValue: selectedWatchListIndex,
                                                  controlAffinity: ListTileControlAffinity.trailing,
                                                  title: Text(
                                                    "High to Low",
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      fontWeight: FontWeight.w500,
                                                    ),
                                                  ),
                                                  onChanged: (value) {
                                                    setState(() {
                                                      selectedWatchListIndex = int.parse(value!.toString());
                                                    });
                                                  }),
                                            ),
                                            RadioListTile(
                                                value: 4,
                                                groupValue: selectedWatchListIndex,
                                                controlAffinity: ListTileControlAffinity.trailing,
                                                title: Text(
                                                  "Low to High",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                onChanged: (value) {
                                                  setState(() {
                                                    selectedWatchListIndex = int.parse(value!.toString());
                                                  });
                                                })
                                          ],
                                        ),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            selectedWatchListIndex != 0
                                                ? InkWell(
                                                    onTap: () async {
                                                      setState(() {
                                                        loading6 = false;
                                                        extraContainWatchList = false;
                                                        selectedWatchListIndex = 0;
                                                      });
                                                      await getWatchValues();
                                                    },
                                                    child: Container(
                                                      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                      child: Text(
                                                        "Clear",
                                                        style: TextStyle(
                                                          fontSize: text.scale(10),
                                                          fontWeight: FontWeight.w500,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                : const SizedBox(),
                                            InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  loading6 = false;
                                                  extraContainWatchList = false;
                                                });
                                                await getWatchValues();
                                              },
                                              child: Container(
                                                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
                                                margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                                                decoration: BoxDecoration(
                                                  color: const Color(0XFF0EA102),
                                                  borderRadius: BorderRadius.circular(25),
                                                ),
                                                child: Text(
                                                  "Apply",
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: Colors.white,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            )
                          : Expanded(
                              child: Container(
                                margin: EdgeInsets.symmetric(
                                  horizontal: width / 25,
                                ),
                                child: SmartRefresher(
                                  controller: _refreshController,
                                  enablePullDown: false,
                                  enablePullUp: true,
                                  footer: CustomFooter(
                                    builder: (BuildContext context, LoadStatus? mode) {
                                      Widget body;
                                      if (mode == LoadStatus.idle) {
                                        body = const Text("pull up to load");
                                      } else if (mode == LoadStatus.loading) {
                                        body = const CupertinoActivityIndicator();
                                      } else if (mode == LoadStatus.failed) {
                                        body = const Text("Load Failed!Click retry!");
                                      } else if (mode == LoadStatus.canLoading) {
                                        body = const Text("release to load more");
                                      } else {
                                        body = const Text("No more Data");
                                      }
                                      return SizedBox(
                                        height: height / 14.76,
                                        child: Center(child: body),
                                      );
                                    },
                                  ),
                                  onLoading: _onGetWatchLoading,
                                  child: ListView.builder(
                                      shrinkWrap: true,
                                      itemCount: watchTitleList.length,
                                      itemBuilder: (BuildContext context, int index) {
                                        if (index % 5 == 4 && nativeAdIsLoadedList[index]) {
                                          return Column(
                                            children: [
                                              Container(
                                                  height: height / 9.10,
                                                  margin: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: AdWidget(ad: nativeAdList[index])),
                                              SizedBox(height: height / 57.73),
                                              Container(
                                                margin: const EdgeInsets.symmetric(vertical: 10),
                                                child: Column(
                                                  children: [
                                                    Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return const BusinessProfilePage();
                                                            }));
                                                            /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'forex',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'India',
                                                        country: "India",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'forex');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                          },
                                                          onDoubleTap: () async {
                                                            mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return const BusinessProfilePage();
                                                            }));
                                                            /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'forex',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'India',
                                                        country: "India",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                            /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'forex');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                          },
                                                          child: Row(
                                                            children: [
                                                              SizedBox(
                                                                height: height / 33.83,
                                                                width: width / 15.625,
                                                                child: Image.network(
                                                                  watchLogoList[index],
                                                                  fit: BoxFit.fill,
                                                                  errorBuilder: (context, _, stack) {
                                                                    return SvgPicture.network(watchLogoList[index]);
                                                                  },
                                                                ),
                                                              ),
                                                              const SizedBox(width: 12),
                                                              SizedBox(
                                                                width: width / 3.4,
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [
                                                                    Text(
                                                                      watchTitleList[index],
                                                                      /*style: TextStyle(
                                                                            fontWeight: FontWeight.w500,
                                                                            fontSize: text.scale(14),
                                                                            color: const Color(0xff000000),
                                                                            overflow: TextOverflow.ellipsis)*/
                                                                      style: Theme.of(context).textTheme.bodyMedium,
                                                                      maxLines: 1,
                                                                    ),
                                                                    Text(
                                                                      watchSubTitleList[index],
                                                                      /*style: TextStyle(
                                                                          fontWeight: FontWeight.w500,
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0xffB0B0B0),
                                                                          overflow: TextOverflow.ellipsis),*/
                                                                      style: Theme.of(context).textTheme.bodySmall,
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(
                                                          width: width / 4,
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                              Column(
                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                children: [
                                                                  Text(
                                                                    watchCloseList[index].toStringAsFixed(2),
                                                                    /*style: TextStyle(
                                                                          fontWeight: FontWeight.w700,
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0xff000000))*/
                                                                    style: Theme.of(context).textTheme.labelLarge,
                                                                  ),
                                                                  Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                      style: TextStyle(
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: text.scale(12),
                                                                          color: watchStatusList[index] == "Increse"
                                                                              ? const Color(0xff0EA102)
                                                                              : const Color(0XFFFB1212))),
                                                                ],
                                                              ),
                                                              Padding(
                                                                padding: const EdgeInsets.only(left: 5.0),
                                                                child: watchStatusList[index] == "Increse"
                                                                    ? const Icon(
                                                                        Icons.arrow_upward,
                                                                        color: Color(0xff0EA102),
                                                                        size: 15,
                                                                      )
                                                                    : const Icon(
                                                                        Icons.arrow_downward,
                                                                        color: Color(0XFFFB1212),
                                                                        size: 15,
                                                                      ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        Expanded(
                                                            child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                          children: [
                                                            watchNotifyList[index]
                                                                ? GestureDetector(
                                                                    onTap: () async {
                                                                      /*setState(() {
                                            watchNotifyList[index] = !watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                          await removeNotifyList(notifyId: watchNotifyAddedIdList[index],tickerId:watchTickerIdList[index]);*/
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: true,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/ringing_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  )
                                                                : GestureDetector(
                                                                    onTap: () async {
                                                                      kToken = mainUserToken;
                                                                      await notifyBottomSheetMain1(
                                                                          context: context,
                                                                          currentIndex: index,
                                                                          tickerId: watchTickerIdList[index],
                                                                          tickerName: watchTitleList[index],
                                                                          editValue: false,
                                                                          closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                      setState(() {
                                                                        watchNotifyAddedBoolListMain[index]
                                                                            ? watchNotifyList[index] = true
                                                                            : watchNotifyList[index] = false;
                                                                        logEventFunc(
                                                                            name: watchNotifyAddedBoolListMain[index]
                                                                                ? 'Set_Price_Alerts'
                                                                                : 'Removed_Price_Alerts',
                                                                            type: 'WatchList');
                                                                      });
                                                                    },
                                                                    child: SvgPicture.asset(
                                                                      isDarkTheme.value
                                                                          ? "assets/home_screen/empty_bell_dark.svg"
                                                                          : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                      height: height / 35.03,
                                                                      width: width / 16.30,
                                                                    ),
                                                                  ),
                                                            SizedBox(width: width / 16.5),
                                                            GestureDetector(
                                                              onTap: () async {
                                                                logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                                await removeWatchList(
                                                                    watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                                getWatchValues();
                                                              },
                                                              child: SizedBox(
                                                                  height: height / 35.03,
                                                                  width: width / 16.30,
                                                                  child: SvgPicture.asset(
                                                                    isDarkTheme.value
                                                                        ? "assets/home_screen/filled_star_dark.svg"
                                                                        : "lib/Constants/Assets/SMLogos/Star.svg",
                                                                  )),
                                                            ),
                                                          ],
                                                        ))
                                                      ],
                                                    ),
                                                    Divider(
                                                      color: Theme.of(context).colorScheme.tertiary,
                                                      thickness: 0.8,
                                                    )
                                                  ],
                                                ),
                                              )
                                            ],
                                          );
                                        }
                                        return Container(
                                          margin: const EdgeInsets.symmetric(vertical: 10),
                                          child: Column(
                                            children: [
                                              Row(
                                                children: [
                                                  InkWell(
                                                    onTap: () async {
                                                      mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'forex',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'India',
                                                        country: "India",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'forex');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                    },
                                                    onDoubleTap: () async {
                                                      mainVariables.selectedTickerId.value = watchTickerIdList[index];
                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return const BusinessProfilePage();
                                                      }));
                                                      /*Navigator.push(context,
                                                      MaterialPageRoute(builder:
                                                          (BuildContext
                                                              context) {
                                                    return TickersDetailsPage(
                                                        category: 'forex',
                                                        id: watchTickerIdList[
                                                            index],
                                                        exchange: 'India',
                                                        country: "India",
                                                        name: watchTitleList[
                                                            index],fromWhere: 'watch',);
                                                  }));*/
                                                      /*await detailTickersFunc(tickerId: watchTickerIdList[index],category: 'forex');
                                  detailedShowSheet(context: context,indusValue: false);*/
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 33.83,
                                                          width: width / 15.625,
                                                          child: Image.network(
                                                            watchLogoList[index],
                                                            fit: BoxFit.fill,
                                                            errorBuilder: (context, _, stack) {
                                                              return SvgPicture.network(watchLogoList[index]);
                                                            },
                                                          ),
                                                        ),
                                                        const SizedBox(width: 12),
                                                        SizedBox(
                                                          width: width / 3.4,
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              Text(
                                                                watchTitleList[index],
                                                                /*style: TextStyle(
                                                                      fontWeight: FontWeight.w500,
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0xff000000),
                                                                      overflow: TextOverflow.ellipsis)*/
                                                                style: Theme.of(context).textTheme.bodyMedium,
                                                                maxLines: 1,
                                                              ),
                                                              Text(
                                                                watchSubTitleList[index],
                                                                /*  style: TextStyle(
                                                                    fontWeight: FontWeight.w500,
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xffB0B0B0),
                                                                    overflow: TextOverflow.ellipsis),*/
                                                                style: Theme.of(context).textTheme.bodySmall,
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(
                                                    width: width / 4,
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: [
                                                        Column(
                                                          crossAxisAlignment: CrossAxisAlignment.end,
                                                          children: [
                                                            Text(
                                                              watchCloseList[index].toStringAsFixed(2),
                                                              style: Theme.of(context).textTheme.labelLarge,
                                                              /*style: TextStyle(
                                                                    fontWeight: FontWeight.w700,
                                                                    fontSize: text.scale(12),
                                                                    color: const Color(0xff000000))*/
                                                            ),
                                                            Text("${watchPercentageList[index].toStringAsFixed(2)}%",
                                                                style: TextStyle(
                                                                    fontWeight: FontWeight.w400,
                                                                    fontSize: text.scale(12),
                                                                    color: watchStatusList[index] == "Increse"
                                                                        ? const Color(0xff0EA102)
                                                                        : const Color(0XFFFB1212))),
                                                          ],
                                                        ),
                                                        Padding(
                                                          padding: const EdgeInsets.only(left: 5.0),
                                                          child: watchStatusList[index] == "Increse"
                                                              ? const Icon(
                                                                  Icons.arrow_upward,
                                                                  color: Color(0xff0EA102),
                                                                  size: 15,
                                                                )
                                                              : const Icon(
                                                                  Icons.arrow_downward,
                                                                  color: Color(0XFFFB1212),
                                                                  size: 15,
                                                                ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Expanded(
                                                      child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.end,
                                                    children: [
                                                      watchNotifyList[index]
                                                          ? GestureDetector(
                                                              onTap: () async {
                                                                /*setState(() {
                                            watchNotifyList[index] = !watchNotifyList[index];
                                            watchNotifyAddedBoolList[index]=false;
                                          });
                                          await removeNotifyList(notifyId: watchNotifyAddedIdList[index],tickerId:watchTickerIdList[index]);*/
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: true,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/ringing_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/ringing3.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            )
                                                          : GestureDetector(
                                                              onTap: () async {
                                                                kToken = mainUserToken;
                                                                await notifyBottomSheetMain1(
                                                                    context: context,
                                                                    currentIndex: index,
                                                                    tickerId: watchTickerIdList[index],
                                                                    tickerName: watchTitleList[index],
                                                                    editValue: false,
                                                                    closeValue: watchCloseList[index].toStringAsFixed(2));
                                                                setState(() {
                                                                  watchNotifyAddedBoolListMain[index]
                                                                      ? watchNotifyList[index] = true
                                                                      : watchNotifyList[index] = false;
                                                                  logEventFunc(
                                                                      name: watchNotifyAddedBoolListMain[index]
                                                                          ? 'Set_Price_Alerts'
                                                                          : 'Removed_Price_Alerts',
                                                                      type: 'WatchList');
                                                                });
                                                              },
                                                              child: SvgPicture.asset(
                                                                isDarkTheme.value
                                                                    ? "assets/home_screen/empty_bell_dark.svg"
                                                                    : "lib/Constants/Assets/SMLogos/emptyBell.svg",
                                                                height: height / 35.03,
                                                                width: width / 16.30,
                                                              ),
                                                            ),
                                                      SizedBox(width: width / 16.5),
                                                      GestureDetector(
                                                        onTap: () async {
                                                          logEventFunc(name: 'Removed_Watchlist', type: 'WatchList');
                                                          await removeWatchList(watchId: watchIdList[index], tickerId: watchTickerIdList[index]);
                                                          getWatchValues();
                                                        },
                                                        child: SizedBox(
                                                            height: height / 35.03,
                                                            width: width / 16.30,
                                                            child: SvgPicture.asset(
                                                              isDarkTheme.value
                                                                  ? "assets/home_screen/filled_star_dark.svg"
                                                                  : "lib/Constants/Assets/SMLogos/Star.svg",
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                                ],
                                              ),
                                              Divider(
                                                color: Theme.of(context).colorScheme.tertiary,
                                                thickness: 0.8,
                                              )
                                            ],
                                          ),
                                        );
                                      }),
                                ),
                              ),
                            )
                      : _searchController.text.isEmpty
                          ? buildColumn(context: context)
                          : const Padding(
                              padding: EdgeInsets.only(top: 50.0),
                              child: Center(child: Text("No search results found")),
                            )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100),
                    ),
              const SizedBox(
                height: 10,
              )
            ],
          );
  }
}
