import 'dart:convert';

import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/svg.dart';
import 'package:get/get.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:http/http.dart' as http;
import 'package:lottie/lottie.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tradewatchfinal/Constants/API/api.dart';
import 'package:tradewatchfinal/Screens/Module1/NewsPage/Demo/demo_view.dart';
import 'package:tradewatchfinal/Screens/Module1/NewsPage/news_main_page.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/EditProfilePage/edit_profile_page.dart';
import 'package:tradewatchfinal/Screens/Module1/Settings/Theme/theme_page.dart';
import 'package:tradewatchfinal/Screens/Module1/VideosPage/videos_main_page.dart';
import 'package:tradewatchfinal/Screens/Module1/VideosPage/you_tube_player_landscape_screen.dart';
import 'package:tradewatchfinal/Screens/Module1/bottom_navigation.dart';
import 'package:tradewatchfinal/Screens/Module2/FeatureRequest/feature_request_page.dart';
import 'package:tradewatchfinal/Screens/Module2/Forum/detailed_forum_image_page.dart';
import 'package:tradewatchfinal/Screens/Module2/Forum/forum_post_description_page.dart';
import 'package:tradewatchfinal/Screens/Module2/Survey/analytics_page.dart';
import 'package:tradewatchfinal/Screens/Module2/Survey/detailed_survey_image_page.dart';
import 'package:tradewatchfinal/Screens/Module2/Survey/questionnaire_page.dart';
import 'package:tradewatchfinal/Screens/Module3/BookMarks/BookMarkWidget/DoubleOne/book_mark_widget_bloc.dart';
import 'package:tradewatchfinal/Screens/Module5/Charts/FinalChartPage/final_chart_page.dart';
import 'package:tradewatchfinal/Screens/Module5/super_charts_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/Blog/blog_description_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/BusinessProfile/profile_filter_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/Bytes/bytes_description_page.dart';
import 'package:tradewatchfinal/Screens/Module6/BillBoardScreens/UserProfile/user_bill_board_profile_page.dart';
import 'package:tradewatchfinal/Screens/Module6/WidgetsBloc/LikeButtonList/like_button_list_widget_bloc.dart';
import 'package:tradewatchfinal/Screens/Module6/WidgetsBloc/MultipleLikeButton/multiple_like_button_bloc.dart';
import 'package:tradewatchfinal/Screens/Module6/WidgetsBloc/ResponseField/response_field_widget_bloc.dart';
import 'package:tradewatchfinal/Screens/Module6/WidgetsBloc/TranslationWidget/bill_board_translation_bloc.dart';
import 'package:tradewatchfinal/Screens/Module7/ConversationModels/conversation_models.dart';
import 'package:tradewatchfinal/Screens/Module7/ConversationScreens/conversation_page.dart';

class BusinessProfilePage extends StatefulWidget {
  final String? fromLink;

  const BusinessProfilePage({Key? key, this.fromLink}) : super(key: key);

  @override
  State<BusinessProfilePage> createState() => _BusinessProfilePageState();
}

class _BusinessProfilePageState extends State<BusinessProfilePage> with TickerProviderStateMixin {
  bool loader = false;
  RxString firstHalf = "".obs;
  RxString secondHalf = "".obs;
  RxBool flag = true.obs;
  RxString aboutMeText = "".obs;
  TabController? _tabController;
  bool isDollar = true;
  int believersCount = 0;
  BannerAd? _bannerAd;
  bool _bannerAdIsLoaded = false;

  @override
  void initState() {
    getAllDataMain(name: 'Business_profile_page');
    getData();
    super.initState();
  }

  @override
  Future<void> didChangeDependencies() async {
    super.didChangeDependencies();
    // Create the ad objects and load ads.
    _bannerAd = BannerAd(
        size: AdSize.banner,
        adUnitId: adVariables.bannerAdUnitId,
        listener: BannerAdListener(
          onAdLoaded: (Ad ad) {
            setState(() {
              _bannerAdIsLoaded = true;
            });
          },
          onAdFailedToLoad: (Ad ad, LoadAdError error) {
            ad.dispose();
          },
          onAdOpened: (Ad ad) {},
          onAdClosed: (Ad ad) {},
        ),
        request: const AdRequest())
      ..load();
  }

  getData() async {
    context.read<MultipleLikeButtonBloc>().add(const MultipleLikeButtonListLoadingEvent());
    _tabController = TabController(length: 10, vsync: this, initialIndex: 0);
    await billBoardApiMain.getTickerOverviewData(tickerId: mainVariables.selectedTickerId.value);
    await billBoardApiMain.getProfileVisitNotificationFunc(id: mainVariables.overViewMain!.value.response.userId);
    billBoardFunctionsMain.getNotifyCountAndImage();
    mainVariables.selectedControllerIndex.value = _tabController!.index;
    aboutMeText.value = mainVariables.overViewMain!.value.response.description;
    mainVariables.userBelievedProfileSingle = (mainVariables.overViewMain!.value.response.believed).obs;
    believersCount = mainVariables.overViewMain!.value.response.believersCount;
    if (mainVariables.overViewMain!.value.response.category == 'stocks') {
      if (mainVariables.overViewMain!.value.response.exchange == "NSE" || mainVariables.overViewMain!.value.response.exchange == "BSE") {
        setState(() {
          isDollar = false;
        });
      } else {
        setState(() {
          isDollar = true;
        });
      }
    } else if (mainVariables.overViewMain!.value.response.category == 'commodity') {
      if (mainVariables.overViewMain!.value.response.country == "India") {
        setState(() {
          isDollar = false;
        });
      } else {
        setState(() {
          isDollar = true;
        });
      }
    } else {
      setState(() {
        isDollar = false;
      });
    }
    if (aboutMeText.value.length > 90) {
      firstHalf.value = aboutMeText.value.substring(0, 90);
      secondHalf.value = aboutMeText.value.substring(90, aboutMeText.value.length);
    } else {
      firstHalf.value = aboutMeText.value;
      secondHalf.value = "";
    }
    setState(() {
      loader = true;
    });
  }

  @override
  void dispose() {
    _bannerAd!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    mainVariables.selectedControllerIndex.value = _tabController!.index;
    return WillPopScope(
      onWillPop: () async {
        if (widget.fromLink == "main") {
          Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (BuildContext context) => const MainBottomNavigationPage(
                        text: '',
                        caseNo1: 0,
                        tType: true,
                        newIndex: 0,
                        excIndex: 1,
                        countryIndex: 0,
                        isHomeFirstTym: false,
                      )));
        } else {
          mainVariables.billBoardListSearchControllerMain.value.clear();
          Navigator.pop(context, true);
        }
        return false;
      },
      child: Stack(
        alignment: Alignment.bottomCenter,
        children: [
          Container(
            color: Colors.black,
            child: SafeArea(
                child: Scaffold(
              //  backgroundColor: const Color(0XFFFFFFFF),
              backgroundColor: Theme.of(context).colorScheme.background,
              body: loader
                  ? CustomScrollView(
                      slivers: [
                        SliverPersistentHeader(
                          delegate:
                              MySliverAppBar(expandedHeight: height / 4.02, setState: setState, isDollar: isDollar, fromLink: widget.fromLink ?? ""),
                          pinned: true,
                        ),
                        SliverList(
                            delegate: SliverChildListDelegate([
                          Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              SizedBox(
                                height: height / 11.54,
                              ),
                              Container(
                                margin: const EdgeInsets.symmetric(horizontal: 10.275),
                                padding: const EdgeInsets.only(left: 15),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      mainVariables.overViewMain!.value.response.name.toUpperCase(),
                                      style: TextStyle(fontWeight: FontWeight.w600, color: Theme.of(context).colorScheme.onPrimary, fontSize: text.scale(22)),
                                    ),
                                    Text(
                                      "+${mainVariables.overViewMain!.value.response.code.toLowerCase()}",
                                      style: TextStyle(fontWeight: FontWeight.w400, color: const Color(0XFF0EA102), fontSize: text.scale(10)),
                                    ),
                                  ],
                                ),
                              ),
                              SizedBox(height: height / 57.73),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  userIdMain == mainVariables.overViewMain!.value.response.userId
                                      ? SizedBox(
                                          width: width / 16.44,
                                        )
                                      : const SizedBox(),
                                  userIdMain == mainVariables.overViewMain!.value.response.userId
                                      ? InkWell(
                                          onTap: () {
                                            Navigator.push(
                                                context, MaterialPageRoute(builder: (BuildContext context) => const EditProfilePage(comeFrom: true)));
                                          },
                                          child: const Icon(
                                            Icons.edit,
                                            color: Colors.green,
                                          ))
                                      : const SizedBox(),
                                  SizedBox(
                                    width: width / 16.44,
                                  ),
                                  billboardWidgetsMain.profileShare(
                                      context: context,
                                      heightValue: height / 34.64,
                                      widthValue: width / 16.44,
                                      id: mainVariables.overViewMain!.value.response.userId,
                                      type: 'business'),
                                  SizedBox(
                                    width: width / 16.44,
                                  ),
                                  userIdMain == mainVariables.overViewMain!.value.response.userId
                                      ? const SizedBox()
                                      : bookMarkWidgetSingle(
                                          bookMark: [mainVariables.overViewMain!.value.response.bookmark],
                                          id: mainVariables.overViewMain!.value.response.userId,
                                          type: "users",
                                          context: context,
                                          scale: 3.2,
                                          modelSetState: setState,
                                          index: 0),
                                  /* userIdMain==mainVariables.overViewMain!.value.response.userId
                                          ?GestureDetector(
                                        onTap: () {
                                          mainVariables.conversationUserData.value =
                                              ConversationUserData(
                                                  userId: mainVariables.overViewMain!.value.response.userId,
                                                  avatar: mainVariables.overViewMain!.value.response.logoUrl,
                                                  firstName: mainVariables.overViewMain!.value.response.name,
                                                  lastName: "",
                                                  userName: mainVariables.overViewMain!.value.response.code,
                                                  isBelieved: mainVariables.overViewMain!.value.response.believed);
                                          Navigator.push(
                                              context, MaterialPageRoute(
                                              builder: (BuildContext context){
                                                return ConversationPage();
                                              }));
                                        },
                                        child: Stack(
                                            alignment: Alignment.topRight,
                                            children:[
                                              Container(
                                                height: _height / 25.02,
                                                width: _width / 11.74,
                                                padding: EdgeInsets.symmetric(vertical:5),
                                                child: Center(
                                                  child: Image.asset(
                                                      "lib/Constants/Assets/BillBoard/messages.png"),
                                                ),
                                              ),
                                              badgeMessageCount.value == 0
                                                  ? SizedBox()
                                                  : Container(
                                                height: _height / 50,
                                                width: _width / 25,
                                                decoration: BoxDecoration(
                                                  shape: BoxShape.circle,
                                                  color: Color(0XFFF5103A),
                                                ),
                                                child: Center(
                                                    child: Text(
                                                      badgeMessageCount.value > 99
                                                          ? "99+"
                                                          : badgeMessageCount.value.toString(),
                                                      style: TextStyle(
                                                        color: Colors.white,
                                                        fontWeight: FontWeight.w500,
                                                        fontSize: badgeMessageCount.value.toString().length == 1
                                                            ? _text.scale(10)10
                                                            : badgeMessageCount.value.toString().length == 2
                                                            ? _text.scale(10)8
                                                            : _text.scale(10)6,
                                                      ),
                                                    )),
                                              )
                                            ]
                                        ),
                                      ):SizedBox(),*/
                                ],
                              ),
                              SizedBox(
                                height: height / 57.73,
                              ),
                              Container(
                                width: width,
                                height: height / 14.43,
                                margin: EdgeInsets.symmetric(horizontal: width / 27.4),
                                padding: EdgeInsets.symmetric(vertical: width / 102.75),
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(25),
                                    color: Theme.of(context).colorScheme.tertiary),
                                child: IntrinsicHeight(
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    crossAxisAlignment: CrossAxisAlignment.center,
                                    children: [
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Text(
                                            mainVariables.overViewMain!.value.response.billBoardCount < 999
                                                ? "${mainVariables.overViewMain!.value.response.billBoardCount}"
                                                : mainVariables.overViewMain!.value.response.billBoardCount > 999 &&
                                                        mainVariables.overViewMain!.value.response.billBoardCount < 99999
                                                    ? "${(mainVariables.overViewMain!.value.response.billBoardCount / 1000).toStringAsFixed(1)}K"
                                                    : "${(mainVariables.overViewMain!.value.response.billBoardCount / 100000).toStringAsFixed(1)}L",
                                            style: TextStyle(fontSize: text.scale(16), fontWeight: FontWeight.w600, color: const Color(0XFF0CA202)),
                                          ),
                                          SizedBox(
                                            width: width / 41.1,
                                          ),
                                          Text(
                                            "Post",
                                            style: TextStyle(fontSize: text.scale(14), fontWeight: FontWeight.w600, color: Theme.of(context).colorScheme.onPrimary),
                                          ),
                                        ],
                                      ),
                                      const VerticalDivider(),
                                      InkWell(
                                        onTap: () {
                                          billboardWidgetsMain.believersTabBottomSheet(
                                            context: context,
                                            id: mainVariables.selectedTickerId.value,
                                            isBelieversList: true,
                                          );
                                        },
                                        child: Row(
                                          mainAxisAlignment: MainAxisAlignment.center,
                                          crossAxisAlignment: CrossAxisAlignment.center,
                                          children: [
                                            Text(
                                              believersCount < 999
                                                  ? "$believersCount"
                                                  : believersCount > 999 && believersCount < 99999
                                                      ? "${(believersCount / 1000).toStringAsFixed(1)}K"
                                                      : "${(believersCount / 100000).toStringAsFixed(1)}L",
                                              //"$believersCount",
                                              style: TextStyle(fontSize: text.scale(16), fontWeight: FontWeight.w600, color: const Color(0XFF0CA202)),
                                            ),
                                            SizedBox(
                                              width: width / 41.1,
                                            ),
                                            Text(
                                              "Believed",
                                              style: TextStyle(fontSize: text.scale(14), fontWeight: FontWeight.w600, color: Theme.of(context).colorScheme.onPrimary),
                                            ),
                                          ],
                                        ),
                                      ),
                                      const VerticalDivider(),
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Text(
                                            mainVariables.overViewMain!.value.response.reportCount < 999
                                                ? "${mainVariables.overViewMain!.value.response.reportCount}"
                                                : mainVariables.overViewMain!.value.response.reportCount > 999 &&
                                                        mainVariables.overViewMain!.value.response.reportCount < 99999
                                                    ? "${(mainVariables.overViewMain!.value.response.reportCount / 1000).toStringAsFixed(1)}K"
                                                    : "${(mainVariables.overViewMain!.value.response.reportCount / 100000).toStringAsFixed(1)}L",
                                            // mainVariables.overViewMain!.value.response.reportCount.toString(),
                                            style: TextStyle(fontSize: text.scale(16), fontWeight: FontWeight.w600, color: const Color(0XFF0CA202)),
                                          ),
                                          SizedBox(
                                            width: width / 41.1,
                                          ),
                                          Text(
                                            "Reports",
                                            style: TextStyle(fontSize: text.scale(14), fontWeight: FontWeight.w600, color: Theme.of(context).colorScheme.onPrimary),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                              SizedBox(
                                height: height / 57.73,
                              ),
                              userIdMain == mainVariables.overViewMain!.value.response.userId
                                  ? const SizedBox()
                                  : Container(
                                      height: 40,
                                      width: width,
                                      margin: const EdgeInsets.symmetric(horizontal: 15),
                                      child: Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          GestureDetector(
                                            onTap: () async {
                                              Map<String, dynamic> response = await billBoardApiMain.getUserBelieve(
                                                id: mainVariables.overViewMain!.value.response.userId,
                                                name: mainVariables.overViewMain!.value.response.name,
                                              );
                                              if (response["status"]) {
                                                setState(() {
                                                  mainVariables.userBelievedProfileSingle.value = !mainVariables.userBelievedProfileSingle.value;
                                                  mainVariables.userBelievedProfileSingle.value ? believersCount++ : believersCount--;
                                                });
                                                if (!mounted) {
                                                  return;
                                                }
                                                await billBoardApiMain.getSearchData(
                                                    searchKey: mainVariables.billBoardSearchControllerMain.value.text, context: context);
                                                for (int i = 0; i < mainVariables.popularSearchDataMain!.value.response.length; i++) {
                                                  if (mainVariables.popularSearchDataMain!.value.response[i].id ==
                                                      mainVariables.overViewMain!.value.response.userId) {
                                                    mainVariables.popularSearchDataMain!.value.response[i].believed = false;
                                                    mainVariables.popularSearchDataMain!.value.response[i].believersCount--;
                                                  }
                                                }
                                                if (!mounted) {
                                                  return;
                                                }
                                                await billBoardApiMain.getBillBoardListApiFunc(
                                                  context: context,
                                                  category: RxList<String>([]),
                                                  contentType: "",
                                                  profile: "",
                                                  skipBillBoardCount: 0,
                                                  skipForumCount: 0,
                                                  skipSurveyCount: 0,
                                                  skipNewsCount: 0,
                                                  tickers: [],
                                                  userId: mainVariables.overViewMain!.value.response.userId,
                                                );
                                                mainVariables.valueMapListProfilePage.clear();
                                                mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardDataProfilePage!.value.response);
                                              }
                                            },
                                            child: Obx(() => mainVariables.userBelievedProfileSingle.value
                                                ? Container(
                                                    width: width / 1.3,
                                                    decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(8),
                                                      border: Border.all(color: isDarkTheme.value ? Colors.transparent : const Color(0XFF0EA102)),
                                                      color: isDarkTheme.value ? const Color(0xff464646) : Colors.white,),
                                                    child: const Center(
                                                      child: Text(
                                                        "Believed",
                                                        style: TextStyle(color: Colors.black),
                                                      ),
                                                    ),
                                                  )
                                                : Container(
                                                    width: width / 1.3,
                                                    decoration: BoxDecoration(
                                                      borderRadius: BorderRadius.circular(8),
                                                      color: const Color(0XFF0EA102),
                                                    ),
                                                    child: const Center(
                                                      child: Text(
                                                        "Believe",
                                                        style: TextStyle(color: Colors.white),
                                                      ),
                                                    ),
                                                  )),
                                          ),
                                          const SizedBox(
                                            width: 15,
                                          ),
                                          GestureDetector(
                                              onTap: () {
                                                mainVariables.conversationUserData.value = ConversationUserData(
                                                    userId: mainVariables.overViewMain!.value.response.userId,
                                                    avatar: mainVariables.overViewMain!.value.response.logoUrl,
                                                    firstName: mainVariables.overViewMain!.value.response.name,
                                                    lastName: "",
                                                    userName: mainVariables.overViewMain!.value.response.code,
                                                    isBelieved: mainVariables.overViewMain!.value.response.believed);
                                                Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                  return const ConversationPage();
                                                }));
                                              },
                                              child: SizedBox(
                                                width: 40,
                                                child: Center(
                                                  child: SvgPicture.asset("lib/Constants/Assets/BillBoard/messageSymbol.svg"),
                                                ),
                                              )),
                                        ],
                                      ),
                                    ),
                              SizedBox(
                                height: height / 57.73,
                              ),
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                                child: Text(
                                  "About",
                                  style: TextStyle(fontSize: text.scale(14), color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.3), fontWeight: FontWeight.w600),
                                ),
                              ),
                              SizedBox(
                                height: height / 86.6,
                              ),
                              Container(
                                width: width,
                                margin: EdgeInsets.symmetric(horizontal: width / 27.4),
                                child: aboutMeText.value == ""
                                    ? Text(
                                        "Description not available",
                                        style: TextStyle(fontSize: text.scale(12), fontWeight: FontWeight.w500,color:Theme.of(context).colorScheme.onPrimary),
                                      )
                                    : Obx(
                                        () => secondHalf.isEmpty
                                            ? Text(
                                                firstHalf.value,
                                                style: TextStyle(fontSize: text.scale(12), fontWeight: FontWeight.w500, color: Theme.of(context).colorScheme.onPrimary),
                                              )
                                            : Column(
                                                children: <Widget>[
                                                  Text(
                                                    flag.value ? ("${firstHalf.value}...") : (firstHalf.value + secondHalf.value),
                                                    style: TextStyle(fontSize: text.scale(12), fontWeight: FontWeight.w500, color: Theme.of(context).colorScheme.onPrimary),
                                                  ),
                                                  InkWell(
                                                    child: Row(
                                                      mainAxisAlignment: MainAxisAlignment.end,
                                                      children: <Widget>[
                                                        Text(
                                                          flag.value ? "show more" : "show less",
                                                          style: TextStyle(fontSize: text.scale(10), color: const Color(0XFF48B83F)),
                                                        ),
                                                      ],
                                                    ),
                                                    onTap: () {
                                                      flag.toggle();
                                                    },
                                                  ),
                                                ],
                                              ),
                                      ),
                              ),
                              SizedBox(
                                height: height / 57.73,
                              ),
                              SizedBox(
                                height: height / 1.13,
                                width: width,
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    SizedBox(
                                      height: height / 57.73,
                                    ),
                                    PreferredSize(
                                      preferredSize: Size.fromWidth(width / 29.2),
                                      child: SizedBox(
                                        height: height / 20.55,
                                        child: TabBar(
                                          isScrollable: true,
                                          indicatorWeight: 0.1,
                                          dividerColor: Colors.transparent,
                                          dividerHeight: 0.0,
                                          indicatorColor: Colors.transparent,
                                          tabAlignment: TabAlignment.start,
                                          controller: _tabController,
                                          splashFactory: NoSplash.splashFactory,
                                          splashBorderRadius: BorderRadius.circular(15),
                                          tabs: [
                                            Tab(
                                              child: Container(
                                                  padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                  decoration: BoxDecoration(
                                                      color: const Color(0xffAFAFAF),
                                                      borderRadius: BorderRadius.circular(15),
                                                      ),
                                                  child: Obx(
                                                    () => Text(
                                                      'BillBoard',
                                                      style: TextStyle(
                                                        fontSize: text.scale(14),
                                                        fontWeight: FontWeight.w600,
                                                        color: mainVariables.selectedControllerIndex.value == 0
                                                            ? const Color(0XFF0EA102)
                                                            : isDarkTheme.value
                                                            ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                            : Colors.black38,
                                                      ),
                                                    ),
                                                  )),
                                            ),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Charts',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 1
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Buzz',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 2
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Communities',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 3
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Fundamentals',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 4
                                                              ? const Color(0XFF0EA102)
                                                              :isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Reports',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 5
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Reposted',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 6
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Featured',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 7
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Activity',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 8
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                            Tab(
                                                child: Container(
                                                    padding: EdgeInsets.symmetric(horizontal: width / 41.1, vertical: 3),
                                                    decoration: BoxDecoration(
                                                        color: const Color(0xffAFAFAF),
                                                        borderRadius: BorderRadius.circular(15),
                                                        ),
                                                    child: Obx(
                                                      () => Text(
                                                        'Official',
                                                        style: TextStyle(
                                                          fontSize: text.scale(14),
                                                          fontWeight: FontWeight.w600,
                                                          color: mainVariables.selectedControllerIndex.value == 9
                                                              ? const Color(0XFF0EA102)
                                                              : isDarkTheme.value
                                                              ? Theme.of(context).colorScheme.background.withOpacity(0.5)
                                                              : Colors.black38,
                                                        ),
                                                      ),
                                                    ))),
                                          ],
                                          onTap: (index) {
                                            mainVariables.billBoardListSearchControllerMain.value.clear();
                                            mainVariables.selectedControllerIndex.value = _tabController!.index;
                                            setState(() {});
                                          },
                                        ),
                                      ),
                                    ),
                                    SizedBox(
                                      height: height / 57.73,
                                    ),
                                    Container(
                                      height: height / 1.27,
                                      width: width,
                                      margin: const EdgeInsets.only(top: 2),
                                      decoration: BoxDecoration(
                                        borderRadius: const BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                        color: Theme.of(context).colorScheme.onBackground,
                                        boxShadow: const [
                                          BoxShadow(
                                            color: Colors.black26,
                                            blurRadius: 4.0,
                                            spreadRadius: 0.0,
                                          ),
                                        ],
                                      ),
                                      child: Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          SizedBox(
                                            height: height / 57.73,
                                          ),
                                          Expanded(
                                            child: TabBarView(
                                              controller: _tabController,
                                              physics: const ScrollPhysics(),
                                              children: [
                                                BillBoardTabPage(
                                                  userId: mainVariables.overViewMain!.value.response.userId,
                                                ),
                                                const ChartsTabPage(),
                                                const BuzzTabPage(),
                                                const CommunitiesTabPage(),
                                                const Financial(fromWhere: true),
                                                const ReportsWidget(fromWhere: true),
                                                RepostsTabPage(
                                                  userId: mainVariables.overViewMain!.value.response.userId,
                                                ),
                                                FeaturedTabPage(tickerId: mainVariables.selectedTickerId.value, userId: ""),
                                                const ActivityTabPage(),
                                                const OfficialTabPage(),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          )
                        ]))
                      ],
                    )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
                    ),
            )),
          ),
          _bannerAdIsLoaded && _bannerAd != null
              ? Padding(
                  padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                  child: SizedBox(
                    width: _bannerAd!.size.width.toDouble(),
                    height: _bannerAd!.size.height.toDouble(),
                    child: AdWidget(ad: _bannerAd!),
                  ),
                )
              : const SizedBox(),
        ],
      ),
    );
  }
}

class MySliverAppBar extends SliverPersistentHeaderDelegate {
  final double expandedHeight;
  final bool isDollar;
  final String fromLink;
  StateSetter setState;

  MySliverAppBar({
    required this.expandedHeight,
    required this.setState,
    required this.isDollar,
    required this.fromLink,
  });

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Stack(clipBehavior: Clip.none, fit: StackFit.expand, alignment: Alignment.centerLeft, children: [
      mainVariables.overViewMain!.value.response.coverImage == ""
          ? Image.asset(
              "lib/Constants/Assets/Settings/coverImage_default.png",
              fit: BoxFit.fill,
            )
          : mainVariables.overViewMain!.value.response.coverImage.contains("svg")
              ? SvgPicture.network(mainVariables.overViewMain!.value.response.coverImage, fit: BoxFit.fill)
              : Image.network(mainVariables.overViewMain!.value.response.coverImage, fit: BoxFit.fill),
      Opacity(
        opacity: shrinkOffset / expandedHeight,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              padding: EdgeInsets.only(left: width / 3.57),
              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), color: Colors.black26.withOpacity(0.3)),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(
                    width: width / 2.56,
                    child: Text(
                      mainVariables.overViewMain!.value.response.name.toUpperCase(),
                      style: TextStyle(
                          fontWeight: FontWeight.w600, color: const Color(0XFFFFFFFF), fontSize: text.scale(16), overflow: TextOverflow.ellipsis),
                      maxLines: 1,
                    ),
                  ),
                  Text(
                    mainVariables.overViewMain!.value.response.code.toUpperCase(),
                    style: TextStyle(fontWeight: FontWeight.w400, color: const Color(0XFFFFFFFF), fontSize: text.scale(10)),
                  ),
                ],
              ),
            ),
            Container(
              height: height / 17.32,
              width: width / 4.11,
              margin: EdgeInsets.only(right: width / 16.44),
              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), color: Colors.black26.withOpacity(0.3)),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      isDollar
                          ? Text(
                              "\$",
                              style: TextStyle(fontSize: text.scale(16), fontWeight: FontWeight.w600, color: Colors.white),
                            )
                          : Text(
                              '\u{20B9}',
                              style: TextStyle(fontSize: text.scale(10), fontFamily: "Robonto", fontWeight: FontWeight.w600, color: Colors.white),
                            ),
                      Text(
                        mainVariables.overViewMain!.value.response.close,
                        style: TextStyle(fontSize: text.scale(16), fontFamily: "Robonto", fontWeight: FontWeight.w600, color: Colors.white),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Icon(
                        mainVariables.overViewMain!.value.response.state == "Decrease" ? Icons.arrow_drop_down : Icons.arrow_drop_up,
                        color: mainVariables.overViewMain!.value.response.state == "Decrease" ? const Color(0XFFFF0000) : const Color(0XFF0EA102),
                      ),
                      Text(
                        '${mainVariables.overViewMain!.value.response.changeValue} ( ${mainVariables.overViewMain!.value.response.changeP}% )',
                        style: TextStyle(
                            fontSize: text.scale(8),
                            fontWeight: FontWeight.w600,
                            color:
                                mainVariables.overViewMain!.value.response.state == "Decrease" ? const Color(0XFFFF0000) : const Color(0XFF0EA102)),
                      ),
                    ],
                  ),
                ],
              ),
            )
          ],
        ),
      ),
      Positioned(
        top: (-0.85 * shrinkOffset) + (height / 6.414),
        left: (-0.1 * shrinkOffset) + (width / 27.4), //-60,
        child: Transform.scale(
          scale: 1 - (shrinkOffset * 0.7) / expandedHeight,
          //opacity: (1 - shrinkOffset / expandedHeight),
          child: Container(
            height: height / 5.77,
            width: width / 2.74,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.white,
              border: Border.all(color: Colors.black26.withOpacity(0.3)),
              image: mainVariables.overViewMain!.value.response.logoUrl == "" || mainVariables.overViewMain!.value.response.logoUrl.contains("svg")
                  ? const DecorationImage(image: AssetImage("lib/Constants/Assets/SMLogos/Logos/TradeWatch.png"), fit: BoxFit.contain)
                  : DecorationImage(image: NetworkImage(mainVariables.overViewMain!.value.response.logoUrl), fit: BoxFit.contain),
            ),
            clipBehavior: Clip.hardEdge,
          ),
        ),
      ),
      Positioned(
          top: (-0.85 * shrinkOffset) + height / 4.02,
          right: width / 27.4,
          //top: 215,
          // right: 15, //-60,
          child: Opacity(
            opacity: 1 - (shrinkOffset / expandedHeight),
            child: Container(
              margin: EdgeInsets.symmetric(
                vertical: height / 86.6,
              ),
              padding: EdgeInsets.symmetric(vertical: height / 86.6, horizontal: width / 41.1),
              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), border: Border.all(color: Colors.black26.withOpacity(0.1))),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      isDollar
                          ? Text(
                              '\$',
                              style: TextStyle(fontSize: text.scale(20), fontWeight: FontWeight.w600, color: const Color(0XFF004CBD)),
                            )
                          : Text(
                              '\u{20B9}',
                              style: TextStyle(
                                  fontSize: text.scale(20), fontFamily: "Robonto", fontWeight: FontWeight.w600, color: const Color(0XFF004CBD)),
                            ),
                      Text(
                        mainVariables.overViewMain!.value.response.close,
                        style:
                            TextStyle(fontSize: text.scale(20), fontFamily: "Robonto", fontWeight: FontWeight.w600, color: const Color(0XFF004CBD)),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Icon(mainVariables.overViewMain!.value.response.state == "Decrease" ? Icons.arrow_drop_down : Icons.arrow_drop_up,
                          color: mainVariables.overViewMain!.value.response.state == "Decrease" ? const Color(0XFFFF0000) : const Color(0XFF0EA102)),
                      Text(
                        '${mainVariables.overViewMain!.value.response.changeValue} ( ${mainVariables.overViewMain!.value.response.changeP}% )',
                        style: TextStyle(
                            fontSize: text.scale(8),
                            fontWeight: FontWeight.w600,
                            color:
                                mainVariables.overViewMain!.value.response.state == "Decrease" ? const Color(0XFFFF0000) : const Color(0XFF0EA102)),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          )),
      Positioned(
        top: 0,
        left: 0,
        child: IconButton(
            onPressed: () async {
              if (fromLink == "main") {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (BuildContext context) => const MainBottomNavigationPage(
                              text: '',
                              caseNo1: 0,
                              tType: true,
                              newIndex: 0,
                              excIndex: 1,
                              countryIndex: 0,
                              isHomeFirstTym: false,
                            )));
              } else {
                Navigator.pop(context, true);
                /*mainVariables.valueMapListProfilePage.clear();
                    mainVariables.responseFocusList.clear();
                    mainVariables.globalKeyList.clear();
                    mainVariables.responseControllerList.clear();
                    mainVariables.pickedImageMain.clear();
                    mainVariables.pickedVideoMain.clear();
                    mainVariables.pickedFileMain.clear();
                    mainVariables.docMain.clear();
                    mainVariables.selectedUrlTypeMain.clear();
                    mainVariables.docFilesMain.clear();
                    await billBoardApiMain.getBillBoardListApiFunc(
                      context: context,
                      category: mainVariables.contentCategoriesMain,
                      contentType: mainVariables.contentTypeMain.value,
                      profile: mainVariables.selectedProfileMain.value,
                      skipBillBoardCount: 0,
                      skipForumCount: 0,
                      skipSurveyCount: 0,
                      skipNewsCount: 0,
                      tickers: [],
                      userId: '',
                    );
                    if(mainVariables.billBoardDataProfilePage!.value.response.isNotEmpty){
                      mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardDataProfilePage!.value.response);
                      for(int i=0;i<mainVariables.billBoardDataProfilePage!.value.response.length;i++){
                        mainVariables.responseFocusList.add(FocusNode());
                        mainVariables.globalKeyList.add(GlobalKey());
                        mainVariables.responseControllerList.add(TextEditingController());
                        mainVariables.pickedImageMain.add(null);
                        mainVariables.pickedVideoMain.add(null);
                        mainVariables.pickedFileMain.add(null);
                        mainVariables.docMain.add(null);
                        mainVariables.selectedUrlTypeMain.add("");
                        mainVariables.docFilesMain.add([]);
                      }
                    }*/
              }
            },
            icon: const Icon(
              Icons.arrow_back,
              color: Colors.white,
            )),
      ),
      mainVariables.overViewMain!.value.response.userId == userIdMain
          ? const SizedBox()
          : Positioned(
              top: 0,
              right: 0,
              child: Opacity(
                opacity: 1 - (shrinkOffset / expandedHeight),
                child: IconButton(
                    onPressed: () async {
                      conversationWidgetsMain.bottomSheet(
                        context: context,
                        modelSetState: setState,
                        fromWhere: 'list',
                        index: 0,
                        userId: mainVariables.overViewMain!.value.response.userId,
                      );
                    },
                    icon: const Icon(
                      Icons.more_vert,
                      color: Colors.white,
                    )),
              ))
    ]);
  }

  @override
  double get maxExtent => expandedHeight;

  @override
  double get minExtent => kToolbarHeight;

  @override
  bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) => true;
}

class BillBoardTabPage extends StatefulWidget {
  final String userId;

  const BillBoardTabPage({Key? key, required this.userId}) : super(key: key);

  @override
  State<BillBoardTabPage> createState() => _BillBoardTabPageState();
}

class _BillBoardTabPageState extends State<BillBoardTabPage> {
  bool switchValue = false;
  bool loader = false;
  bool listLoader = true;
  final CarouselController _carController = CarouselController();
  int carouselIndexGlobal = 0;
  TextEditingController bottomSheetController = TextEditingController();
  final RefreshController _controller = RefreshController();
  int skipBillBoardCount = 0;
  int skipSurveyCount = 0;
  int skipNewsCount = 0;
  int skipForumCount = 0;
  int skipCount = 0;

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    getData();
    super.initState();
  }

  getData() async {
    Future.delayed(const Duration(milliseconds: 100), () {});
    mainVariables.selectedControllerIndex.value = 0;
    mainVariables.selectedUserControllerIndex.value = 0;
    mainVariables.selectedUserControllerIndex.value = 0;
    if (mainSkipValue == false) {
      context.read<LikeButtonListWidgetBloc>().add(const LikeButtonListLoadingEvent());
      context.read<ResponseFieldWidgetBloc>().add(const ResponseFieldInitialEvent());
      context.read<BillBoardTranslationBloc>().add(const BillBoardLoadingTranslationEvent());
      context.read<BookMarkWidgetBloc>().add(const LoadingEvent());
      switchValue = mainVariables.activeTypeMain.value == "believed";
      await billBoardApiMain.getPopularTraderData(searchValue: '', context: context);
      await getBillBoardListData();
    }
  }

  getBillBoardListData() async {
    setState(() {
      listLoader = false;
    });
    await billBoardApiMain.getBillBoardListApiFunc(
      context: context,
      category: RxList<String>([]),
      contentType: "",
      profile: "",
      skipBillBoardCount: 0,
      skipForumCount: 0,
      skipSurveyCount: 0,
      skipNewsCount: 0,
      tickers: [],
      userId: widget.userId,
    );
    mainVariables.valueMapListProfilePage.clear();
    mainVariables.responseFocusList.clear();
    mainVariables.responseControllerList.clear();
    mainVariables.pickedImageMain.clear();
    mainVariables.pickedVideoMain.clear();
    mainVariables.pickedFileMain.clear();
    mainVariables.docMain.clear();
    mainVariables.selectedUrlTypeMain.clear();
    mainVariables.docFilesMain.clear();
    if (mainVariables.billBoardDataProfilePage!.value.response.isNotEmpty) {
      mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardDataProfilePage!.value.response);
      for (int i = 0; i < mainVariables.billBoardDataProfilePage!.value.response.length; i++) {
        mainVariables.responseFocusList.add(FocusNode());
        mainVariables.responseControllerList.add(TextEditingController());
        mainVariables.pickedImageMain.add(null);
        mainVariables.pickedVideoMain.add(null);
        mainVariables.pickedFileMain.add(null);
        mainVariables.docMain.add(null);
        mainVariables.selectedUrlTypeMain.add("");
        mainVariables.docFilesMain.add([]);
      }
      setState(() {
        listLoader = true;
        loader = true;
      });
    } else {
      setState(() {
        listLoader = true;
        loader = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return loader
        ? Column(children: [
            billboardWidgetsMain.getBillBoardSearchField(
              context: context,
              modelSetState: setState,
              billBoardFunction: getBillBoardListData,
            ),
            SizedBox(height: height / 57.73),
            listLoader
                ? Expanded(
                    child: Obx(() => mainVariables.valueMapListProfilePage.isEmpty
                        ? Container(
                            margin: EdgeInsets.symmetric(horizontal: width / 24.17),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                SizedBox(
                                  height: height / 57.73,
                                ),
                                SvgPicture.asset(
                                  "lib/Constants/Assets/BillBoard/businessProfile/emptyList.svg",
                                  height: height / 3.464,
                                  width: width / 1.49,
                                  fit: BoxFit.fill,
                                ),
                                SizedBox(
                                  height: height / 57.73,
                                ),
                                SizedBox(
                                  width: width / 1.2,
                                  child: RichText(
                                    textAlign: TextAlign.center,
                                    text: TextSpan(
                                      children: [
                                        TextSpan(
                                            text: 'Unfortunately no posts found for this profile',
                                            style: TextStyle(fontFamily: "Poppins", fontSize: text.scale(14), fontWeight: FontWeight.w600)),
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            ),
                          )
                        : SmartRefresher(
                            controller: _controller,
                            enablePullDown: false,
                            enablePullUp: true,
                            footer: CustomFooter(
                              builder: (BuildContext context, LoadStatus? mode) {
                                Widget body;
                                if (mode == LoadStatus.idle) {
                                  body = const Text("pull up load");
                                } else if (mode == LoadStatus.loading) {
                                  body = const CupertinoActivityIndicator();
                                } else if (mode == LoadStatus.failed) {
                                  body = const Text("Load Failed!Click retry!");
                                } else if (mode == LoadStatus.canLoading) {
                                  body = const Text("release to load more");
                                } else {
                                  body = const Text("No more Data");
                                }
                                return SizedBox(
                                  height: 55.0,
                                  child: Center(child: body),
                                );
                              },
                            ),
                            onLoading: () async {
                              for (int i = 0; i < mainVariables.billBoardDataProfilePage!.value.response.length; i++) {
                                if (mainVariables.billBoardDataProfilePage!.value.response[i].type == "byte" ||
                                    mainVariables.billBoardDataProfilePage!.value.response[i].type == "blog") {
                                  skipBillBoardCount++;
                                } else if (mainVariables.billBoardDataProfilePage!.value.response[i].type == "survey") {
                                  skipSurveyCount++;
                                } else if (mainVariables.billBoardDataProfilePage!.value.response[i].type == "news") {
                                  skipNewsCount++;
                                } else if (mainVariables.billBoardDataProfilePage!.value.response[i].type == "forums") {
                                  skipForumCount++;
                                } else {}
                              }
                              await billBoardApiMain.getBillBoardListApiFunc(
                                context: context,
                                category: RxList<String>([]),
                                contentType: "",
                                profile: "",
                                skipBillBoardCount: skipBillBoardCount,
                                skipForumCount: skipForumCount,
                                skipSurveyCount: skipSurveyCount,
                                skipNewsCount: skipNewsCount,
                                tickers: [],
                                userId: widget.userId,
                              );
                              SharedPreferences prefs = await SharedPreferences.getInstance();
                              mainVariables.isFirstTime.value = prefs.getBool("isFirstTime") ?? true;
                              if (mainVariables.billBoardDataProfilePage!.value.response.isNotEmpty) {
                                mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardDataProfilePage!.value.response);
                                for (int i = 0; i < mainVariables.billBoardDataProfilePage!.value.response.length; i++) {
                                  mainVariables.responseFocusList.add(FocusNode());
                                  // mainVariables.globalKeyList.add(GlobalKey());
                                  mainVariables.responseControllerList.add(TextEditingController());
                                  mainVariables.pickedImageMain.add(null);
                                  mainVariables.pickedVideoMain.add(null);
                                  mainVariables.pickedFileMain.add(null);
                                  mainVariables.docMain.add(null);
                                  mainVariables.selectedUrlTypeMain.add("");
                                  mainVariables.docFilesMain.add([]);
                                }
                                setState(() {});
                              } else {
                                setState(() {});
                              }
                              if (mounted) {
                                setState(() {});
                              }
                              _controller.loadComplete();
                              /*for(int i=0;i<mainVariables.billBoardDataProfilePage!.value.response.length;i++){
            if(mainVariables.billBoardDataProfilePage!.value.response[i].type=="byte"||
                mainVariables.billBoardDataProfilePage!.value.response[i].type=="blog"){
              skipBillBoardCount++;
            }
            else if(mainVariables.billBoardDataProfilePage!.value.response[i].type=="survey"){
              skipSurveyCount++;
            }
            else if(mainVariables.billBoardDataProfilePage!.value.response[i].type=="news"){
              skipNewsCount++;
            }
            else{
              skipForumCount++;
            }
          }
          skipCount+=10;
          getBillBoardListData();
          if (mounted){
            setState(() {});
          }
          _controller.loadComplete();*/
                            },
                            child: ListView.builder(
                                physics: const ScrollPhysics(),
                                padding: EdgeInsets.zero,
                                scrollDirection: Axis.vertical,
                                itemCount: mainVariables.valueMapListProfilePage.length,
                                itemBuilder: (context, index) {
                                  return Container(
                                    padding: EdgeInsets.only(left: width / 41.1, right: width / 41.1),
                                    child: Column(
                                      children: [
                                        mainVariables.valueMapListProfilePage[index].type == "byte"
                                            ? mainVariables.valueMapListProfilePage[index].files.isEmpty
                                                ? Container(
                                                    padding: const EdgeInsets.all(1.5),
                                                    decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                      BoxShadow(
                                                          color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                                  mainVariables.valueMapListProfilePage[index].believed == false
                                                              ? Colors.black87.withOpacity(0.7)
                                                              : Colors.black26.withOpacity(0.1),
                                                          blurRadius: 4.0,
                                                          spreadRadius: 0.0)
                                                    ]),
                                                    child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                            mainVariables.valueMapListProfilePage[index].believed == false
                                                        ? Center(
                                                            child: Padding(
                                                              padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                              child: Column(
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  SizedBox(
                                                                      width: width / 1.2,
                                                                      child: Text(
                                                                        "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                                        style: TextStyle(
                                                                            fontSize: 14,
                                                                            fontWeight: FontWeight.w500,
                                                                            color: Theme.of(context).colorScheme.background),
                                                                        textAlign: TextAlign.center,
                                                                      )),
                                                                  const SizedBox(
                                                                    height: 15,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3.5,
                                                                    child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                            heightValue: height / 33.76,
                                                                            isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                            billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                            context: context,
                                                                            modelSetState: setState,
                                                                            index: index,
                                                                            background: true,
                                                                          )
                                                                        : const SizedBox(),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          )
                                                        : Column(
                                                            children: [
                                                              Container(
                                                                decoration: BoxDecoration(
                                                                  color: Theme.of(context).colorScheme.background,
                                                                  borderRadius: const BorderRadius.only(
                                                                      topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                                ),
                                                                child: Column(
                                                                  children: [
                                                                    SizedBox(
                                                                      height: height / 86.6,
                                                                    ),
                                                                    Row(
                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        SizedBox(
                                                                          width: width / 41.1,
                                                                        ),
                                                                        billboardWidgetsMain.getProfile(
                                                                            context: context,
                                                                            heightValue: height / 17.32,
                                                                            widthValue: width / 8.22,
                                                                            myself: false,
                                                                            isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                                            avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                                            userId: mainVariables.valueMapListProfilePage[index].userId),
                                                                        SizedBox(
                                                                          width: width / 41.1,
                                                                        ),
                                                                        Expanded(
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              InkWell(
                                                                                onTap: () {
                                                                                  Navigator.push(context,
                                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return UserBillBoardProfilePage(
                                                                                            userId:
                                                                                                mainVariables.valueMapListProfilePage[index].userId)
                                                                                        /*UserProfilePage(
                                                  id:valueMapList[index].userId,type:'forums',index:0)*/
                                                                                        ;
                                                                                  }));
                                                                                },
                                                                                child: Text(
                                                                                  mainVariables.valueMapListProfilePage[index].username
                                                                                      .toString()
                                                                                      .capitalizeFirst!,
                                                                                  style: TextStyle(
                                                                                      fontSize: text.scale(12),
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontFamily: "Poppins"),
                                                                                ),
                                                                              ),
                                                                              const SizedBox(
                                                                                height: 5,
                                                                              ),
                                                                              Row(
                                                                                children: [
                                                                                  Text(
                                                                                    mainVariables.valueMapListProfilePage[index].createdAt,
                                                                                    style: TextStyle(
                                                                                        fontSize: text.scale(10),
                                                                                        color: const Color(0XFF737373),
                                                                                        fontWeight: FontWeight.w400,
                                                                                        fontFamily: "Poppins"),
                                                                                  ),
                                                                                  const SizedBox(
                                                                                    width: 3,
                                                                                  ),
                                                                                  Text(
                                                                                    " | ",
                                                                                    style: TextStyle(
                                                                                      fontSize: text.scale(11),
                                                                                      color: const Color(0XFF737373),
                                                                                      fontWeight: FontWeight.w400,
                                                                                    ),
                                                                                  ),
                                                                                  const SizedBox(
                                                                                    width: 3,
                                                                                  ),
                                                                                  InkWell(
                                                                                    onTap: () {
                                                                                      billboardWidgetsMain.believersTabBottomSheet(
                                                                                        context: context,
                                                                                        id: mainVariables.valueMapListProfilePage[index].userId,
                                                                                        isBelieversList: true,
                                                                                      );
                                                                                    },
                                                                                    child: Text(
                                                                                      "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                                      style: TextStyle(
                                                                                          fontSize: text.scale(10),
                                                                                          color: const Color(0XFF737373),
                                                                                          fontWeight: FontWeight.w400,
                                                                                          fontFamily: "Poppins"),
                                                                                    ),
                                                                                  ),
                                                                                ],
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                        userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                            ? billboardWidgetsMain.getHomeBelieveButton(
                                                                                heightValue: height / 33.76,
                                                                                isBelieved: List.generate(
                                                                                    mainVariables.valueMapListProfilePage.length,
                                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                                billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                                billboardUserName:
                                                                                    mainVariables.valueMapListProfilePage[index].username,
                                                                                context: context,
                                                                                modelSetState: setState,
                                                                                index: index,
                                                                                background: false,
                                                                              )
                                                                            : const SizedBox(),

                                                                        ///more_vert
                                                                        IconButton(
                                                                            onPressed: () {
                                                                              billboardWidgetsMain.bottomSheet(
                                                                                context1: context,
                                                                                myself:
                                                                                    userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                                billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                                type: "billboard",
                                                                                responseId: "",
                                                                                responseUserId: "",
                                                                                commentId: "",
                                                                                commentUserId: "",
                                                                                callFunction: getData,
                                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                                modelSetState: setState,
                                                                                responseDetail: {},
                                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                                valueMapList: mainVariables.valueMapListProfilePage,
                                                                                index: index,
                                                                              );
                                                                            },
                                                                            icon: Icon(
                                                                              Icons.more_vert,
                                                                              color: Theme.of(context).colorScheme.onPrimary,
                                                                              size: 25,
                                                                            ))
                                                                      ],
                                                                    ),
                                                                    SizedBox(height: height / 64),
                                                                  ],
                                                                ),
                                                              ),
                                                              GestureDetector(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) =>
                                                                                    const BlogDescriptionPage(fromWhere: "profile")));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) =>
                                                                                    const BytesDescriptionPage(fromWhere: "profile")));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        bool responseBool =
                                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                                        if (!mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? await Navigator.push(context,
                                                                                MaterialPageRoute(builder: (BuildContext context) {
                                                                                return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                );
                                                                              }))
                                                                            : activeStatus == 'active'
                                                                                ? answerStatus
                                                                                    ? await Navigator.push(context,
                                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                                        return AnalyticsPage(
                                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                            activity: false,
                                                                                            navBool: false,
                                                                                            fromWhere: 'similar',
                                                                                            surveyTitle:
                                                                                                mainVariables.valueMapListProfilePage[index].title);
                                                                                      }))
                                                                                    : await Navigator.push(context,
                                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                                        return QuestionnairePage(
                                                                                          surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                          defaultIndex: answeredQuestion,
                                                                                        );
                                                                                      }))
                                                                                : await Navigator.push(context,
                                                                                    MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return AnalyticsPage(
                                                                                      surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                      activity: false,
                                                                                      surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                      navBool: false,
                                                                                      fromWhere: 'similar',
                                                                                    );
                                                                                  }));
                                                                        if (responseBool) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "news":
                                                                      {
                                                                        /*bool response = await Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                          return DemoPage(
                                                                            url: "",
                                                                            text: "",
                                                                            image: "",
                                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                                            type: 'news',
                                                                            activity: true,
                                                                            checkMain: false,
                                                                          );
                                                                        }));
                                                                        if (response) {
                                                                          getData();
                                                                        }*/
                                                                        Get.to(const DemoView(), arguments: {
                                                                          "id": mainVariables.valueMapListProfilePage[index].id,
                                                                          "type": "news",
                                                                          "url": ""
                                                                        });
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Container(
                                                                  height: height / 9,
                                                                  color: Theme.of(context).colorScheme.background,
                                                                  alignment: Alignment.topLeft,
                                                                  child: Padding(
                                                                    padding: const EdgeInsets.all(12.0),
                                                                    child: RichText(
                                                                      textAlign: TextAlign.left,
                                                                      text: TextSpan(
                                                                        children: conversationFunctionsMain.spanListBillBoardHome(
                                                                            message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                                ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                                : mainVariables.valueMapListProfilePage[index].title,
                                                                            context: context,
                                                                            isByte: true),
                                                                      ),
                                                                    ) /*Text( mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                  style:TextStyle(
                                    fontSize: _text.scale(10)14,
                                    fontWeight: FontWeight.w400,
                                    color: Color(0XFF403D3D),
                                  ),
                                  textAlign: TextAlign.left,
                                  maxLines: 3,
                                  overflow: TextOverflow.ellipsis,
                                )*/
                                                                    ,
                                                                  ),
                                                                ),
                                                              ),
                                                              Container(
                                                                decoration: BoxDecoration(
                                                                  color: Theme.of(context).colorScheme.background,
                                                                  borderRadius: const BorderRadius.only(
                                                                      bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                                ),
                                                                child: Column(
                                                                  children: [
                                                                    SizedBox(
                                                                      height: height / 86.6,
                                                                    ),
                                                                    Row(
                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Row(children: [
                                                                          SizedBox(
                                                                            width: width / 41.1,
                                                                          ),
                                                                          billboardWidgetsMain.likeButtonHomeListWidget(
                                                                            likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                                            index: index,
                                                                            context: context,
                                                                            initFunction: () {},
                                                                            modelSetState: setState,
                                                                            notUse: true,
                                                                            dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                            likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                            dislikeCountList: List.generate(
                                                                                mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                            type: mainVariables.valueMapListProfilePage[index].type,
                                                                            billBoardType:
                                                                                mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                                    ? 'survey'
                                                                                    : 'billboard',
                                                                            image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                            title: mainVariables.valueMapListProfilePage[index].title,
                                                                            description: "",
                                                                            fromWhere: 'homePage',
                                                                            responseId: '',
                                                                            controller: bottomSheetController,
                                                                            commentId: '',
                                                                            postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            responseFocusList: mainVariables.responseFocusList,
                                                                            responseUserId: '',
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                          ),
                                                                          SizedBox(
                                                                            width: width / 27.4,
                                                                          ),
                                                                          /*bookMarkWidget(
                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                            context: context,
                                            scale: 3.2,
                                            id: mainVariables.valueMapListProfilePage[index].id,
                                            type: 'billboard',
                                            modelSetState: setState,
                                            index: index,
                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                            notUse: false,
                                          ),*/
                                                                          billboardWidgetsMain.billBoardBookMarkWidget(
                                                                              context: context, index: index),
                                                                        ]),
                                                                        Row(
                                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                                          children: [
                                                                            billboardWidgetsMain.translationWidget(
                                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                                type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                    ? "forums"
                                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                        ? "survey"
                                                                                        : 'billboard',
                                                                                index: index,
                                                                                initFunction: getData,
                                                                                context: context,
                                                                                modelSetState: setState,
                                                                                notUse: false,
                                                                                valueMapList: mainVariables.valueMapListProfilePage),
                                                                            SizedBox(
                                                                              width: width / 27.4,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    SizedBox(height: height / 64),
                                                                    Padding(
                                                                      padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                        children: [
                                                                          Expanded(
                                                                            child: Text(
                                                                              mainVariables.valueMapListProfilePage[index].companyName,
                                                                              style: TextStyle(
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xFF017FDB),
                                                                                  fontWeight: FontWeight.bold),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "views",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 0,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "likes",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 1,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "dislikes",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 2,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          Text(
                                                                            " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                            style: TextStyle(fontSize: text.scale(10)),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(height: height / 42.6),
                                                                    Container(
                                                                      padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        children: [
                                                                          CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                                          SizedBox(
                                                                            width: width / 41.1,
                                                                          ),
                                                                          billboardWidgetsMain.getResponseField(
                                                                            context: context,
                                                                            modelSetState: setState,
                                                                            billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            responseId: "",
                                                                            index: index,
                                                                            fromWhere: 'homePage',
                                                                            callFunction: () {},
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            responseCountList: List.generate(
                                                                                mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                  )
                                                : Container(
                                                    padding: const EdgeInsets.all(1.5),
                                                    decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                      BoxShadow(
                                                          color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                                  mainVariables.valueMapListProfilePage[index].believed == false
                                                              ? Colors.black87.withOpacity(0.7)
                                                              : Colors.black26.withOpacity(0.1),
                                                          blurRadius: 4.0,
                                                          spreadRadius: 0.0)
                                                    ]),
                                                    child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                            mainVariables.valueMapListProfilePage[index].believed == false
                                                        ? Center(
                                                            child: Padding(
                                                              padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                              child: Column(
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  SizedBox(
                                                                      width: width / 1.2,
                                                                      child: Text(
                                                                        "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                                        style: TextStyle(
                                                                            fontSize: 14,
                                                                            fontWeight: FontWeight.w500,
                                                                            color: Theme.of(context).colorScheme.background),
                                                                        textAlign: TextAlign.center,
                                                                      )),
                                                                  const SizedBox(
                                                                    height: 15,
                                                                  ),
                                                                  SizedBox(
                                                                    width: width / 3.5,
                                                                    child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                            heightValue: height / 33.76,
                                                                            isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                            billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                            context: context,
                                                                            modelSetState: setState,
                                                                            index: index,
                                                                            background: true,
                                                                          )
                                                                        : const SizedBox(),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          )
                                                        : Column(
                                                            children: [
                                                              GestureDetector(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) =>
                                                                                    const BlogDescriptionPage(fromWhere: "profile")));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) =>
                                                                                    const BytesDescriptionPage(fromWhere: "profile")));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        bool response = await Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        if (response) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];

                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        bool responseBool =
                                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                                        if (!mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? await Navigator.push(context,
                                                                                MaterialPageRoute(builder: (BuildContext context) {
                                                                                return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                );
                                                                              }))
                                                                            : activeStatus == 'active'
                                                                                ? answerStatus
                                                                                    ? await Navigator.push(context,
                                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                                        return AnalyticsPage(
                                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                            activity: false,
                                                                                            navBool: false,
                                                                                            fromWhere: 'similar',
                                                                                            surveyTitle:
                                                                                                mainVariables.valueMapListProfilePage[index].title);
                                                                                      }))
                                                                                    : await Navigator.push(context,
                                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                                        return QuestionnairePage(
                                                                                          surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                          defaultIndex: answeredQuestion,
                                                                                        );
                                                                                      }))
                                                                                : await Navigator.push(context,
                                                                                    MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return AnalyticsPage(
                                                                                      surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                      activity: false,
                                                                                      surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                      navBool: false,
                                                                                      fromWhere: 'similar',
                                                                                    );
                                                                                  }));
                                                                        if (responseBool) {
                                                                          getData();
                                                                        }
                                                                        break;
                                                                      }
                                                                    case "news":
                                                                      {
                                                                        /*bool response = await Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                          return DemoPage(
                                                                            url: "",
                                                                            text: "",
                                                                            image: "",
                                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                                            type: 'news',
                                                                            activity: true,
                                                                            checkMain: false,
                                                                          );
                                                                        }));
                                                                        if (response) {
                                                                          getData();
                                                                        }*/
                                                                        Get.to(const DemoView(), arguments: {
                                                                          "id": mainVariables.valueMapListProfilePage[index].id,
                                                                          "type": "news",
                                                                          "url": ""
                                                                        });
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Stack(
                                                                  children: [
                                                                    Container(
                                                                        height: height / 3.97,
                                                                        decoration: const BoxDecoration(
                                                                          color: Colors.black,
                                                                          borderRadius: BorderRadius.only(
                                                                              topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                                        ),
                                                                        child: CarouselSlider.builder(
                                                                          carouselController: _carController,
                                                                          options: CarouselOptions(
                                                                              enableInfiniteScroll: false,
                                                                              enlargeCenterPage: false,
                                                                              onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                                setState(() {
                                                                                  carouselIndexGlobal = index;
                                                                                });
                                                                              }),
                                                                          itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                                          itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                                            return mainVariables
                                                                                        .valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                                    "image"
                                                                                ? Image.network(
                                                                                    mainVariables
                                                                                        .valueMapListProfilePage[index].files[carouselIndex].file,
                                                                                    fit: BoxFit.fill,
                                                                                  )
                                                                                : mainVariables.valueMapListProfilePage[index].files[carouselIndex]
                                                                                            .type ==
                                                                                        "video"
                                                                                    ? Stack(
                                                                                        alignment: Alignment.center,
                                                                                        children: [
                                                                                          Image.asset(
                                                                                            "lib/Constants/Assets/Settings/coverImage_default.png",
                                                                                            fit: BoxFit.fill,
                                                                                            height: height / 3.97,
                                                                                          ),
                                                                                          Container(
                                                                                              height: 50,
                                                                                              width: 50,
                                                                                              decoration: BoxDecoration(
                                                                                                  shape: BoxShape.circle,
                                                                                                  color: Colors.black26.withOpacity(0.7)),
                                                                                              child: const Icon(
                                                                                                Icons.play_arrow_sharp,
                                                                                                color: Colors.white,
                                                                                                size: 40,
                                                                                              ))
                                                                                        ],
                                                                                      )
                                                                                    : mainVariables.valueMapListProfilePage[index]
                                                                                                .files[carouselIndex].type ==
                                                                                            "document"
                                                                                        ? Stack(
                                                                                            alignment: Alignment.center,
                                                                                            children: [
                                                                                              Image.asset(
                                                                                                "lib/Constants/Assets/Settings/coverImage.png",
                                                                                                fit: BoxFit.fill,
                                                                                                height: height / 3.97,
                                                                                              ),
                                                                                              Container(
                                                                                                height: 50,
                                                                                                width: 50,
                                                                                                decoration: BoxDecoration(
                                                                                                  shape: BoxShape.circle,
                                                                                                  color: Colors.black26.withOpacity(0.3),
                                                                                                ),
                                                                                                child: Center(
                                                                                                  child: Image.asset(
                                                                                                    "lib/Constants/Assets/BillBoard/document.png",
                                                                                                    color: Colors.white,
                                                                                                    height: 25,
                                                                                                    width: 25,
                                                                                                  ),
                                                                                                ),
                                                                                              )
                                                                                            ],
                                                                                          )
                                                                                        : const SizedBox();
                                                                          },
                                                                        )),
                                                                    Positioned(
                                                                      top: 0,
                                                                      left: 0,
                                                                      child: Container(
                                                                        height: height / 18,
                                                                        width: width / 1.06,
                                                                        padding: EdgeInsets.only(
                                                                          left: width / 27.4,
                                                                        ),
                                                                        decoration: BoxDecoration(
                                                                          color: Colors.black12.withOpacity(0.3),
                                                                          borderRadius: const BorderRadius.only(
                                                                            topLeft: Radius.circular(15),
                                                                            topRight: Radius.circular(15),
                                                                          ),
                                                                        ),
                                                                        child: Row(
                                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                                          children: [
                                                                            Row(
                                                                              mainAxisAlignment: MainAxisAlignment.start,
                                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                                              children: [
                                                                                /*bookMarkWidget(
                                                bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                                context: context,
                                                scale: 3,
                                                color: Colors.white,
                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                type: 'billboard',
                                                modelSetState: setState,
                                                index: index,
                                                initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                notUse: false
                                            ),*/
                                                                                billboardWidgetsMain.billBoardBookMarkWidget(
                                                                                    context: context, index: index),
                                                                                const SizedBox(
                                                                                  width: 15,
                                                                                ),
                                                                                billboardWidgetsMain.translationWidget(
                                                                                    id: mainVariables.valueMapListProfilePage[index].id,
                                                                                    type:
                                                                                        mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                            ? "forums"
                                                                                            : mainVariables.valueMapListProfilePage[index].type ==
                                                                                                    "survey"
                                                                                                ? "survey"
                                                                                                : 'billboard',
                                                                                    index: index,
                                                                                    initFunction: getData,
                                                                                    context: context,
                                                                                    modelSetState: setState,
                                                                                    notUse: false,
                                                                                    valueMapList: mainVariables.valueMapListProfilePage),
                                                                              ],
                                                                            ),
                                                                            Row(
                                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                                              children: [
                                                                                userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                                    ? billboardWidgetsMain.getHomeBelieveButton(
                                                                                        heightValue: height / 33.76,
                                                                                        isBelieved: List.generate(
                                                                                            mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) =>
                                                                                                mainVariables.valueMapListProfilePage[ind].believed),
                                                                                        billboardUserid:
                                                                                            mainVariables.valueMapListProfilePage[index].userId,
                                                                                        billboardUserName:
                                                                                            mainVariables.valueMapListProfilePage[index].username,
                                                                                        context: context,
                                                                                        modelSetState: setState,
                                                                                        index: index,
                                                                                        background: true,
                                                                                      )
                                                                                    : const SizedBox(),

                                                                                ///more_vert
                                                                                IconButton(
                                                                                    onPressed: () {
                                                                                      billboardWidgetsMain.bottomSheet(
                                                                                        context1: context,
                                                                                        myself: userIdMain ==
                                                                                            mainVariables.valueMapListProfilePage[index].userId,
                                                                                        billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                        billboardUserId:
                                                                                            mainVariables.valueMapListProfilePage[index].userId,
                                                                                        type: "billboard",
                                                                                        responseId: "",
                                                                                        responseUserId: "",
                                                                                        commentId: "",
                                                                                        commentUserId: "",
                                                                                        callFunction: getData,
                                                                                        contentType:
                                                                                            mainVariables.valueMapListProfilePage[index].type,
                                                                                        modelSetState: setState,
                                                                                        responseDetail: {},
                                                                                        category:
                                                                                            mainVariables.valueMapListProfilePage[index].category,
                                                                                        valueMapList: mainVariables.valueMapListProfilePage,
                                                                                        index: index,
                                                                                      );
                                                                                    },
                                                                                    icon: const Icon(
                                                                                      Icons.more_vert,
                                                                                      color: Colors.white,
                                                                                      size: 25,
                                                                                    ))
                                                                              ],
                                                                            )
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    mainVariables.valueMapListProfilePage[index].files.length > 1
                                                                        ? Positioned(
                                                                            bottom: 75,
                                                                            left: (width / 2) - 35,
                                                                            child: SizedBox(
                                                                              height: 5,
                                                                              child: ListView.builder(
                                                                                  shrinkWrap: true,
                                                                                  scrollDirection: Axis.horizontal,
                                                                                  physics: const NeverScrollableScrollPhysics(),
                                                                                  itemCount:
                                                                                      mainVariables.valueMapListProfilePage[index].files.length,
                                                                                  itemBuilder: (BuildContext context, int index1) {
                                                                                    return Container(
                                                                                      height: 5,
                                                                                      width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                                      margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                                      decoration: BoxDecoration(
                                                                                          borderRadius: BorderRadius.circular(8),
                                                                                          color: carouselIndexGlobal == index1
                                                                                              ? const Color(0XFF0EA102)
                                                                                              : Colors.white),
                                                                                    );
                                                                                  }),
                                                                            ))
                                                                        : const SizedBox(),
                                                                    Positioned(
                                                                      bottom: 0,
                                                                      left: 0,
                                                                      child: Container(
                                                                        height: height / 14,
                                                                        width: width,
                                                                        padding: EdgeInsets.only(
                                                                            top: height / 86.6,
                                                                            bottom: height / 86.6,
                                                                            right: width / 13.7,
                                                                            left: width / 41.1),
                                                                        decoration: BoxDecoration(
                                                                          color: Colors.black12.withOpacity(0.3),
                                                                        ),
                                                                        child: RichText(
                                                                          textAlign: TextAlign.left,
                                                                          text: TextSpan(
                                                                            children: conversationFunctionsMain.spanListBillBoardHome(
                                                                                message:
                                                                                    mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                                        ? mainVariables.valueMapListProfilePage[index].title
                                                                                            .substring(0, 100)
                                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                                context: context,
                                                                                isByte: false),
                                                                          ),
                                                                        ) /*Text(
                                      mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                      maxLines: 2,
                                      style: TextStyle(
                                          fontSize: _text*14,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w500,
                                          fontFamily: "Poppins",
                                          overflow: TextOverflow.ellipsis
                                      ),
                                    )*/
                                                                        ,
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                              Container(
                                                                decoration: BoxDecoration(
                                                                  color: Theme.of(context).colorScheme.background,
                                                                  borderRadius: const BorderRadius.only(
                                                                      bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                                ),
                                                                child: Column(
                                                                  children: [
                                                                    SizedBox(
                                                                      height: height / 86.6,
                                                                    ),
                                                                    Row(
                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        SizedBox(
                                                                          width: width / 41.1,
                                                                        ),
                                                                        billboardWidgetsMain.getProfile(
                                                                            context: context,
                                                                            heightValue: height / 17.32,
                                                                            widthValue: width / 8.22,
                                                                            myself: false,
                                                                            avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                                            isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                                            userId: mainVariables.valueMapListProfilePage[index].userId),
                                                                        SizedBox(
                                                                          width: width / 41.1,
                                                                        ),
                                                                        Expanded(
                                                                          child: Column(
                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                                            children: [
                                                                              InkWell(
                                                                                onTap: () {
                                                                                  Navigator.push(context,
                                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return UserBillBoardProfilePage(
                                                                                            userId:
                                                                                                mainVariables.valueMapListProfilePage[index].userId)
                                                                                        /*UserProfilePage(
                                                      id:valueMapList[index].userId,
                                                      type:'forums',
                                                      index:0)*/
                                                                                        ;
                                                                                  }));
                                                                                },
                                                                                child: Text(
                                                                                  mainVariables.valueMapListProfilePage[index].username
                                                                                      .toString()
                                                                                      .capitalizeFirst!,
                                                                                  style: TextStyle(
                                                                                      fontSize: text.scale(10),
                                                                                      fontWeight: FontWeight.w700,
                                                                                      fontFamily: "Poppins"),
                                                                                ),
                                                                              ),
                                                                              const SizedBox(
                                                                                height: 5,
                                                                              ),
                                                                              Row(
                                                                                children: [
                                                                                  Text(
                                                                                    mainVariables.valueMapListProfilePage[index].createdAt,
                                                                                    style: TextStyle(
                                                                                        fontSize: text.scale(10),
                                                                                        color: const Color(0XFF737373),
                                                                                        fontWeight: FontWeight.w400,
                                                                                        fontFamily: "Poppins"),
                                                                                  ),
                                                                                  const SizedBox(
                                                                                    width: 3,
                                                                                  ),
                                                                                  Text(
                                                                                    " | ",
                                                                                    style: TextStyle(
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0XFF737373),
                                                                                      fontWeight: FontWeight.w400,
                                                                                    ),
                                                                                  ),
                                                                                  const SizedBox(
                                                                                    width: 3,
                                                                                  ),
                                                                                  InkWell(
                                                                                    onTap: () async {
                                                                                      billboardWidgetsMain.believersTabBottomSheet(
                                                                                        context: context,
                                                                                        id: mainVariables.valueMapListProfilePage[index].userId,
                                                                                        isBelieversList: true,
                                                                                      );
                                                                                    },
                                                                                    child: Text(
                                                                                      "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                                      style: TextStyle(
                                                                                          fontSize: text.scale(10),
                                                                                          color: const Color(0XFF737373),
                                                                                          fontWeight: FontWeight.w400,
                                                                                          fontFamily: "Poppins"),
                                                                                    ),
                                                                                  ),
                                                                                ],
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                        billboardWidgetsMain.likeButtonHomeListWidget(
                                                                          likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                          id: mainVariables.valueMapListProfilePage[index].id,
                                                                          index: index,
                                                                          context: context,
                                                                          initFunction: () {},
                                                                          modelSetState: setState,
                                                                          notUse: true,
                                                                          dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                          likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                          dislikeCountList: List.generate(
                                                                              mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                          type: mainVariables.valueMapListProfilePage[index].type,
                                                                          billBoardType: mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                              ? 'survey'
                                                                              : 'billboard',
                                                                          image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                          title: mainVariables.valueMapListProfilePage[index].title,
                                                                          description: "",
                                                                          fromWhere: 'homePage',
                                                                          responseId: '',
                                                                          controller: bottomSheetController,
                                                                          commentId: '',
                                                                          postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                          responseFocusList: mainVariables.responseFocusList,
                                                                          responseUserId: '',
                                                                          valueMapList: mainVariables.valueMapListProfilePage,
                                                                        ),
                                                                        SizedBox(
                                                                          width: width / 41.1,
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    SizedBox(height: height / 64),
                                                                    Padding(
                                                                      padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                        children: [
                                                                          Expanded(
                                                                            child: Text(
                                                                              mainVariables.valueMapListProfilePage[index].companyName,
                                                                              style: TextStyle(
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0xFF017FDB),
                                                                                  fontWeight: FontWeight.bold),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "views",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 0,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "likes",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 1,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          InkWell(
                                                                            onTap: () async {
                                                                              billboardWidgetsMain.getLikeDislikeUsersList(
                                                                                  context: context,
                                                                                  billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  responseId: "",
                                                                                  commentId: "",
                                                                                  billBoardType: "billboard",
                                                                                  action: "dislikes",
                                                                                  likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                                      .toString(),
                                                                                  disLikeCount: mainVariables
                                                                                      .valueMapListProfilePage[index].disLikesCount
                                                                                      .toString(),
                                                                                  index: 2,
                                                                                  viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                                      .toString(),
                                                                                  isViewIncluded: true);
                                                                            },
                                                                            child: Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                          ),
                                                                          Text(
                                                                            " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                            style: TextStyle(fontSize: text.scale(10)),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(height: height / 42.6),
                                                                    Container(
                                                                      padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        children: [
                                                                          CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                                          SizedBox(
                                                                            width: width / 41.1,
                                                                          ),
                                                                          billboardWidgetsMain.getResponseField(
                                                                            context: context,
                                                                            modelSetState: setState,
                                                                            billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            responseId: "",
                                                                            index: index,
                                                                            fromWhere: 'homePage',
                                                                            callFunction: () {},
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            responseCountList: List.generate(
                                                                                mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              )
                                                            ],
                                                          ),
                                                  )
                                            : Container(
                                                padding: const EdgeInsets.all(1.5),
                                                decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                  BoxShadow(
                                                      color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                              mainVariables.valueMapListProfilePage[index].believed == false
                                                          ? Colors.black87.withOpacity(0.7)
                                                          : Colors.black26.withOpacity(0.1),
                                                      blurRadius: 4.0,
                                                      spreadRadius: 0.0)
                                                ]),
                                                child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                        mainVariables.valueMapListProfilePage[index].believed == false
                                                    ? Center(
                                                        child: Padding(
                                                          padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                          child: Column(
                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              SizedBox(
                                                                  width: width / 1.2,
                                                                  child: Text(
                                                                    "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                                    style: TextStyle(
                                                                        fontSize: 14,
                                                                        fontWeight: FontWeight.w500,
                                                                        color: Theme.of(context).colorScheme.background),
                                                                    textAlign: TextAlign.center,
                                                                  )),
                                                              const SizedBox(
                                                                height: 15,
                                                              ),
                                                              SizedBox(
                                                                width: width / 3.5,
                                                                child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                    ? billboardWidgetsMain.getHomeBelieveButton(
                                                                        heightValue: height / 33.76,
                                                                        isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                        billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                        billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        index: index,
                                                                        background: true,
                                                                      )
                                                                    : const SizedBox(),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      )
                                                    : Column(
                                                        children: [
                                                          GestureDetector(
                                                            onTap: () async {
                                                              switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                case "blog":
                                                                  {
                                                                    mainVariables.selectedBillboardIdMain.value =
                                                                        mainVariables.valueMapListProfilePage[index].id;
                                                                    bool response = await Navigator.push(
                                                                        context,
                                                                        MaterialPageRoute(
                                                                            builder: (BuildContext context) =>
                                                                                const BlogDescriptionPage(fromWhere: "profile")));
                                                                    if (response) {
                                                                      getData();
                                                                    }
                                                                    break;
                                                                  }
                                                                case "byte":
                                                                  {
                                                                    mainVariables.selectedBillboardIdMain.value =
                                                                        mainVariables.valueMapListProfilePage[index].id;
                                                                    bool response = await Navigator.push(
                                                                        context,
                                                                        MaterialPageRoute(
                                                                            builder: (BuildContext context) =>
                                                                                const BytesDescriptionPage(fromWhere: "profile")));
                                                                    if (response) {
                                                                      getData();
                                                                    }
                                                                    break;
                                                                  }
                                                                case "forums":
                                                                  {
                                                                    bool response = await Navigator.push(
                                                                        context,
                                                                        MaterialPageRoute(
                                                                            builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                comeFrom: "billBoardHome",
                                                                                forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                    if (response) {
                                                                      getData();
                                                                    }
                                                                    break;
                                                                  }
                                                                case "survey":
                                                                  {
                                                                    String activeStatus = "";
                                                                    bool answerStatus = false;
                                                                    int answeredQuestion = 0;
                                                                    SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                    String mainUserId = prefs.getString('newUserId') ?? "";
                                                                    String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                    var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                    var response = await http.post(url, headers: {
                                                                      'Authorization': mainUserToken
                                                                    }, body: {
                                                                      'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                    });
                                                                    var responseData = json.decode(response.body);
                                                                    if (responseData["status"]) {
                                                                      activeStatus = responseData["response"]["status"];
                                                                      if (activeStatus == "active") {
                                                                        var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          answerStatus = responseData["response"][0]["final_question"];
                                                                          answeredQuestion = responseData["response"][0]["question_number"];
                                                                        } else {
                                                                          answerStatus = false;
                                                                          answeredQuestion = 0;
                                                                        }
                                                                      }
                                                                    }
                                                                    bool responseBool =
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                                    if (!mounted) {
                                                                      return;
                                                                    }
                                                                    mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                        ? await Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                            return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                            );
                                                                          }))
                                                                        : activeStatus == 'active'
                                                                            ? answerStatus
                                                                                ? await Navigator.push(context,
                                                                                    MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return AnalyticsPage(
                                                                                        surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                        activity: false,
                                                                                        navBool: false,
                                                                                        fromWhere: 'similar',
                                                                                        surveyTitle:
                                                                                            mainVariables.valueMapListProfilePage[index].title);
                                                                                  }))
                                                                                : await Navigator.push(context,
                                                                                    MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return QuestionnairePage(
                                                                                      surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                      defaultIndex: answeredQuestion,
                                                                                    );
                                                                                  }))
                                                                            : await Navigator.push(context,
                                                                                MaterialPageRoute(builder: (BuildContext context) {
                                                                                return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                );
                                                                              }));
                                                                    if (responseBool) {
                                                                      getData();
                                                                    }
                                                                    break;
                                                                  }
                                                                case "news":
                                                                  {
                                                                    /* bool response = await Navigator.push(context,
                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                      return DemoPage(
                                                                        url: "",
                                                                        text: "",
                                                                        image: "",
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: 'news',
                                                                        activity: true,
                                                                        checkMain: false,
                                                                      );
                                                                    }));
                                                                    if (response) {
                                                                      getData();
                                                                    }*/
                                                                    Get.to(const DemoView(), arguments: {
                                                                      "id": mainVariables.valueMapListProfilePage[index].id,
                                                                      "type": "news",
                                                                      "url": ""
                                                                    });
                                                                    break;
                                                                  }
                                                                default:
                                                                  {
                                                                    break;
                                                                  }
                                                              }
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                Container(
                                                                  height: height / 3.97,
                                                                  decoration: BoxDecoration(
                                                                      borderRadius: const BorderRadius.only(
                                                                          topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                                      gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                          ? const RadialGradient(
                                                                              colors: [
                                                                                Color.fromRGBO(23, 25, 27, 0.90),
                                                                                Color.fromRGBO(85, 85, 85, 0.00)
                                                                              ],
                                                                              radius: 15.0,
                                                                            )
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                              ? const RadialGradient(
                                                                                  colors: [
                                                                                    Color.fromRGBO(0, 92, 175, 0.90),
                                                                                    Color.fromRGBO(13, 155, 1, 0.00)
                                                                                  ],
                                                                                  radius: 15.0,
                                                                                )
                                                                              : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                  ? const RadialGradient(
                                                                                      colors: [
                                                                                        Color.fromRGBO(10, 122, 1, 0.90),
                                                                                        Color.fromRGBO(13, 155, 1, 0.00)
                                                                                      ],
                                                                                      radius: 15.0,
                                                                                    )
                                                                                  : const RadialGradient(
                                                                                      colors: [
                                                                                        Color.fromRGBO(255, 255, 255, 0),
                                                                                        Color.fromRGBO(255, 255, 255, 1)
                                                                                      ],
                                                                                      radius: 15.0,
                                                                                    ),
                                                                      image: DecorationImage(
                                                                          image: NetworkImage(
                                                                            mainVariables.valueMapListProfilePage[index].type == "news"
                                                                                ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                                : "",
                                                                          ),
                                                                          fit: BoxFit.fill)),
                                                                  child: Center(
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? mainVariables.valueMapListProfilePage[index].type
                                                                              .toString()
                                                                              .capitalizeFirst!
                                                                              .substring(
                                                                                  0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                          : mainVariables.valueMapListProfilePage[index].type
                                                                              .toString()
                                                                              .capitalizeFirst!,
                                                                      style: TextStyle(
                                                                          fontSize: text.scale(40),
                                                                          fontWeight: FontWeight.w900,
                                                                          color: const Color(0XFFFFFFFF)),
                                                                    ),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  left: 0,
                                                                  child: Container(
                                                                    height: height / 18,
                                                                    width: width / 1.06,
                                                                    padding: EdgeInsets.only(
                                                                      left: width / 27.4,
                                                                    ),
                                                                    decoration: BoxDecoration(
                                                                      color: Colors.black12.withOpacity(0.3),
                                                                      borderRadius: const BorderRadius.only(
                                                                        topLeft: Radius.circular(15),
                                                                        topRight: Radius.circular(15),
                                                                      ),
                                                                    ),
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                                      children: [
                                                                        Row(
                                                                          mainAxisAlignment: MainAxisAlignment.start,
                                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                                          children: [
                                                                            /*bookMarkWidget(
                                                bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                                context: context,
                                                scale: 3,
                                                color: Colors.white,
                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                type: 'billboard',
                                                modelSetState: setState,
                                                index: index,
                                                initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                notUse: false
                                            ),*/
                                                                            billboardWidgetsMain.billBoardBookMarkWidget(
                                                                                context: context, index: index),
                                                                            const SizedBox(
                                                                              width: 15,
                                                                            ),
                                                                            billboardWidgetsMain.translationWidget(
                                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                                type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                    ? "forums"
                                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                        ? "survey"
                                                                                        : 'billboard',
                                                                                index: index,
                                                                                initFunction: getData,
                                                                                context: context,
                                                                                modelSetState: setState,
                                                                                notUse: false,
                                                                                valueMapList: mainVariables.valueMapListProfilePage),
                                                                          ],
                                                                        ),
                                                                        Row(
                                                                          mainAxisAlignment: MainAxisAlignment.end,
                                                                          children: [
                                                                            userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                                ? billboardWidgetsMain.getHomeBelieveButton(
                                                                                    heightValue: height / 33.76,
                                                                                    isBelieved: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                                    billboardUserid:
                                                                                        mainVariables.valueMapListProfilePage[index].userId,
                                                                                    billboardUserName:
                                                                                        mainVariables.valueMapListProfilePage[index].username,
                                                                                    context: context,
                                                                                    modelSetState: setState,
                                                                                    index: index,
                                                                                    background: true,
                                                                                  )
                                                                                : const SizedBox(),

                                                                            ///more_vert
                                                                            IconButton(
                                                                                onPressed: () {
                                                                                  billboardWidgetsMain.bottomSheet(
                                                                                    context1: context,
                                                                                    myself: userIdMain ==
                                                                                        mainVariables.valueMapListProfilePage[index].userId,
                                                                                    billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                                    billboardUserId:
                                                                                        mainVariables.valueMapListProfilePage[index].userId,
                                                                                    type: "billboard",
                                                                                    responseId: "",
                                                                                    responseUserId: "",
                                                                                    commentId: "",
                                                                                    commentUserId: "",
                                                                                    callFunction: getData,
                                                                                    contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                                    modelSetState: setState,
                                                                                    responseDetail: {},
                                                                                    category: mainVariables.valueMapListProfilePage[index].category,
                                                                                    valueMapList: mainVariables.valueMapListProfilePage,
                                                                                    index: index,
                                                                                  );
                                                                                },
                                                                                icon: const Icon(
                                                                                  Icons.more_vert,
                                                                                  color: Colors.white,
                                                                                  size: 25,
                                                                                ))
                                                                          ],
                                                                        )
                                                                      ],
                                                                    ),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  bottom: 0,
                                                                  left: 0,
                                                                  child: Container(
                                                                    height: height / 14,
                                                                    width: width,
                                                                    padding: EdgeInsets.only(
                                                                        top: height / 86.6,
                                                                        bottom: height / 86.6,
                                                                        right: width / 13.7,
                                                                        left: width / 41.1),
                                                                    decoration: BoxDecoration(
                                                                      color: Colors.black12.withOpacity(0.3),
                                                                    ),
                                                                    child: RichText(
                                                                      textAlign: TextAlign.left,
                                                                      text: TextSpan(
                                                                        children: conversationFunctionsMain.spanListBillBoardHome(
                                                                            message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                                ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                                : mainVariables.valueMapListProfilePage[index].title,
                                                                            context: context,
                                                                            isByte: false),
                                                                      ),
                                                                    ) /*Text(
                                      mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                      maxLines: 2,
                                      style: TextStyle(
                                          fontSize: _text*14,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w500,
                                          fontFamily: "Poppins",
                                          overflow: TextOverflow.ellipsis
                                      ),
                                    )*/
                                                                    ,
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          Container(
                                                            decoration: BoxDecoration(
                                                              color: Theme.of(context).colorScheme.background,
                                                              borderRadius: const BorderRadius.only(
                                                                  bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                            ),
                                                            child: Column(
                                                              children: [
                                                                SizedBox(
                                                                  height: height / 86.6,
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    SizedBox(
                                                                      width: width / 41.1,
                                                                    ),
                                                                    billboardWidgetsMain.getProfile(
                                                                        context: context,
                                                                        heightValue: height / 17.32,
                                                                        widthValue: width / 8.22,
                                                                        myself: false,
                                                                        avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                                        isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                                        userId: mainVariables.valueMapListProfilePage[index].userId),
                                                                    SizedBox(
                                                                      width: width / 41.1,
                                                                    ),
                                                                    Expanded(
                                                                      child: Column(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        mainAxisAlignment: MainAxisAlignment.center,
                                                                        children: [
                                                                          InkWell(
                                                                            onTap: () {
                                                                              Navigator.push(context,
                                                                                  MaterialPageRoute(builder: (BuildContext context) {
                                                                                return UserBillBoardProfilePage(
                                                                                        userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                              }));
                                                                            },
                                                                            child: Text(
                                                                              mainVariables.valueMapListProfilePage[index].username
                                                                                  .toString()
                                                                                  .capitalizeFirst!,
                                                                              style: TextStyle(
                                                                                  fontSize: text.scale(14),
                                                                                  fontWeight: FontWeight.w700,
                                                                                  fontFamily: "Poppins"),
                                                                            ),
                                                                          ),
                                                                          const SizedBox(
                                                                            height: 5,
                                                                          ),
                                                                          Row(
                                                                            children: [
                                                                              Text(
                                                                                mainVariables.valueMapListProfilePage[index].createdAt,
                                                                                style: TextStyle(
                                                                                    fontSize: text.scale(10),
                                                                                    color: const Color(0XFF737373),
                                                                                    fontWeight: FontWeight.w400,
                                                                                    fontFamily: "Poppins"),
                                                                              ),
                                                                              const SizedBox(
                                                                                width: 3,
                                                                              ),
                                                                              Text(
                                                                                " | ",
                                                                                style: TextStyle(
                                                                                  fontSize: text.scale(10),
                                                                                  color: const Color(0XFF737373),
                                                                                  fontWeight: FontWeight.w400,
                                                                                ),
                                                                              ),
                                                                              const SizedBox(
                                                                                width: 3,
                                                                              ),
                                                                              InkWell(
                                                                                onTap: () async {
                                                                                  billboardWidgetsMain.believersTabBottomSheet(
                                                                                    context: context,
                                                                                    id: mainVariables.valueMapListProfilePage[index].userId,
                                                                                    isBelieversList: true,
                                                                                  );
                                                                                },
                                                                                child: Text(
                                                                                  "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                                  style: TextStyle(
                                                                                      fontSize: text.scale(10),
                                                                                      color: const Color(0XFF737373),
                                                                                      fontWeight: FontWeight.w400,
                                                                                      fontFamily: "Poppins"),
                                                                                ),
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    billboardWidgetsMain.likeButtonHomeListWidget(
                                                                      likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                          (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      index: index,
                                                                      context: context,
                                                                      initFunction: () {},
                                                                      modelSetState: setState,
                                                                      notUse: true,
                                                                      dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                          (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                      likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                          (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                      dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                          (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                      type: mainVariables.valueMapListProfilePage[index].type,
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                          ? 'survey'
                                                                          : 'billboard',
                                                                      image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                      title: mainVariables.valueMapListProfilePage[index].title,
                                                                      description: "",
                                                                      fromWhere: 'homePage',
                                                                      responseId: '',
                                                                      controller: bottomSheetController,
                                                                      commentId: '',
                                                                      postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                      responseUserId: '',
                                                                      responseFocusList: mainVariables.responseFocusList,
                                                                      valueMapList: mainVariables.valueMapListProfilePage,
                                                                    ),
                                                                    SizedBox(
                                                                      width: width / 41.1,
                                                                    ),
                                                                  ],
                                                                ),
                                                                SizedBox(height: height / 64),
                                                                Padding(
                                                                  padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                  child: Row(
                                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                    children: [
                                                                      Expanded(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].companyName,
                                                                          style: TextStyle(
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0xFF017FDB),
                                                                              fontWeight: FontWeight.bold),
                                                                        ),
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                                              context: context,
                                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                              responseId: "",
                                                                              commentId: "",
                                                                              billBoardType:
                                                                                  mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                      ? "forums"
                                                                                      : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                          ? "survey"
                                                                                          : "billboard",
                                                                              action: "views",
                                                                              likeCount:
                                                                                  mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                              disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                                  .toString(),
                                                                              index: 0,
                                                                              viewCount:
                                                                                  mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                              isViewIncluded: true);
                                                                        },
                                                                        child: Text(
                                                                          " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                          style: TextStyle(fontSize: text.scale(10)),
                                                                        ),
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                                              context: context,
                                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                              responseId: "",
                                                                              commentId: "",
                                                                              billBoardType:
                                                                                  mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                      ? "forums"
                                                                                      : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                          ? "survey"
                                                                                          : "billboard",
                                                                              action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                  ? "liked"
                                                                                  : "likes",
                                                                              likeCount:
                                                                                  mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                              disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                                  .toString(),
                                                                              index: 1,
                                                                              viewCount:
                                                                                  mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                              isViewIncluded: true);
                                                                        },
                                                                        child: Text(
                                                                          " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                          style: TextStyle(fontSize: text.scale(10)),
                                                                        ),
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                                              context: context,
                                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                              responseId: "",
                                                                              commentId: "",
                                                                              billBoardType:
                                                                                  mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                      ? "forums"
                                                                                      : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                                          ? "survey"
                                                                                          : "billboard",
                                                                              action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                                  ? "disliked"
                                                                                  : "dislikes",
                                                                              likeCount:
                                                                                  mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                              disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                                  .toString(),
                                                                              index: 2,
                                                                              viewCount:
                                                                                  mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                              isViewIncluded: true);
                                                                        },
                                                                        child: Text(
                                                                          " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                          style: TextStyle(fontSize: text.scale(10)),
                                                                        ),
                                                                      ),
                                                                      mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                                          ? const SizedBox()
                                                                          : Text(
                                                                              " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                              style: TextStyle(fontSize: text.scale(10)),
                                                                            ),
                                                                    ],
                                                                  ),
                                                                ),
                                                                SizedBox(height: height / 42.6),
                                                                mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                                        mainVariables.valueMapListProfilePage[index].type == 'news'
                                                                    ? const SizedBox()
                                                                    : Container(
                                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                                        child: Row(
                                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          children: [
                                                                            CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                                            SizedBox(
                                                                              width: width / 41.1,
                                                                            ),
                                                                            billboardWidgetsMain.getResponseField(
                                                                              context: context,
                                                                              modelSetState: setState,
                                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                              responseId: "",
                                                                              index: index,
                                                                              fromWhere: 'homePage',
                                                                              callFunction: () {},
                                                                              contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                              category: mainVariables.valueMapListProfilePage[index].category,
                                                                              responseCountList: List.generate(
                                                                                  mainVariables.valueMapListProfilePage.length,
                                                                                  (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                              ],
                                                            ),
                                                          )
                                                        ],
                                                      ),
                                              ),
                                        SizedBox(
                                          height: height / 33.83,
                                        )
                                      ],
                                    ),
                                  );
                                }),
                          )),
                  )
                : Center(
                    child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
                  )
          ])
        : Center(
            child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
          );
  }
}

class ChartsTabPage extends StatefulWidget {
  const ChartsTabPage({Key? key}) : super(key: key);

  @override
  State<ChartsTabPage> createState() => _ChartsTabPageState();
}

class _ChartsTabPageState extends State<ChartsTabPage> {
  bool loading = false;
  bool loading2 = false;
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> gridChartList = [
    {
      "image": "lib/Constants/Assets/chartImages/Line Charts.png",
      "title": "Line Charts",
      "id": "2",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Compare_new.png",
      "title": "Compare",
      "id": "-1",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Candle.png",
      "title": "Candle",
      "id": "1",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Bar.png",
      "title": "Bar Chart",
      "id": "0",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Renko.png",
      "title": "Renko",
      "id": "7",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Area.png",
      "title": "Area",
      "id": "3",
    },
    {
      "image": "lib/Constants/Assets/chartImages/column.jpg",
      "title": "Column",
      "id": "4",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Baseline.png",
      "title": "Baseline Chart",
      "id": "5",
    },
    {
      "image": "lib/Constants/Assets/chartImages/High_low.png",
      "title": "High_Low",
      "id": "6",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Kagi.png",
      "title": "Kagi",
      "id": "8",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Point _ Figure.png",
      "title": "Point & Figure",
      "id": "9",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Line break.png",
      "title": "Line Break",
      "id": "10",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Heikin Ashi.png",
      "title": "Heikin Ashi",
      "id": "11",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Hollow candle.png",
      "title": "Hollow Candles",
      "id": "12",
    },
    {
      "image": "lib/Constants/Assets/chartImages/Request for a  new chart.png",
      "title": "Request for a new chart",
      "id": "14",
    }
  ];
  List<Map<String, dynamic>> gridSearchList = [];
  String tvSym1 = "";
  String tvSym2 = "";
  String secondaryId = "";

  Future<void> filterSearchResults({required String query}) async {
    List<Map<String, dynamic>> dummySearchList = [];
    dummySearchList.addAll(gridChartList);
    if (query.isNotEmpty) {
      List<Map<String, dynamic>> dummyListData = [];
      for (var item in dummySearchList) {
        if (item["title"].toLowerCase().contains(query.toLowerCase())) {
          dummyListData.add(item);
        }
      }
      setState(() {
        gridSearchList.clear();
        gridSearchList.addAll(dummyListData);
        loading2 = true;
      });
      return;
    } else {
      setState(() {
        gridSearchList.clear();
        gridSearchList.addAll(gridChartList);
        loading2 = true;
      });
    }
  }

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    getData();
    super.initState();
  }

  getData() async {
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 1;
      mainVariables.selectedUserControllerIndex.value = 1;
    });
    secondaryId = mainVariables.overViewMain!.value.response.category == "stocks"
        ? "640b2727f243fbed68213f0d"
        : mainVariables.overViewMain!.value.response.category == "crypto"
            ? "62679305571e2b2b72048df2"
            : mainVariables.overViewMain!.value.response.category == "commodity"
                ? "640b146ff243fbed68205834"
                : mainVariables.overViewMain!.value.response.category == "forex"
                    ? "62679b3b41b7862c69a57a1d"
                    : "";
    filterSearchResults(query: "");
    setState(() {
      loading = true;
      loading2 = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return loading
        ? Container(
            margin: const EdgeInsets.symmetric(horizontal: 15),
            child: Column(
              children: [
                SizedBox(
                  height: height / 19.33,
                  child: TextFormField(
                    cursorColor: Colors.green,
                    onChanged: (value) async {
                      setState(() {
                        loading2 = false;
                      });
                      await filterSearchResults(query: value);
                    },
                    style: Theme.of(context).textTheme.bodyMedium,
                    controller: _searchController,
                    keyboardType: TextInputType.emailAddress,
                    decoration: InputDecoration(
                      contentPadding: const EdgeInsets.only(left: 15),
                      fillColor: Theme.of(context).colorScheme.tertiary,
                      filled: true,
                      prefixIcon: Padding(
                          padding: const EdgeInsets.all(10.0), child: SvgPicture.asset("lib/Constants/Assets/SMLogos/HomeScreen/Icon Search.svg")),
                      suffixIcon: _searchController.text.isNotEmpty
                          ? GestureDetector(
                              onTap: () async {
                                _searchController.clear();
                                await filterSearchResults(query: _searchController.text);
                                FocusManager.instance.primaryFocus?.unfocus();
                              },
                              child: Icon(Icons.cancel, size: 22, color: Theme.of(context).colorScheme.onPrimary),
                            )
                          : const SizedBox(),
                      focusedErrorBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: Theme.of(context).colorScheme.background, width: 2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: Theme.of(context).colorScheme.background, width: 2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: Theme.of(context).colorScheme.background, width: 2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      disabledBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: Theme.of(context).colorScheme.background, width: 2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      border:OutlineInputBorder(
                        borderSide: BorderSide(color: Theme.of(context).colorScheme.background, width: 2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      hintStyle: Theme.of(context).textTheme.bodyMedium!.copyWith(color: const Color(0XFFA5A5A5)),
                      hintText: 'Search here',
                      errorStyle: Theme.of(context).textTheme.labelSmall,
                    ),
                  ),
                ),
                SizedBox(
                  height: height / 50.75,
                ),
                loading2
                    ? Expanded(
                        child: gridSearchList.isEmpty
                            ? Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 10.71),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    SizedBox(height: 150, width: 150, child: SvgPicture.asset("lib/Constants/Assets/SMLogos/add.svg")),
                                    RichText(
                                      textAlign: TextAlign.left,
                                      text: TextSpan(
                                        children: [
                                          TextSpan(
                                              text: 'Not finding the chart you need?',
                                              style: TextStyle(fontFamily: "Poppins", color: Colors.grey, fontSize: text.scale(14))),
                                          TextSpan(
                                              text: ' Request for a new chart in',
                                              style: TextStyle(fontFamily: "Poppins", color: Colors.grey, fontSize: text.scale(14))),
                                          TextSpan(
                                              text: ' Feature Request',
                                              style: TextStyle(
                                                  fontFamily: "Poppins",
                                                  color: const Color(0XFF0EA102),
                                                  fontWeight: FontWeight.w700,
                                                  fontSize: text.scale(14)),
                                              recognizer: TapGestureRecognizer()
                                                ..onTap = () {
                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return const FeatureRequestPage();
                                                  }));
                                                }),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              )
                            : GridView.builder(
                                scrollDirection: Axis.vertical,
                                physics: const ScrollPhysics(),
                                itemCount: gridSearchList.length,
                                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                  mainAxisSpacing: height / 31.23,
                                  crossAxisSpacing: width / 15,
                                  crossAxisCount: 2,
                                  mainAxisExtent: height / 5.34,
                                ),
                                itemBuilder: (context, index) {
                                  return InkWell(
                                    onTap: () async {
                                      int chartValue = int.parse(gridSearchList[index]["id"]);
                                      if (index == 14) {
                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) => const FeatureRequestPage()));
                                      } else {
                                        if (chartValue > 6 && mainVariables.overViewMain!.value.response.category.toLowerCase() == "stocks") {
                                          if (mainVariables.overViewMain!.value.response.exchange == "NSE" ||
                                              mainVariables.overViewMain!.value.response.exchange == "INDX") {
                                            if (mainVariables.overViewMain!.value.response.tvSymbol != "") {
                                              List parts = mainVariables.overViewMain!.value.response.tvSymbol.split(":");
                                              tvSym1 = parts[0].trim();
                                              tvSym2 = parts[1].trim();
                                              String webLink =
                                                  "https://www.tradingview.com/chart/?symbol=$tvSym1%3A$tvSym2&utm_source=www.tradingview.com&utm_medium=widget&utm_campaign=chart&utm_term=$tvSym1%3A$tvSym2";
                                              Navigator.push(context, MaterialPageRoute(builder: (context) {
                                                return SuperChartsPage(url: webLink);
                                              }));
                                            } else {
                                              tvSym1 = "MCX";
                                              tvSym2 = "MENTHAOIL1%21";
                                            }
                                          } else {
                                            Navigator.push(
                                                context,
                                                MaterialPageRoute(
                                                    builder: (BuildContext context) => FinalChartPage(
                                                          tickerId: mainVariables.selectedTickerId.value,
                                                          secTickerId: secondaryId,
                                                          category: mainVariables.overViewMain!.value.response.category.toLowerCase(),
                                                          exchange: mainVariables.overViewMain!.value.response.exchange,
                                                          chartType: gridSearchList[index]["id"],
                                                          index: 0,
                                                        )));
                                          }
                                        } else if (chartValue > 6 &&
                                            mainVariables.overViewMain!.value.response.category.toLowerCase() == "commodity") {
                                          if (mainVariables.overViewMain!.value.response.tvSymbol != "") {
                                            List parts = mainVariables.overViewMain!.value.response.tvSymbol.split(":");
                                            tvSym1 = parts[0].trim();
                                            tvSym2 = parts[1].trim();
                                            String webLink =
                                                "https://www.tradingview.com/chart/?symbol=$tvSym1%3A$tvSym2&utm_source=www.tradingview.com&utm_medium=widget&utm_campaign=chart&utm_term=$tvSym1%3A$tvSym2";
                                            Navigator.push(context, MaterialPageRoute(builder: (context) {
                                              return SuperChartsPage(url: webLink);
                                            }));
                                          } else {
                                            tvSym1 = "MCX";
                                            tvSym2 = "MENTHAOIL1%21";
                                          }
                                        } else if (chartValue > 6) {
                                          if (mainVariables.overViewMain!.value.response.category.toLowerCase() == "commodity") {
                                            if (mainVariables.overViewMain!.value.response.tvSymbol != "") {
                                              String webLink =
                                                  "https://www.tradingview.com/chart/?symbol=$tvSym1%3A$tvSym2&utm_source=www.tradingview.com&utm_medium=widget&utm_campaign=chart&utm_term=$tvSym1%3A$tvSym2";
                                              Navigator.push(context, MaterialPageRoute(builder: (context) {
                                                return SuperChartsPage(url: webLink);
                                              }));
                                            } else {
                                              String webLink =
                                                  "https://www.tradingview.com/chart/?symbol=$tvSym1%3A$tvSym2&utm_source=www.tradingview.com&utm_medium=widget&utm_campaign=chart&utm_term=$tvSym1%3A$tvSym2";
                                              Navigator.push(context, MaterialPageRoute(builder: (context) {
                                                return SuperChartsPage(url: webLink);
                                              }));
                                            }
                                          } else {
                                            Navigator.push(
                                                context,
                                                MaterialPageRoute(
                                                    builder: (BuildContext context) => FinalChartPage(
                                                          tickerId: mainVariables.selectedTickerId.value,
                                                          secTickerId: secondaryId,
                                                          category: mainVariables.overViewMain!.value.response.category.toLowerCase(),
                                                          exchange: mainVariables.overViewMain!.value.response.exchange,
                                                          chartType: gridSearchList[index]["id"],
                                                          index: 0,
                                                        )));
                                          }
                                        } else {
                                          Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                  builder: (BuildContext context) => FinalChartPage(
                                                        tickerId: mainVariables.selectedTickerId.value,
                                                        secTickerId: secondaryId,
                                                        category: mainVariables.overViewMain!.value.response.category.toLowerCase(),
                                                        exchange: mainVariables.overViewMain!.value.response.exchange,
                                                        chartType: gridSearchList[index]["id"],
                                                        index: 0,
                                                      )));
                                        }
                                      }
                                    },
                                    child: Container(
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(20),
                                        image: DecorationImage(
                                          image: AssetImage(gridSearchList[index]['image']),
                                          fit: BoxFit.fill,
                                        ),
                                      ),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.end,
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Container(
                                            width: width,
                                            height: height / 13.31,
                                            margin: const EdgeInsets.all(5),
                                            decoration: BoxDecoration(
                                              color: Colors.black12.withOpacity(0.3),
                                              borderRadius:
                                                  const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                            ),
                                            child: Center(
                                              child: Container(
                                                margin: const EdgeInsets.symmetric(horizontal: 15),
                                                child: Text(
                                                  gridSearchList[index]['title'],
                                                  style: TextStyle(color: Colors.white, fontSize: text.scale(14), fontWeight: FontWeight.w500),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                }),
                      )
                    : Center(
                        child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: 100, width: 100,),
                      ),
              ],
            ),
          )
        : Center(
            child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
          );
  }
}

class BuzzTabPage extends StatefulWidget {
  const BuzzTabPage({Key? key}) : super(key: key);

  @override
  State<BuzzTabPage> createState() => _BuzzTabPageState();
}

class _BuzzTabPageState extends State<BuzzTabPage> {
  List<String> skipLimits = ["0", "0", "0", "0"];
  TextEditingController bottomSheetController = TextEditingController();
  bool loader = false;

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 2;
    });
    getAllData();
    super.initState();
  }

  getAllData() async {
    await billBoardApiMain.getAllCategoriesData(
        category: mainVariables.overViewMain!.value.response.category, tickerId: mainVariables.selectedTickerId.value, skipLimit: skipLimits);
    setState(() {
      loader = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return loader
        ? Obx(() => mainVariables.newsDataMain!.value.response.isEmpty &&
                mainVariables.newsDataMain!.value.response.isEmpty &&
                mainVariables.surveyDataMain!.value.response.isEmpty &&
                mainVariables.forumDataMain!.value.response.isEmpty
            ? Container(
                margin: EdgeInsets.symmetric(horizontal: width / 24.17),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    SizedBox(
                      height: height / 57.73,
                    ),
                    SvgPicture.asset(
                      "lib/Constants/Assets/BillBoard/businessProfile/emptyList.svg",
                      height: height / 3.464,
                      width: width / 1.49,
                      fit: BoxFit.fill,
                    ),
                    SizedBox(
                      height: height / 57.73,
                    ),
                    SizedBox(
                      width: width / 1.2,
                      child: RichText(
                        textAlign: TextAlign.center,
                        text: TextSpan(
                          children: [
                            TextSpan(
                                text: 'No contents found ',
                                style: TextStyle(
                                    fontFamily: "Poppins", color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.3), fontSize: text.scale(14), fontWeight: FontWeight.w600)),
                          ],
                        ),
                      ),
                    )
                  ],
                ),
              )
            : SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      height: height / 24,
                      padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                      child: Row(
                        children: [
                          Expanded(
                            child: billboardWidgetsMain.getPopularSearchField(
                              context: context,
                              modelSetState: setState,
                              forWhat: 'business',
                            ),
                          ),
                          Stack(
                            alignment: Alignment.topRight,
                            children: [
                              mainVariables.popularSearchControllerMain.value.text.isEmpty
                                  ? IconButton(
                                      onPressed: () {
                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                          return const ProfileFilterPage();
                                        }));
                                      },
                                      icon: Image.asset(
                                        'lib/Constants/Assets/BillBoard/Filter.png',
                                        scale: 5,
                                      ))
                                  : const SizedBox(),
                              mainVariables.sortTypeMain.isEmpty && mainVariables.sentimentTypeMain.value == ""
                                  ? const SizedBox()
                                  : Padding(
                                      padding: EdgeInsets.only(right: width / 108.25),
                                      child: Container(
                                          height: height / 173.2,
                                          width: width / 82.2,
                                          decoration: const BoxDecoration(color: Colors.green, shape: BoxShape.circle)),
                                    ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    mainVariables.newsDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.newsDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Padding(
                            padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  "News",
                                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18), color: const Color(0XFF3F3F3F)),
                                ),
                                InkWell(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return NewsMainPage(
                                          fromCompare: true,
                                          text: mainVariables.overViewMain!.value.response.category,
                                          tickerId: mainVariables.selectedTickerId.value,
                                          tickerName: mainVariables.overViewMain!.value.response.name,
                                          homeSearch: true,
                                        );
                                      }));
                                    },
                                    child: Text(
                                      "See all",
                                      style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12), color: const Color(0XFFAAAAAA)),
                                    )),
                              ],
                            ),
                          ),
                    mainVariables.newsDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.newsDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 3.14,
                            child: ListView.builder(
                                shrinkWrap: true,
                                padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                                physics: const ScrollPhysics(),
                                scrollDirection: Axis.horizontal,
                                itemCount: mainVariables.allCategoriesIdListMain[0].length,
                                itemBuilder: (BuildContext context, int indexNews) {
                                  return Container(
                                    width: width / 1.6444,
                                    margin: EdgeInsets.only(right: width / 41.1, top: 5, bottom: 5),
                                    decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), color: Colors.white, boxShadow: [
                                      BoxShadow(
                                          color: Colors.black26.withOpacity(0.1), offset: const Offset(0.0, 0.0), blurRadius: 1.0, spreadRadius: 1.0)
                                    ]),
                                    clipBehavior: Clip.hardEdge,
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        GestureDetector(
                                          onTap: () {
                                            /*Navigator.push(context, MaterialPageRoute(builder: (context) {
                                              return DemoPage(
                                                url: mainVariables.newsDataMain!.value.response[indexNews].newsUrl,
                                                text: mainVariables.newsDataMain!.value.response[indexNews].title,
                                                image: "",
                                                id: mainVariables.newsDataMain!.value.response[indexNews].id,
                                                type: 'news',
                                                activity: true,
                                                checkMain: false,
                                              );
                                            }));*/
                                            Get.to(const DemoView(), arguments: {
                                              "id": mainVariables.newsDataMain!.value.response[indexNews].id,
                                              "type": "news",
                                              "url": mainVariables.newsDataMain!.value.response[indexNews].newsUrl
                                            });
                                          },
                                          child: Container(
                                            height: height / 5.41,
                                            width: width / 1.644,
                                            decoration: BoxDecoration(
                                                image: DecorationImage(
                                                    image: NetworkImage(mainVariables.newsDataMain!.value.response[indexNews].imageUrl),
                                                    fit: BoxFit.fill)),
                                          ),
                                        ),
                                        Expanded(
                                          child: Padding(
                                            padding: const EdgeInsets.all(5),
                                            child: Column(
                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                              crossAxisAlignment: CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  mainVariables.allCategoriesTitleListMain[0][indexNews],
                                                  style: TextStyle(
                                                    fontSize: text.scale(10),
                                                    color: const Color(0XFF181818),
                                                    fontWeight: FontWeight.w500,
                                                    overflow: TextOverflow.ellipsis,
                                                  ),
                                                  maxLines: 2,
                                                ),
                                                billboardWidgetsMain.multipleLikeButtonListWidget(
                                                  likeList: mainVariables.allCategoriesLikesListMain,
                                                  id: mainVariables.allCategoriesIdListMain[0][indexNews],
                                                  index: indexNews,
                                                  context: context,
                                                  initFunction: () {},
                                                  modelSetState: setState,
                                                  notUse: true,
                                                  dislikeList: mainVariables.allCategoriesDislikesListMain,
                                                  likeCountList: mainVariables.allCategoriesLikesCountListMain,
                                                  dislikeCountList: mainVariables.allCategoriesDislikesCountListMain,
                                                  type: 'news',
                                                  billBoardType: 'news',
                                                  image: "",
                                                  title: mainVariables.allCategoriesTitleListMain[0][indexNews],
                                                  description: "",
                                                  fromWhere: 'homePage',
                                                  responseId: '',
                                                  controller: bottomSheetController,
                                                  commentId: '',
                                                  postUserId: "",
                                                  responseUserId: '',
                                                  lockerIndex: 0,
                                                  repostUserName: mainVariables.allCategoriesUserNameListMain[0][indexNews],
                                                  profileType: mainVariables.allCategoriesProfileTypeListMain[0][indexNews],
                                                  tickerId: mainVariables.allCategoriesTickerIdListMain[0][indexNews],
                                                  category: mainVariables.overViewMain!.value.response.category, // descriptionList[index],
                                                ),
                                                Row(
                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                  children: [
                                                    InkWell(
                                                      onTap: () async {
                                                        billboardWidgetsMain.getLikeDislikeUsersList(
                                                            context: context,
                                                            billBoardId: mainVariables.allCategoriesIdListMain[0][indexNews],
                                                            responseId: "",
                                                            commentId: "",
                                                            billBoardType: "news",
                                                            action: "views",
                                                            likeCount: mainVariables.allCategoriesLikesCountListMain[0][indexNews].toString(),
                                                            disLikeCount: mainVariables.allCategoriesDislikesCountListMain[0][indexNews].toString(),
                                                            index: 0,
                                                            viewCount: mainVariables.allCategoriesViewsCountListMain[0][indexNews].toString(),
                                                            isViewIncluded: true);
                                                      },
                                                      child: Text(
                                                        " ${mainVariables.allCategoriesViewsCountListMain[0][indexNews]} views ",
                                                        style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                      ),
                                                    ),
                                                    InkWell(
                                                      onTap: () async {
                                                        billboardWidgetsMain.getLikeDislikeUsersList(
                                                            context: context,
                                                            billBoardId: mainVariables.allCategoriesIdListMain[0][indexNews],
                                                            responseId: "",
                                                            commentId: "",
                                                            billBoardType: "news",
                                                            action: "liked",
                                                            likeCount: mainVariables.allCategoriesLikesCountListMain[0][indexNews].toString(),
                                                            disLikeCount: mainVariables.allCategoriesDislikesCountListMain[0][indexNews].toString(),
                                                            index: 1,
                                                            viewCount: mainVariables.allCategoriesViewsCountListMain[0][indexNews].toString(),
                                                            isViewIncluded: true);
                                                      },
                                                      child: Text(
                                                        " ${mainVariables.allCategoriesLikesCountListMain[0][indexNews]} likes ",
                                                        style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                      ),
                                                    ),
                                                    InkWell(
                                                      onTap: () async {
                                                        billboardWidgetsMain.getLikeDislikeUsersList(
                                                            context: context,
                                                            billBoardId: mainVariables.allCategoriesIdListMain[0][indexNews],
                                                            responseId: "",
                                                            commentId: "",
                                                            billBoardType: "news",
                                                            action: "disliked",
                                                            likeCount: mainVariables.allCategoriesLikesCountListMain[0][indexNews].toString(),
                                                            disLikeCount: mainVariables.allCategoriesDislikesCountListMain[0][indexNews].toString(),
                                                            index: 2,
                                                            viewCount: mainVariables.allCategoriesViewsCountListMain[0][indexNews].toString(),
                                                            isViewIncluded: true);
                                                      },
                                                      child: Text(
                                                        " ${mainVariables.allCategoriesDislikesCountListMain[0][indexNews]} DisLikes ",
                                                        style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                }),
                          ),
                    mainVariables.newsDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.videosDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Padding(
                            padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  "Videos",
                                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18), color: const Color(0XFF3F3F3F)),
                                ),
                                InkWell(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return VideosMainPage(
                                          fromCompare: true,
                                          text: mainVariables.overViewMain!.value.response.category,
                                          tickerId: mainVariables.selectedTickerId.value,
                                          tickerName: mainVariables.overViewMain!.value.response.name,
                                          homeSearch: true,
                                        );
                                      }));
                                    },
                                    child: Text(
                                      "See all",
                                      style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12), color: const Color(0XFFAAAAAA)),
                                    )),
                              ],
                            ),
                          ),
                    mainVariables.videosDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.videosDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Container(
                            height: height / 4.33,
                            margin: const EdgeInsets.symmetric(vertical: 5),
                            child: ListView.builder(
                                shrinkWrap: true,
                                padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                                physics: const ScrollPhysics(),
                                scrollDirection: Axis.horizontal,
                                itemCount: mainVariables.allCategoriesIdListMain[1].length,
                                itemBuilder: (BuildContext context, int indexVideos) {
                                  return GestureDetector(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return YoutubePlayerLandscapeScreen(
                                          id: mainVariables.videosDataMain!.value.response[indexVideos].id,
                                          comeFrom: 'businessProfile',
                                        );
                                      }));
                                    },
                                    child: Container(
                                      width: width / 1.644,
                                      margin: const EdgeInsets.only(right: 10, top: 5, bottom: 5),
                                      decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(15),
                                          image: DecorationImage(
                                              image: NetworkImage(mainVariables.videosDataMain!.value.response[indexVideos].imageUrl),
                                              fit: BoxFit.fill),
                                          boxShadow: [
                                            BoxShadow(
                                                color: Colors.black26.withOpacity(0.1),
                                                offset: const Offset(0.0, -0.5),
                                                blurRadius: 1.0,
                                                spreadRadius: 1.0)
                                          ]),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          SizedBox(
                                            height: height / 57.73,
                                          ),
                                          Row(
                                            mainAxisAlignment: MainAxisAlignment.start,
                                            children: [
                                              Container(
                                                width: width / 16.44,
                                                height: height / 34.64,
                                                margin: const EdgeInsets.all(10),
                                                decoration: BoxDecoration(
                                                  shape: BoxShape.circle,
                                                  color: Colors.black12.withOpacity(0.3),
                                                ),
                                                child: const Center(
                                                    child: Icon(
                                                  Icons.play_arrow,
                                                  color: Colors.white,
                                                )),
                                              ),
                                            ],
                                          ),
                                          Container(
                                            height: height / 8.66,
                                            decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(15),
                                              color: Colors.white,
                                            ),
                                            child: Padding(
                                              padding: const EdgeInsets.all(5),
                                              child: Column(
                                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    mainVariables.allCategoriesTitleListMain[1][indexVideos],
                                                    style: TextStyle(
                                                      fontSize: text.scale(10),
                                                      color: const Color(0XFF181818),
                                                      fontWeight: FontWeight.w500,
                                                      overflow: TextOverflow.ellipsis,
                                                    ),
                                                    maxLines: 2,
                                                  ),
                                                  billboardWidgetsMain.multipleLikeButtonListWidget(
                                                      likeList: mainVariables.allCategoriesLikesListMain,
                                                      id: mainVariables.allCategoriesIdListMain[1][indexVideos],
                                                      index: indexVideos,
                                                      context: context,
                                                      initFunction: () {},
                                                      modelSetState: setState,
                                                      notUse: true,
                                                      dislikeList: mainVariables.allCategoriesDislikesListMain,
                                                      likeCountList: mainVariables.allCategoriesLikesCountListMain,
                                                      dislikeCountList: mainVariables.allCategoriesDislikesCountListMain,
                                                      type: 'videos',
                                                      billBoardType: 'videos',
                                                      image: "",
                                                      title: mainVariables.allCategoriesTitleListMain[1][indexVideos],
                                                      description: "",
                                                      fromWhere: 'homePage',
                                                      responseId: '',
                                                      controller: bottomSheetController,
                                                      commentId: '',
                                                      postUserId: "",
                                                      responseUserId: '',
                                                      lockerIndex: 1,
                                                      repostUserName: mainVariables.allCategoriesUserNameListMain[1][indexVideos],
                                                      profileType: mainVariables.allCategoriesProfileTypeListMain[1][indexVideos],
                                                      tickerId: mainVariables.allCategoriesTickerIdListMain[1][indexVideos],
                                                      category: mainVariables.overViewMain!.value.response.category
                                                      // descriptionList[index],
                                                      ),
                                                  Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId: mainVariables.allCategoriesIdListMain[1][indexVideos],
                                                              responseId: "",
                                                              commentId: "",
                                                              billBoardType: "videos",
                                                              action: "views",
                                                              likeCount: mainVariables.allCategoriesLikesCountListMain[1][indexVideos].toString(),
                                                              disLikeCount:
                                                                  mainVariables.allCategoriesDislikesCountListMain[1][indexVideos].toString(),
                                                              index: 0,
                                                              viewCount: mainVariables.allCategoriesViewsCountListMain[1][indexVideos].toString(),
                                                              isViewIncluded: true);
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.allCategoriesViewsCountListMain[1][indexVideos]} views ",
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                        ),
                                                      ),
                                                      InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId: mainVariables.allCategoriesIdListMain[1][indexVideos],
                                                              responseId: "",
                                                              commentId: "",
                                                              billBoardType: "videos",
                                                              action: "liked",
                                                              likeCount: mainVariables.allCategoriesLikesCountListMain[1][indexVideos].toString(),
                                                              disLikeCount:
                                                                  mainVariables.allCategoriesDislikesCountListMain[1][indexVideos].toString(),
                                                              index: 1,
                                                              viewCount: mainVariables.allCategoriesViewsCountListMain[1][indexVideos].toString(),
                                                              isViewIncluded: true);
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.allCategoriesLikesCountListMain[1][indexVideos]} likes ",
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                        ),
                                                      ),
                                                      InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId: mainVariables.allCategoriesIdListMain[1][indexVideos],
                                                              responseId: "",
                                                              commentId: "",
                                                              billBoardType: "videos",
                                                              action: "disliked",
                                                              likeCount: mainVariables.allCategoriesLikesCountListMain[1][indexVideos].toString(),
                                                              disLikeCount:
                                                                  mainVariables.allCategoriesDislikesCountListMain[1][indexVideos].toString(),
                                                              index: 2,
                                                              viewCount: mainVariables.allCategoriesViewsCountListMain[1][indexVideos].toString(),
                                                              isViewIncluded: true);
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.allCategoriesDislikesCountListMain[1][indexVideos]} DisLikes ",
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                        ),
                                                      ),
                                                      /* Text(
                                        " ${mainVariables.allCategoriesViewsCountListMain[1][indexVideos]} Views ",
                                        style: TextStyle(fontSize: _text.scale(10)11, color: Colors.black54),
                                      ),
                                      Text(
                                        " ${mainVariables.allCategoriesLikesCountListMain[1][indexVideos]} likes ",
                                        style: TextStyle(fontSize: _text.scale(10)11, color: Colors.black54),
                                      ),
                                      Text(
                                        " ${mainVariables.allCategoriesDislikesCountListMain[1][indexVideos]} DisLikes ",
                                        style: TextStyle(fontSize: _text.scale(10)11, color: Colors.black54),
                                      ),*/
                                                    ],
                                                  ),
                                                ],
                                              ),
                                            ),
                                          )
                                        ],
                                      ),
                                    ),
                                  );
                                }),
                          ),
                    mainVariables.videosDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.surveyDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Padding(
                            padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  "Survey",
                                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18), color: const Color(0XFF3F3F3F)),
                                ),
                                InkWell(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return DetailedSurveyImagePage(
                                          surveyDetail: "",
                                          topic: '',
                                          catIdList: mainCatIdList,
                                          text: mainVariables.overViewMain!.value.response.category,
                                          filterId: '',
                                          fromCompare: true,
                                          tickerId: mainVariables.selectedTickerId.value,
                                          tickerName: mainVariables.overViewMain!.value.response.name,
                                          homeSearch: true,
                                        );
                                      }));
                                    },
                                    child: Text(
                                      "See all",
                                      style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12), color: const Color(0XFFAAAAAA)),
                                    )),
                              ],
                            ),
                          ),
                    mainVariables.surveyDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.surveyDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Container(
                            height: height / 4.94,
                            margin: EdgeInsets.symmetric(vertical: height / 173.2),
                            child: ListView.builder(
                                shrinkWrap: true,
                                padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                                physics: const ScrollPhysics(),
                                scrollDirection: Axis.horizontal,
                                itemCount: mainVariables.surveyDataMain!.value.response.length,
                                itemBuilder: (BuildContext context, int indexSurvey) {
                                  return GestureDetector(
                                      onTap: () async {
                                        String activeStatus = "";
                                        bool answerStatus = false;
                                        int answeredQuestion = 0;
                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                        var response = await http.post(url, headers: {
                                          'Authorization': mainUserToken
                                        }, body: {
                                          'survey_id': mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                        });
                                        var responseData = json.decode(response.body);
                                        if (responseData["status"]) {
                                          activeStatus = responseData["response"]["status"];

                                          if (activeStatus == "active") {
                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                            var response = await http.post(url, headers: {
                                              'Authorization': mainUserToken
                                            }, body: {
                                              'survey_id': mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                            });
                                            var responseData = json.decode(response.body);
                                            if (responseData["status"]) {
                                              answerStatus = responseData["response"][0]["final_question"];
                                              answeredQuestion = responseData["response"][0]["question_number"];
                                            } else {
                                              answerStatus = false;
                                              answeredQuestion = 0;
                                            }
                                          }
                                        }
                                        if (!mounted) {
                                          return;
                                        }
                                        mainUserId == mainVariables.surveyDataMain!.value.response[indexSurvey].user.id
                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                return AnalyticsPage(
                                                  surveyId: mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                                  activity: false,
                                                  surveyTitle: mainVariables.surveyDataMain!.value.response[indexSurvey].title,
                                                  navBool: false,
                                                  fromWhere: 'similar',
                                                );
                                              }))
                                            : activeStatus == 'active'
                                                ? answerStatus
                                                    ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return AnalyticsPage(
                                                          surveyId: mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                                          activity: false,
                                                          navBool: false,
                                                          fromWhere: 'similar',
                                                          surveyTitle: mainVariables.surveyDataMain!.value.response[indexSurvey].title,
                                                        );
                                                      }))
                                                    : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                        return QuestionnairePage(
                                                          surveyId: mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                                          defaultIndex: answeredQuestion,
                                                        );
                                                      }))
                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                    return AnalyticsPage(
                                                      surveyId: mainVariables.surveyDataMain!.value.response[indexSurvey].id,
                                                      activity: false,
                                                      surveyTitle: mainVariables.surveyDataMain!.value.response[indexSurvey].title,
                                                      navBool: false,
                                                      fromWhere: 'similar',
                                                    );
                                                  }));
                                      },
                                      child: Container(
                                        width: width / 1.644,
                                        margin: const EdgeInsets.only(right: 10, top: 5, bottom: 5),
                                        padding: const EdgeInsets.symmetric(horizontal: 5, vertical: 5),
                                        decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(20), boxShadow: [
                                          BoxShadow(color: Colors.grey.withOpacity(0.1), offset: const Offset(0, 2), blurRadius: 1, spreadRadius: 1)
                                        ]),
                                        child: Column(
                                          children: [
                                            SizedBox(
                                              height: height / 86.6,
                                            ),
                                            Column(
                                              children: [
                                                Row(
                                                  children: [
                                                    Container(
                                                      color: Colors.white,
                                                      child: Row(
                                                        mainAxisAlignment: MainAxisAlignment.start,
                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                        children: [
                                                          GestureDetector(
                                                            onTap: () {
                                                              Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                return UserBillBoardProfilePage(
                                                                    userId: mainVariables.surveyDataMain!.value.response[indexSurvey]
                                                                        .id) /*UserProfilePage(id:mainVariables.surveyDataMain!.value.response[indexSurvey].id,type:'survey',index:1)*/;
                                                              }));
                                                            },
                                                            child: Container(
                                                              height: height / 17.32,
                                                              width: width / 8.22,
                                                              margin: const EdgeInsets.all(10),
                                                              decoration: BoxDecoration(
                                                                  shape: BoxShape.circle,
                                                                  color: Colors.grey,
                                                                  image: DecorationImage(
                                                                      image: NetworkImage(
                                                                        mainVariables.surveyDataMain!.value.response[indexSurvey].user.avatar,
                                                                      ),
                                                                      fit: BoxFit.fill)),
                                                            ),
                                                          ),
                                                          Column(
                                                            mainAxisAlignment: MainAxisAlignment.start,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              SizedBox(
                                                                width: width / 2.5,
                                                                child: Row(
                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    SizedBox(
                                                                        width: width / 2.5,
                                                                        child: Text(
                                                                          mainVariables.surveyDataMain!.value.response[indexSurvey].title,
                                                                          style: TextStyle(
                                                                              fontSize: text.scale(14),
                                                                              fontWeight: FontWeight.w600,
                                                                              overflow: TextOverflow.ellipsis),
                                                                          maxLines: 2,
                                                                        )),
                                                                    /*GestureDetector(
                                                      onTap: (){
                                                        showModalBottomSheet(
                                                            shape: RoundedRectangleBorder(
                                                              borderRadius: BorderRadius.vertical(
                                                                top: Radius.circular(30),
                                                              ),
                                                            ),
                                                            context: context,
                                                            builder: (BuildContext context) {
                                                              return SingleChildScrollView(
                                                                child: Container(
                                                                  margin: EdgeInsets.symmetric(horizontal: _width/18.75),
                                                                  padding: EdgeInsets.only(
                                                                      bottom: MediaQuery.of(context)
                                                                          .viewInsets
                                                                          .bottom),
                                                                  child:surveyMyList[index]?
                                                                  ListTile(
                                                                    onTap: (){
                                                                      if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                      showDialog(
                                                                          barrierDismissible: false,
                                                                          context: context,
                                                                          builder: (BuildContext context) {
                                                                            return Dialog(
                                                                              shape: RoundedRectangleBorder(
                                                                                  borderRadius:
                                                                                  BorderRadius.circular(
                                                                                      20.0)), //this right here
                                                                              child: Container(
                                                                                height:_height/6,
                                                                                margin: EdgeInsets.symmetric(vertical: _height/54.13,horizontal:_width/25 ),
                                                                                child: Column(
                                                                                  mainAxisAlignment:
                                                                                  MainAxisAlignment.center,
                                                                                  //crossAxisAlignment: CrossAxisAlignment.start,
                                                                                  children: [
                                                                                    Center(
                                                                                        child: Text(
                                                                                            "Delete Post",
                                                                                            style: TextStyle(
                                                                                                color: Color(
                                                                                                    0XFF0EA102),
                                                                                                fontWeight:
                                                                                                FontWeight.bold,
                                                                                                fontSize: 20,
                                                                                                fontFamily:
                                                                                                "Poppins"))),
                                                                                    Divider(),
                                                                                    Container(
                                                                                        child: Center(child: Text("Are you sure to Delete this Post"))),
                                                                                    Spacer(),
                                                                                    Padding(
                                                                                      padding: EdgeInsets
                                                                                          .symmetric(
                                                                                          horizontal: _width/25),
                                                                                      child: Row(
                                                                                        mainAxisAlignment:
                                                                                        MainAxisAlignment
                                                                                            .spaceBetween,
                                                                                        children: [
                                                                                          TextButton(
                                                                                            onPressed: () {
                                                                                              Navigator.pop(
                                                                                                  context);
                                                                                            },
                                                                                            child: Text(
                                                                                              "Cancel",
                                                                                              style: TextStyle(
                                                                                                  color:
                                                                                                  Colors.grey,
                                                                                                  fontWeight:
                                                                                                  FontWeight
                                                                                                      .w600,
                                                                                                  fontFamily:
                                                                                                  "Poppins",
                                                                                                  fontSize: 15),
                                                                                            ),
                                                                                          ),
                                                                                          ElevatedButton(
                                                                                            style: ElevatedButton.styleFrom(
                                                                                              shape:
                                                                                              RoundedRectangleBorder(
                                                                                                borderRadius:
                                                                                                BorderRadius
                                                                                                    .circular(
                                                                                                    18.0),
                                                                                              ),
                                                                                              backgroundColor: Color(0XFF0EA102),
                                                                                            ),
                                                                                            onPressed: () async {
                                                                                              deletePost(surveyId: surveyIdList[index]);
                                                                                              if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                                            },
                                                                                            child: Text(
                                                                                              "Continue",
                                                                                              style: TextStyle(
                                                                                                  color: Colors
                                                                                                      .white,
                                                                                                  fontWeight:
                                                                                                  FontWeight
                                                                                                      .w600,
                                                                                                  fontFamily:
                                                                                                  "Poppins",
                                                                                                  fontSize:
                                                                                                  15),
                                                                                            ),
                                                                                          ),
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                    Spacer(),
                                                                                  ],
                                                                                ),
                                                                              ),
                                                                            );
                                                                          });
                                                                    },
                                                                    minLeadingWidth: _width/25,
                                                                    leading: Icon(Icons.delete,size: 20,),
                                                                    title: Text("Delete Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                  ):
                                                                  Column(
                                                                    mainAxisAlignment:
                                                                    MainAxisAlignment.start,
                                                                    crossAxisAlignment:
                                                                    CrossAxisAlignment.start,
                                                                    children: [
                                                                      ListTile(
                                                                        onTap: (){
                                                                          if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                          _controller.clear();
                                                                          setState(() {
                                                                            actionValue="Report";
                                                                          });
                                                                          showAlertDialog(context:context,surveyId: surveyIdList[index],surveyUserId: surveyUserIdList[index]);
                                                                        },
                                                                        minLeadingWidth: _width/25,
                                                                        leading: Icon(Icons.shield,size: 20,),
                                                                        title: Text("Report Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                      ),
                                                                      Divider(thickness: 0.0,height: 0.0,),
                                                                      ListTile(
                                                                        onTap: (){
                                                                          _controller.clear();
                                                                          setState(() {
                                                                            actionValue="Block";
                                                                          });
                                                                          if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                          showAlertDialog(context:context,surveyId: surveyIdList[index],surveyUserId:surveyUserIdList[index]);
                                                                        },
                                                                        minLeadingWidth: _width/25,
                                                                        leading: Icon(Icons.flag,size: 20,),
                                                                        title: Text("Block Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              );
                                                            });
                                                      },
                                                      child: Padding(
                                                        padding: const EdgeInsets.only(right:8.0),
                                                        child: Icon(Icons.more_horiz,size: 20,),
                                                      ),
                                                    ),*/
                                                                  ],
                                                                ),
                                                              ),
                                                              SizedBox(
                                                                height: height / 87.6,
                                                              ),
                                                              SizedBox(
                                                                  width: width / 2.5,
                                                                  child: Row(
                                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                                    children: [
                                                                      SizedBox(
                                                                        width: width / 2.5,
                                                                        child: Row(
                                                                          mainAxisAlignment: MainAxisAlignment.start,
                                                                          children: [
                                                                            GestureDetector(
                                                                                onTap: () {
                                                                                  Navigator.push(context,
                                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                                    return UserBillBoardProfilePage(
                                                                                        userId: mainVariables
                                                                                            .surveyDataMain!
                                                                                            .value
                                                                                            .response[indexSurvey]
                                                                                            .id) /*UserProfilePage(id:mainVariables.surveyDataMain!.value.response[indexSurvey].id,type:'survey',index: 1,)*/;
                                                                                  }));
                                                                                },
                                                                                child: Text(
                                                                                  mainVariables
                                                                                      .surveyDataMain!.value.response[indexSurvey].user.username
                                                                                      .toString()
                                                                                      .capitalizeFirst!,
                                                                                  style: TextStyle(
                                                                                      fontSize: text.scale(10), fontWeight: FontWeight.w500),
                                                                                )),
                                                                            SizedBox(
                                                                              width: width / 82.2,
                                                                            ),
                                                                            Container(
                                                                              height: height / 173.2,
                                                                              width: width / 82.2,
                                                                              decoration: const BoxDecoration(
                                                                                  shape: BoxShape.circle, color: Color(0xffA5A5A5)),
                                                                            ),
                                                                            SizedBox(
                                                                              width: width / 82.2,
                                                                            ),
                                                                            Text(
                                                                              mainVariables.surveyDataMain!.value.response[indexSurvey].questionsCount
                                                                                  .toString(),
                                                                              style: TextStyle(fontSize: text.scale(10), fontWeight: FontWeight.w500),
                                                                            ),
                                                                            Text(
                                                                              " Questions",
                                                                              style: TextStyle(fontSize: text.scale(10), fontWeight: FontWeight.w500),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                      //widgetsMain.translationWidget(translationList: surveyTranslationList, id: surveyIdList[index],type: 'survey', index: index, initFunction: getAllData, context: context, modelSetState: setState, notUse: false, titleList: surveyTitlesList),
                                                                    ],
                                                                  )),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                SizedBox(
                                                  height: height / 86.6,
                                                ),
                                                billboardWidgetsMain.multipleLikeButtonListWidget(
                                                    likeList: mainVariables.allCategoriesLikesListMain,
                                                    id: mainVariables.allCategoriesIdListMain[2][indexSurvey],
                                                    index: indexSurvey,
                                                    context: context,
                                                    initFunction: () {},
                                                    modelSetState: setState,
                                                    notUse: true,
                                                    dislikeList: mainVariables.allCategoriesDislikesListMain,
                                                    likeCountList: mainVariables.allCategoriesLikesCountListMain,
                                                    dislikeCountList: mainVariables.allCategoriesDislikesCountListMain,
                                                    type: 'survey',
                                                    billBoardType: 'survey',
                                                    image: "",
                                                    title: mainVariables.allCategoriesTitleListMain[2][indexSurvey],
                                                    description: "",
                                                    fromWhere: 'homePage',
                                                    responseId: '',
                                                    controller: bottomSheetController,
                                                    commentId: '',
                                                    postUserId: "",
                                                    responseUserId: '',
                                                    lockerIndex: 2,
                                                    repostUserName: mainVariables.allCategoriesUserNameListMain[2][indexSurvey],
                                                    profileType: mainVariables.allCategoriesProfileTypeListMain[2][indexSurvey],
                                                    tickerId: mainVariables.allCategoriesTickerIdListMain[2][indexSurvey],
                                                    category: mainVariables.overViewMain!.value.response.category),
                                                SizedBox(height: height / 81.2),
                                                Container(
                                                  height: height / 54.13,
                                                  padding: const EdgeInsets.symmetric(horizontal: 10),
                                                  child: Row(
                                                    children: [
                                                      SizedBox(
                                                          width: width / 7.5,
                                                          child: Text(mainVariables.forumDataMain!.value.response[indexSurvey].companyName,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(10), fontWeight: FontWeight.w700, color: Colors.blue))),
                                                      SizedBox(width: width / 22.05),
                                                      InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId: mainVariables.allCategoriesIdListMain[2][indexSurvey],
                                                              responseId: "",
                                                              commentId: "",
                                                              billBoardType: "survey",
                                                              action: "views",
                                                              likeCount: mainVariables.allCategoriesLikesCountListMain[2][indexSurvey].toString(),
                                                              disLikeCount:
                                                                  mainVariables.allCategoriesDislikesCountListMain[2][indexSurvey].toString(),
                                                              index: 0,
                                                              viewCount: mainVariables.allCategoriesViewsCountListMain[2][indexSurvey].toString(),
                                                              isViewIncluded: true);
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.allCategoriesViewsCountListMain[2][indexSurvey]} views ",
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                        ),
                                                      ),
                                                      /*Row(
                                        children: [
                                          Text(mainVariables.allCategoriesViewsCountListMain[2][indexSurvey].toString(),
                                              style: TextStyle(fontSize: _text*10,fontWeight: FontWeight.w700)),
                                          Text(" views",style: TextStyle(fontSize: _text*10,fontWeight: FontWeight.w500)),
                                        ],
                                      ),*/
                                                      SizedBox(width: width / 22.05),
                                                      Text(mainVariables.allCategoriesResponseCountListMain[2][indexSurvey].toString(),
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54)),
                                                      Text(" Response", style: TextStyle(fontSize: text.scale(10), color: Colors.black54)),
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                            SizedBox(
                                              height: height / 86.6,
                                            ),
                                          ],
                                        ),
                                      ));
                                }),
                          ),
                    mainVariables.surveyDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.forumDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Padding(
                            padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  "Forums",
                                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: text.scale(18), color: const Color(0XFF3F3F3F)),
                                ),
                                InkWell(
                                    onTap: () {
                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                        return DetailedForumImagePage(
                                          text: mainVariables.overViewMain!.value.response.category,
                                          fromCompare: true,
                                          forumDetail: "",
                                          filterId: "",
                                          catIdList: mainCatIdList,
                                          topic: "",
                                          tickerId: mainVariables.selectedTickerId.value,
                                          tickerName: mainVariables.overViewMain!.value.response.name,
                                          navBool: false,
                                          sendUserId: "",
                                          homeSearch: true,
                                        );
                                      }));
                                    },
                                    child: Text(
                                      "See all",
                                      style: TextStyle(fontWeight: FontWeight.w500, fontSize: text.scale(12), color: const Color(0XFFAAAAAA)),
                                    )),
                              ],
                            ),
                          ),
                    mainVariables.forumDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 57.73,
                          ),
                    mainVariables.forumDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : Container(
                            height: height / 4.94,
                            margin: EdgeInsets.symmetric(vertical: height / 173.2),
                            child: ListView.builder(
                                shrinkWrap: true,
                                padding: EdgeInsets.symmetric(horizontal: width / 27.4),
                                physics: const ScrollPhysics(),
                                scrollDirection: Axis.horizontal,
                                itemCount: mainVariables.forumDataMain!.value.response.length,
                                itemBuilder: (BuildContext context, int indexForums) {
                                  return GestureDetector(
                                      onTap: () async {
                                        Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                          return ForumPostDescriptionPage(
                                            forumId: mainVariables.forumDataMain!.value.response[indexForums].id,
                                            comeFrom: "buzz",
                                            idList: mainVariables.allCategoriesIdListMain[3],
                                          );
                                        }));
                                      },
                                      child: Container(
                                        width: width / 1.644,
                                        margin: const EdgeInsets.only(right: 10, top: 5, bottom: 5),
                                        padding: const EdgeInsets.symmetric(horizontal: 5, vertical: 5),
                                        decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(20), boxShadow: [
                                          BoxShadow(color: Colors.grey.withOpacity(0.1), offset: const Offset(0, 2), blurRadius: 1, spreadRadius: 1)
                                        ]),
                                        child: Column(
                                          children: [
                                            SizedBox(
                                              height: height / 86.6,
                                            ),
                                            Column(
                                              mainAxisAlignment: MainAxisAlignment.start,
                                              crossAxisAlignment: CrossAxisAlignment.start,
                                              children: [
                                                Row(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: [
                                                    GestureDetector(
                                                      onTap: () async {
                                                        bool refresh =
                                                            await Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                          return UserBillBoardProfilePage(
                                                                  userId: mainVariables.forumDataMain!.value.response[indexForums].id)
                                                              /*UserProfilePage(
                                                  id:mainVariables.forumDataMain!.value.response[indexForums].id,
                                                  type:'forums',
                                                  index:0)*/
                                                              ;
                                                        }));
                                                        if (refresh) {
                                                          initState();
                                                        }
                                                      },
                                                      child: Container(
                                                        height: height / 17.32,
                                                        width: width / 8.22,
                                                        margin: const EdgeInsets.all(10),
                                                        decoration: BoxDecoration(
                                                            shape: BoxShape.circle,
                                                            color: Colors.grey,
                                                            image: DecorationImage(
                                                                image: NetworkImage(
                                                                    mainVariables.forumDataMain!.value.response[indexForums].user.avatar),
                                                                fit: BoxFit.fill)),
                                                      ),
                                                    ),
                                                    Padding(
                                                      padding: const EdgeInsets.symmetric(vertical: 8.0),
                                                      child: Column(
                                                        mainAxisAlignment: MainAxisAlignment.start,
                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                        children: [
                                                          SizedBox(
                                                            width: width / 2.5,
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              children: [
                                                                SizedBox(
                                                                  width: width / 2.5,
                                                                  child: Text(
                                                                    mainVariables.allCategoriesTitleListMain[3][indexForums],
                                                                    style: TextStyle(
                                                                        fontSize: text.scale(14),
                                                                        fontWeight: FontWeight.w600,
                                                                        overflow: TextOverflow.ellipsis),
                                                                    maxLines: 2,
                                                                  ),
                                                                ),
                                                                /*GestureDetector(
                                                  onTap: (){
                                                    showModalBottomSheet(
                                                        shape: RoundedRectangleBorder(
                                                          borderRadius: BorderRadius.vertical(
                                                            top: Radius.circular(30),
                                                          ),
                                                        ),
                                                        context: context,
                                                        builder: (BuildContext context) {
                                                          return SingleChildScrollView(
                                                            child: Container(
                                                              margin: EdgeInsets.symmetric(horizontal: _width/18.75),
                                                              padding: EdgeInsets.only(
                                                                  bottom: MediaQuery.of(context)
                                                                      .viewInsets
                                                                      .bottom),
                                                              child:forumMyList[index]?
                                                              Column(
                                                                mainAxisAlignment:
                                                                MainAxisAlignment.start,
                                                                crossAxisAlignment:
                                                                CrossAxisAlignment.start,
                                                                children: [
                                                                  ListTile(
                                                                    onTap: () async {
                                                                      if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                      bool response = await Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                                        return ForumPostEditPage(
                                                                          text: widget.text,
                                                                          catIdList: mainCatIdList,
                                                                          filterId: finalisedFilterId,
                                                                          forumId: forumIdList[index],
                                                                        );
                                                                      }));
                                                                      if(response){
                                                                        await getForumValues(text: "",category: selectedValue,filterId: selectedIdWidget);
                                                                      }
                                                                    },
                                                                    minLeadingWidth: _width/25,
                                                                    leading: Icon(Icons.edit, size: 20,),
                                                                    title: Text("Edit Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                  ),
                                                                  ListTile(
                                                                    onTap: (){
                                                                      if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                      showDialog(
                                                                          barrierDismissible: false,
                                                                          context: context,
                                                                          builder: (BuildContext context) {
                                                                            return Dialog(
                                                                              shape: RoundedRectangleBorder(
                                                                                  borderRadius:
                                                                                  BorderRadius.circular(
                                                                                      20.0)), //this right here
                                                                              child: Container(
                                                                                height:_height/6,
                                                                                margin: EdgeInsets.symmetric(vertical: _height/54.13,horizontal:_width/25 ),
                                                                                child: Column(
                                                                                  mainAxisAlignment:
                                                                                  MainAxisAlignment.center,
                                                                                  //crossAxisAlignment: CrossAxisAlignment.start,
                                                                                  children: [
                                                                                    Center(
                                                                                        child: Text(
                                                                                            "Delete Post",
                                                                                            style: TextStyle(
                                                                                                color: Color(
                                                                                                    0XFF0EA102),
                                                                                                fontWeight:
                                                                                                FontWeight.bold,
                                                                                                fontSize: 20,
                                                                                                fontFamily:
                                                                                                "Poppins"))),
                                                                                    Divider(),
                                                                                    Container(
                                                                                        child: Center(child: Text("Are you sure to Delete this Post"))),
                                                                                    Spacer(),
                                                                                    Padding(
                                                                                      padding: EdgeInsets
                                                                                          .symmetric(
                                                                                          horizontal: _width/25),
                                                                                      child: Row(
                                                                                        mainAxisAlignment:
                                                                                        MainAxisAlignment
                                                                                            .spaceBetween,
                                                                                        children: [
                                                                                          TextButton(
                                                                                            onPressed: () {
                                                                                              Navigator.pop(
                                                                                                  context);
                                                                                            },
                                                                                            child: Text(
                                                                                              "Cancel",
                                                                                              style: TextStyle(
                                                                                                  color:
                                                                                                  Colors.grey,
                                                                                                  fontWeight:
                                                                                                  FontWeight
                                                                                                      .w600,
                                                                                                  fontFamily:
                                                                                                  "Poppins",
                                                                                                  fontSize: 15),
                                                                                            ),
                                                                                          ),
                                                                                          ElevatedButton(
                                                                                            style: ElevatedButton.styleFrom(
                                                                                              shape:
                                                                                              RoundedRectangleBorder(
                                                                                                borderRadius:
                                                                                                BorderRadius
                                                                                                    .circular(
                                                                                                    18.0),
                                                                                              ),
                                                                                              backgroundColor: Color(0XFF0EA102),
                                                                                            ),
                                                                                            onPressed: () async {
                                                                                              deletePost(forumId: forumIdList[index]);
                                                                                              if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                                            },
                                                                                            child: Text(
                                                                                              "Continue",
                                                                                              style: TextStyle(
                                                                                                  color: Colors
                                                                                                      .white,
                                                                                                  fontWeight:
                                                                                                  FontWeight
                                                                                                      .w600,
                                                                                                  fontFamily:
                                                                                                  "Poppins",
                                                                                                  fontSize:
                                                                                                  15),
                                                                                            ),
                                                                                          ),
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                    Spacer(),
                                                                                  ],
                                                                                ),
                                                                              ),
                                                                            );
                                                                          });
                                                                    },
                                                                    minLeadingWidth: _width/25,
                                                                    leading: Icon(Icons.delete,size: 20,),
                                                                    title: Text("Delete Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                  ),
                                                                ],
                                                              ):
                                                              Column(
                                                                mainAxisAlignment:
                                                                MainAxisAlignment.start,
                                                                crossAxisAlignment:
                                                                CrossAxisAlignment.start,
                                                                children: [
                                                                  ListTile(
                                                                    onTap: (){
                                                                      if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                      _controller.clear();
                                                                      setState(() {
                                                                        actionValue="Report";
                                                                      });
                                                                      showAlertDialog(context:context,forumId: forumIdList[index],forumUserId: forumUserIdList[index]);
                                                                    },
                                                                    minLeadingWidth: _width/25,
                                                                    leading: Icon(Icons.shield,size: 20,),
                                                                    title: Text("Report Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                  ),
                                                                  Divider(thickness: 0.0,height: 0.0,),
                                                                  ListTile(
                                                                    onTap: (){
                                                                      _controller.clear();
                                                                      setState(() {
                                                                        actionValue="Block";
                                                                      });
                                                                      if (!mounted) {                                                    return;                                                              } Navigator.pop(context);
                                                                      showAlertDialog(context:context,forumId: forumIdList[index],forumUserId:forumUserIdList[index]);
                                                                    },
                                                                    minLeadingWidth: _width/25,
                                                                    leading: Icon(Icons.flag,size: 20,),
                                                                    title: Text("Block Post",style: TextStyle(fontWeight: FontWeight.w500,fontSize: _text*14),),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          );
                                                        });
                                                  },
                                                  child: Icon(Icons.more_horiz,size: 20,),
                                                ),*/
                                                              ],
                                                            ),
                                                          ),
                                                          GestureDetector(
                                                            onTap: () async {
                                                              bool refresh =
                                                                  await Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                return UserBillBoardProfilePage(
                                                                    userId: mainVariables.forumDataMain!.value.response[indexForums]
                                                                        .id) /*UserProfilePage(id:mainVariables.forumDataMain!.value.response[indexForums].id,type:'forums',index:0)*/;
                                                              }));
                                                              if (refresh) {
                                                                initState();
                                                              }
                                                            },
                                                            child: SizedBox(
                                                                height: height / 54.13,
                                                                child: Text(
                                                                  mainVariables.forumDataMain!.value.response[indexForums].user.username
                                                                      .toString()
                                                                      .capitalizeFirst!,
                                                                  style: TextStyle(fontSize: text.scale(10), fontWeight: FontWeight.w500),
                                                                )),
                                                          ),
                                                        ],
                                                      ),
                                                    )
                                                  ],
                                                ),
                                                SizedBox(
                                                  height: height / 86.6,
                                                ),
                                                billboardWidgetsMain.multipleLikeButtonListWidget(
                                                    likeList: mainVariables.allCategoriesLikesListMain,
                                                    id: mainVariables.allCategoriesIdListMain[3][indexForums],
                                                    index: indexForums,
                                                    context: context,
                                                    initFunction: () {},
                                                    modelSetState: setState,
                                                    notUse: true,
                                                    dislikeList: mainVariables.allCategoriesDislikesListMain,
                                                    likeCountList: mainVariables.allCategoriesLikesCountListMain,
                                                    dislikeCountList: mainVariables.allCategoriesDislikesCountListMain,
                                                    type: 'billboard',
                                                    billBoardType: 'billboard',
                                                    image: "",
                                                    title: mainVariables.allCategoriesTitleListMain[3][indexForums],
                                                    description: "",
                                                    fromWhere: 'homePage',
                                                    responseId: '',
                                                    controller: bottomSheetController,
                                                    commentId: '',
                                                    postUserId: "",
                                                    responseUserId: '',
                                                    lockerIndex: 3,
                                                    repostUserName: mainVariables.allCategoriesUserNameListMain[3][indexForums],
                                                    profileType: mainVariables.allCategoriesProfileTypeListMain[3][indexForums],
                                                    tickerId: mainVariables.allCategoriesTickerIdListMain[3][indexForums],
                                                    category: mainVariables.overViewMain!.value.response.category),
                                                SizedBox(height: height / 81.2),
                                                Container(
                                                  height: height / 54.13,
                                                  padding: EdgeInsets.symmetric(horizontal: width / 41.1),
                                                  child: Row(
                                                    children: [
                                                      SizedBox(
                                                          width: width / 7.5,
                                                          child: Text(mainVariables.forumDataMain!.value.response[indexForums].companyName,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(10), fontWeight: FontWeight.w700, color: Colors.blue))),
                                                      SizedBox(width: width / 22.05),
                                                      InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId: mainVariables.allCategoriesIdListMain[3][indexForums],
                                                              responseId: "",
                                                              commentId: "",
                                                              billBoardType: "forums",
                                                              action: "views",
                                                              likeCount: mainVariables.allCategoriesLikesCountListMain[3][indexForums].toString(),
                                                              disLikeCount:
                                                                  mainVariables.allCategoriesDislikesCountListMain[3][indexForums].toString(),
                                                              index: 0,
                                                              viewCount: mainVariables.allCategoriesViewsCountListMain[3][indexForums].toString(),
                                                              isViewIncluded: true);
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.allCategoriesViewsCountListMain[3][indexForums]} views ",
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54),
                                                        ),
                                                      ),
                                                      /*Row(
                                        children: [
                                          Text(mainVariables.allCategoriesViewsCountListMain[3][indexForums].toString(),style: TextStyle(fontSize: _text*10,fontWeight: FontWeight.w700)),
                                          Text(" views",style: TextStyle(fontSize: _text*10,fontWeight: FontWeight.w500)),
                                        ],
                                      ),*/
                                                      SizedBox(width: width / 22.05),
                                                      Text(mainVariables.allCategoriesResponseCountListMain[3][indexForums].toString(),
                                                          style: TextStyle(fontSize: text.scale(10), color: Colors.black54)),
                                                      Text(" Response", style: TextStyle(fontSize: text.scale(10), color: Colors.black54)),
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                            SizedBox(
                                              height: height / 86.6,
                                            ),
                                          ],
                                        ),
                                      ));
                                }),
                          ),
                    mainVariables.forumDataMain!.value.response.isEmpty
                        ? const SizedBox()
                        : SizedBox(
                            height: height / 28.86,
                          ),
                  ],
                ),
              ))
        : Center(
            child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
          );
  }
}

class CommunitiesTabPage extends StatefulWidget {
  const CommunitiesTabPage({Key? key}) : super(key: key);

  @override
  State<CommunitiesTabPage> createState() => _CommunitiesTabPageState();
}

class _CommunitiesTabPageState extends State<CommunitiesTabPage> {
  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 3;
      mainVariables.selectedUserControllerIndex.value = 2;
      mainVariables.selectedIntermediaryControllerIndex.value = 2;
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Container(
      margin: EdgeInsets.symmetric(horizontal: width / 24.17),
      color: Theme.of(context).colorScheme.onBackground,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            height: height / 57.73,
          ),
          SvgPicture.asset(
            "lib/Constants/Assets/BillBoard/businessProfile/rocket.svg",
            height: height / 3.464,
            width: width / 1.49,
            fit: BoxFit.fill,
          ),
          SizedBox(
            height: height / 57.73,
          ),
          Center(
            child: Text(
              "Coming Soon",
              style: TextStyle(color: Theme.of(context).colorScheme.onPrimary, fontWeight: FontWeight.w600, fontSize: text.scale(24)),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          SizedBox(
            width: width / 1.2,
            child: RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                children: [
                  TextSpan(
                      text: 'On your way very shortly, Stay tuned! ',
                      style: TextStyle(
                          fontFamily: "Poppins",
                          color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.3),
                          fontSize: text.scale(12),
                          fontWeight: FontWeight.w600)),
                ],
              ),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          // ElevatedButton(onPressed: (){}, child: Text("Notify",style: TextStyle(fontSize:_text* 12,fontWeight: FontWeight.w600),))
        ],
      ),
    );
  }
}

class RepostsTabPage extends StatefulWidget {
  final String userId;

  const RepostsTabPage({Key? key, required this.userId}) : super(key: key);

  @override
  State<RepostsTabPage> createState() => _RepostsTabPageState();
}

class _RepostsTabPageState extends State<RepostsTabPage> {
  bool loader = false;
  bool listLoader = false;
  TextEditingController bottomSheetController = TextEditingController();
  final CarouselController _carController = CarouselController();
  int carouselIndexGlobal = 0;
  final RefreshController _controller = RefreshController();
  int skipCount = 0;

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 6;
      mainVariables.selectedUserControllerIndex.value = 3;
      getData();
    });
    super.initState();
  }

  getData() async {
    if (mainSkipValue == false) {
      context.read<LikeButtonListWidgetBloc>().add(const LikeButtonListLoadingEvent());
      context.read<ResponseFieldWidgetBloc>().add(const ResponseFieldInitialEvent());
      context.read<BillBoardTranslationBloc>().add(const BillBoardLoadingTranslationEvent());
      context.read<BookMarkWidgetBloc>().add(const LoadingEvent());
      await getRepostListData();
    }
  }

  getRepostListData() async {
    setState(() {
      listLoader = false;
    });
    await billBoardApiMain.getRepostListFunction(userId: widget.userId, skipCount: "0");
    mainVariables.responseFocusList.clear();
    mainVariables.responseControllerList.clear();
    // mainVariables.globalKeyList.clear();
    mainVariables.valueMapListProfilePage.clear();
    mainVariables.pickedImageMain.clear();
    mainVariables.pickedVideoMain.clear();
    mainVariables.pickedFileMain.clear();
    mainVariables.docMain.clear();
    mainVariables.selectedUrlTypeMain.clear();
    mainVariables.docFilesMain.clear();
    if (mainVariables.billBoardRepostList!.value.response.isNotEmpty) {
      mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardRepostList!.value.response);
      for (int i = 0; i < mainVariables.billBoardRepostList!.value.response.length; i++) {
        mainVariables.responseFocusList.add(FocusNode());
        //  mainVariables.globalKeyList.add(GlobalKey());
        mainVariables.responseControllerList.add(TextEditingController());
        mainVariables.pickedImageMain.add(null);
        mainVariables.pickedVideoMain.add(null);
        mainVariables.pickedFileMain.add(null);
        mainVariables.docMain.add(null);
        mainVariables.selectedUrlTypeMain.add("");
        mainVariables.docFilesMain.add([]);
      }
      setState(() {
        listLoader = true;
        loader = true;
      });
    } else {
      setState(() {
        listLoader = true;
        loader = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return loader
        ? Column(
            children: [
              billboardWidgetsMain.getBillBoardSearchField(
                context: context,
                modelSetState: setState,
                billBoardFunction: getRepostListData,
              ),
              SizedBox(height: height / 57.73),
              listLoader
                  ? Expanded(
                      child: Obx(
                        () => mainVariables.valueMapListProfilePage.isEmpty
                            ? Container(
                                margin: EdgeInsets.symmetric(horizontal: width / 24.17),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    SizedBox(
                                      height: height / 57.73,
                                    ),
                                    SvgPicture.asset(
                                      "lib/Constants/Assets/BillBoard/businessProfile/emptyList.svg",
                                      height: height / 3.464,
                                      width: width / 1.49,
                                      fit: BoxFit.fill,
                                    ),
                                    SizedBox(
                                      height: height / 57.73,
                                    ),
                                    SizedBox(
                                      width: width / 1.2,
                                      child: RichText(
                                        textAlign: TextAlign.center,
                                        text: TextSpan(
                                          children: [
                                            TextSpan(
                                                text: 'Unfortunately no posts found for this profile',
                                                style: TextStyle(fontFamily: "Poppins", fontSize: text.scale(10), fontWeight: FontWeight.w600)),
                                          ],
                                        ),
                                      ),
                                    )
                                  ],
                                ),
                              )
                            : SmartRefresher(
                                controller: _controller,
                                enablePullDown: false,
                                enablePullUp: true,
                                footer: CustomFooter(
                                  builder: (BuildContext context, LoadStatus? mode) {
                                    Widget body;
                                    if (mode == LoadStatus.idle) {
                                      body = const Text("pull up load");
                                    } else if (mode == LoadStatus.loading) {
                                      body = const CupertinoActivityIndicator();
                                    } else if (mode == LoadStatus.failed) {
                                      body = const Text("Load Failed!Click retry!");
                                    } else if (mode == LoadStatus.canLoading) {
                                      body = const Text("release to load more");
                                    } else {
                                      body = const Text("No more Data");
                                    }
                                    return SizedBox(
                                      height: 55.0,
                                      child: Center(child: body),
                                    );
                                  },
                                ),
                                onLoading: () async {
                                  skipCount = skipCount + 10;
                                  await billBoardApiMain.getRepostListFunction(userId: widget.userId, skipCount: skipCount.toString());
                                  if (mainVariables.billBoardRepostList!.value.response.isNotEmpty) {
                                    mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardRepostList!.value.response);
                                    for (int i = 0; i < mainVariables.billBoardRepostList!.value.response.length; i++) {
                                      mainVariables.responseFocusList.add(FocusNode());
                                      // mainVariables.globalKeyList.add(GlobalKey());
                                      mainVariables.responseControllerList.add(TextEditingController());
                                      mainVariables.pickedImageMain.add(null);
                                      mainVariables.pickedVideoMain.add(null);
                                      mainVariables.pickedFileMain.add(null);
                                      mainVariables.docMain.add(null);
                                      mainVariables.selectedUrlTypeMain.add("");
                                      mainVariables.docFilesMain.add([]);
                                    }
                                  }
                                  if (mounted) {
                                    setState(() {});
                                  }
                                  _controller.loadComplete();
                                },
                                child: ListView.builder(
                                    physics: const ScrollPhysics(),
                                    padding: EdgeInsets.zero,
                                    scrollDirection: Axis.vertical,
                                    itemCount: mainVariables.valueMapListProfilePage.length,
                                    itemBuilder: (context, index) {
                                      return Container(
                                        padding: EdgeInsets.only(left: width / 41.1, right: width / 41.1),
                                        child: Column(
                                          children: [
                                            mainVariables.valueMapListProfilePage[index].type == "byte"
                                                ? mainVariables.valueMapListProfilePage[index].files.isEmpty
                                                ? mainVariables.valueMapListProfilePage[index].postType == "repost"
                                                ? mainVariables.activeTypeMain.value == "believed"
                                                ? mainVariables.valueMapListProfilePage[index].repostStatus == 1
                                                ? mainVariables.valueMapListProfilePage[index].repostType == "private"
                                                ? mainVariables.valueMapListProfilePage[index].repostBelieved
                                                ? Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                                /*BoxShadow(
                                                    color: Colors.black26.withOpacity(0.1),
                                                    offset: const Offset(0.0, -0.5),
                                                    blurRadius: 1.0,
                                                    spreadRadius: 1.0)*/
                                              ]),
                                              child: Column(
                                                children: [
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5), //Colors.grey.shade200,
                                                      borderRadius:
                                                      const BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                              id:valueMapList[index].userId,type:'forums',index:0);}));*/
                                                                      Navigator.push(context,
                                                                          MaterialPageRoute(builder: (BuildContext context) {
                                                                            return UserBillBoardProfilePage(
                                                                                userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                          }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username
                                                                          .toString()
                                                                          .capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .labelLarge /*TextStyle(
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0XFF202020),
                                                                          fontWeight: FontWeight.w700,
                                                                          fontFamily: "Poppins")*/
                                                                      ,
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0XFF737373),
                                                                            fontWeight: FontWeight.w400,
                                                                            fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                          fontSize: text.scale(11),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                        ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0XFF737373),
                                                                              fontWeight: FontWeight.w400,
                                                                              fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                ? billboardWidgetsMain.getHomeBelieveButton(
                                                              heightValue: height / 33.76,
                                                              isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                              billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                              billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                              context: context,
                                                              modelSetState: setState,
                                                              index: index,
                                                              background: false,
                                                            )
                                                                : const SizedBox(),

                                                            ///more_vert
                                                            IconButton(
                                                                onPressed: () {
                                                                  billboardWidgetsMain.bottomSheet(
                                                                    context1: context,
                                                                    myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                    type: "billboard",
                                                                    responseId: "",
                                                                    responseUserId: "",
                                                                    commentId: "",
                                                                    commentUserId: "",
                                                                    callFunction: getData,
                                                                    contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                    modelSetState: setState,
                                                                    responseDetail: {},
                                                                    category: mainVariables.valueMapListProfilePage[index].category,
                                                                    valueMapList: mainVariables.valueMapListProfilePage,
                                                                    index: index,
                                                                  );
                                                                },
                                                                icon: Icon(
                                                                  Icons.more_vert,
                                                                  color: Theme.of(context).colorScheme.onPrimary,
                                                                  size: 25,
                                                                ))
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                      ],
                                                    ),
                                                  ),
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value =
                                                                mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value =
                                                                mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];
                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Container(
                                                      height: height / 9,
                                                      color: Theme.of(context).colorScheme.background,
                                                      alignment: Alignment.topLeft,
                                                      child: Padding(
                                                        padding: const EdgeInsets.all(12.0),
                                                        child: RichText(
                                                          textAlign: TextAlign.left,
                                                          text: TextSpan(
                                                            children: conversationFunctionsMain.spanListBillBoardHome(
                                                                message: mainVariables.valueMapListProfilePage[index].title.length > 140
                                                                    ? mainVariables.valueMapListProfilePage[index].title.substring(0, 140)
                                                                    : mainVariables.valueMapListProfilePage[index].title,
                                                                context: context,
                                                                isByte: true),
                                                          ),
                                                        ) /*Text( mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                     style:TextStyle(
                                                       fontSize: _text.scale(14),
                                                       fontWeight: FontWeight.w400,
                                                       color: Color(0XFF403D3D),
                                                     ),
                                                     textAlign: TextAlign.justify,
                                                     maxLines: 3,
                                                     overflow: TextOverflow.ellipsis,
                                                   )*/
                                                        ,
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Row(children: [
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.likeButtonHomeListWidget(
                                                                likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                index: index,
                                                                context: context,
                                                                initFunction: () {},
                                                                modelSetState: setState,
                                                                notUse: true,
                                                                dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                type: mainVariables.valueMapListProfilePage[index].type,
                                                                billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                    ? "news"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                    ? "forums"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                    ? "survey"
                                                                    : "billboard",
                                                                /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                                image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                title: mainVariables.valueMapListProfilePage[index].title,
                                                                description: "",
                                                                fromWhere: 'homePage',
                                                                responseId: '',
                                                                controller: bottomSheetController,
                                                                commentId: '',
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseFocusList: mainVariables.responseFocusList,
                                                                responseUserId: '',
                                                                valueMapList: mainVariables.valueMapListProfilePage,
                                                              ),
                                                              SizedBox(
                                                                width: width / 27.4,
                                                              ),
                                                              /*bookMarkWidget(
                                                        bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                        context: context,
                                                        scale: 3.2,
                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                        type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                        modelSetState: modelSetState,
                                                        index: index,
                                                        initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                        notUse: false,
                                                      ),*/
                                                              billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                            ]),
                                                            Row(
                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                                    mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                                    ? const SizedBox()
                                                                    : GestureDetector(
                                                                  onTap: () {
                                                                    billboardWidgetsMain.believedTabBottomSheet(
                                                                        context: context,
                                                                        id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                        type: mainVariables.valueMapListProfilePage[index].type);
                                                                  },
                                                                  child: Stack(
                                                                    children: [
                                                                      const SizedBox(
                                                                        height: 30,
                                                                        width: 30,
                                                                      ),
                                                                      Positioned(
                                                                        left: 0,
                                                                        bottom: 0,
                                                                        child: Container(
                                                                          height: 25,
                                                                          width: 25,
                                                                          decoration: BoxDecoration(
                                                                              borderRadius: BorderRadius.circular(5),
                                                                              image: const DecorationImage(
                                                                                image: AssetImage(
                                                                                    "lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                              )),
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                        top: 0,
                                                                        right: 0,
                                                                        child: Container(
                                                                          height: 15,
                                                                          width: 15,
                                                                          decoration:
                                                                          const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                          child: Center(
                                                                              child: Text(
                                                                                mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                                    ? "9+"
                                                                                    : mainVariables.valueMapListProfilePage[index].repostCount
                                                                                    .toString(),
                                                                                style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                              )),
                                                                        ),
                                                                      )
                                                                    ],
                                                                  ),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                                SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                  child: billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xFF017FDB),
                                                                    fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                 Navigator.push(context,
                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                          userId: userIdMain,
                                                                        );
                                                                      }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            )
                                                : //final //believed, private, status1, believedCategory, NoFiles, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                  boxShadow: [
                                                    BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                                  ]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                            style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                                                                color: Theme.of(context)
                                                                    .colorScheme
                                                                    .background) /*const TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white)*/,
                                                            textAlign: TextAlign.center,
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                        width: width / 3.5,
                                                        child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                            ? billboardWidgetsMain.getRepostBelieveButton(
                                                          heightValue: height / 33.76,
                                                          billboardUserid: mainVariables.valueMapListProfilePage[index].repostUser,
                                                          billboardUserName: mainVariables.valueMapListProfilePage[index].repostUserName,
                                                          context: context,
                                                          modelSetState: setState,
                                                          index: index,
                                                          background: true,
                                                        )
                                                            : const SizedBox(),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //exclusive //notBelieved, private, status1, believedCategory, NoFiles, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Column(
                                                children: [
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                              id:valueMapList[index].userId,type:'forums',index:0);}));*/
                                                                      Navigator.push(context,
                                                                          MaterialPageRoute(builder: (BuildContext context) {
                                                                            return UserBillBoardProfilePage(
                                                                                userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                          }));
                                                                    },
                                                                    child: Text(
                                                                        mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                        style: Theme.of(context)
                                                                            .textTheme
                                                                            .labelLarge /*TextStyle(
                                                                      fontSize: text.scale(12),
                                                                      color: const Color(0XFF202020),
                                                                      fontWeight: FontWeight.w700,
                                                                      fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                        fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                      fontSize: text.scale(11),
                                                                      color: const Color(0XFF737373),
                                                                      fontWeight: FontWeight.w400,
                                                                    ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                ? billboardWidgetsMain.getHomeBelieveButton(
                                                              heightValue: height / 33.76,
                                                              isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                              billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                              billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                              context: context,
                                                              modelSetState: setState,
                                                              index: index,
                                                              background: false,
                                                            )
                                                                : const SizedBox(),

                                                            ///more_vert
                                                            IconButton(
                                                                onPressed: () {
                                                                  billboardWidgetsMain.bottomSheet(
                                                                    context1: context,
                                                                    myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                    type: "billboard",
                                                                    responseId: "",
                                                                    responseUserId: "",
                                                                    commentId: "",
                                                                    commentUserId: "",
                                                                    callFunction: getData,
                                                                    contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                    modelSetState: setState,
                                                                    responseDetail: {},
                                                                    category: mainVariables.valueMapListProfilePage[index].category,
                                                                    valueMapList: mainVariables.valueMapListProfilePage,
                                                                    index: index,
                                                                  );
                                                                },
                                                                icon: Icon(
                                                                  Icons.more_vert,
                                                                  color: Theme.of(context).colorScheme.onPrimary /*Colors.black*/,
                                                                  size: 25,
                                                                ))
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                      ],
                                                    ),
                                                  ),
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];
                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Container(
                                                      height: height / 9,
                                                      color: Theme.of(context).colorScheme.background,
                                                      alignment: Alignment.topLeft,
                                                      child: Padding(
                                                        padding: const EdgeInsets.all(12.0),
                                                        child: RichText(
                                                          textAlign: TextAlign.left,
                                                          text: TextSpan(
                                                            children: conversationFunctionsMain.spanListBillBoardHome(
                                                                message: mainVariables.valueMapListProfilePage[index].title.length > 140
                                                                    ? mainVariables.valueMapListProfilePage[index].title.substring(0, 140)
                                                                    : mainVariables.valueMapListProfilePage[index].title,
                                                                context: context,
                                                                isByte: true),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Row(children: [
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.likeButtonHomeListWidget(
                                                                likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                index: index,
                                                                context: context,
                                                                initFunction: () {},
                                                                modelSetState: setState,
                                                                notUse: true,
                                                                dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                type: mainVariables.valueMapListProfilePage[index].type,
                                                                billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                    ? "news"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                    ? "forums"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                    ? "survey"
                                                                    : "billboard",
                                                                /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                                image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                title: mainVariables.valueMapListProfilePage[index].title,
                                                                description: "",
                                                                fromWhere: 'homePage',
                                                                responseId: '',
                                                                controller: bottomSheetController,
                                                                commentId: '',
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseFocusList: mainVariables.responseFocusList,
                                                                responseUserId: '',
                                                                valueMapList: mainVariables.valueMapListProfilePage,
                                                              ),
                                                              SizedBox(
                                                                width: width / 27.4,
                                                              ),
                                                              /*bookMarkWidget(
                                                        bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                        context: context,
                                                        scale: 3.2,
                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                        type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                        modelSetState: modelSetState,
                                                        index: index,
                                                        initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                        notUse: false,
                                                      ),*/
                                                              billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                            ]),
                                                            Row(
                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                                    mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                                    ? const SizedBox()
                                                                    : GestureDetector(
                                                                  onTap: () {
                                                                    billboardWidgetsMain.believedTabBottomSheet(
                                                                        context: context,
                                                                        id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                        type: mainVariables.valueMapListProfilePage[index].type);
                                                                  },
                                                                  child: Stack(
                                                                    children: [
                                                                      const SizedBox(
                                                                        height: 30,
                                                                        width: 30,
                                                                      ),
                                                                      Positioned(
                                                                        left: 0,
                                                                        bottom: 0,
                                                                        child: Container(
                                                                          height: 25,
                                                                          width: 25,
                                                                          decoration: BoxDecoration(
                                                                              borderRadius: BorderRadius.circular(5),
                                                                              image: const DecorationImage(
                                                                                image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                              )),
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                        top: 0,
                                                                        right: 0,
                                                                        child: Container(
                                                                          height: 15,
                                                                          width: 15,
                                                                          decoration:
                                                                          const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                          child: Center(
                                                                              child: Text(
                                                                                mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                                    ? "9+"
                                                                                    : mainVariables.valueMapListProfilePage[index].repostCount
                                                                                    .toString(),
                                                                                style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                              )),
                                                                        ),
                                                                      )
                                                                    ],
                                                                  ),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                                SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                  child: billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                fontSize: text.scale(10),
                                                                color: const Color(0xFF017FDB),
                                                                fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /* InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));

                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.tertiary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            )
                                                : //final  //public, status1, believedCategory, NoFiles, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 50.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Column(
                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Image.asset(
                                                                "lib/Constants/Assets/BillBoard/failImage.png",
                                                                scale: 2,
                                                              ),
                                                              Text(
                                                                "whoops!",
                                                                style: Theme.of(context)
                                                                    .textTheme
                                                                    .titleLarge!
                                                                    .copyWith(fontStyle: FontStyle.italic, color: Theme.of(context).colorScheme.background),
                                                                /* TextStyle(
                                                            fontSize: 24,
                                                            fontWeight: FontWeight.w900,
                                                            color: Colors.white,
                                                            fontStyle: FontStyle.italic),*/
                                                                textAlign: TextAlign.center,
                                                              ),
                                                            ],
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Content might be deleted or no longer active to display",
                                                            style: Theme.of(context)
                                                                .textTheme
                                                                .bodyMedium!
                                                                .copyWith(color: Theme.of(context).colorScheme.background),
                                                            /*TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white),*/
                                                            textAlign: TextAlign.center,
                                                          )),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //exclusive  //status0, believedCategory, NoFiles, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Column(
                                                children: [
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                              id:valueMapList[index].userId,type:'forums',index:0);}));*/
                                                                     Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                            userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                        style: Theme.of(context)
                                                                            .textTheme
                                                                            .labelLarge /*TextStyle(
                                                              fontSize: text.scale(12),
                                                              color: const Color(0XFF202020),
                                                              fontWeight: FontWeight.w700,
                                                              fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                fontSize: text.scale(10),
                                                                color: const Color(0XFF737373),
                                                                fontWeight: FontWeight.w400,
                                                                fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                              fontSize: text.scale(11),
                                                              color: const Color(0XFF737373),
                                                              fontWeight: FontWeight.w400,
                                                            ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0XFF737373),
                                                                  fontWeight: FontWeight.w400,
                                                                  fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                ? billboardWidgetsMain.getHomeBelieveButton(
                                                              heightValue: height / 33.76,
                                                              isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                              billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                              billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                              context: context,
                                                              modelSetState: setState,
                                                              index: index,
                                                              background: false,
                                                            )
                                                                : const SizedBox(),

                                                            ///more_vert
                                                            IconButton(
                                                                onPressed: () {
                                                                  billboardWidgetsMain.bottomSheet(
                                                                    context1: context,
                                                                    myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                    type: "billboard",
                                                                    responseId: "",
                                                                    responseUserId: "",
                                                                    commentId: "",
                                                                    commentUserId: "",
                                                                    callFunction: getData,
                                                                    contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                    modelSetState: setState,
                                                                    responseDetail: {},
                                                                    category: mainVariables.valueMapListProfilePage[index].category,
                                                                    valueMapList: mainVariables.valueMapListProfilePage,
                                                                    index: index,
                                                                  );
                                                                },
                                                                icon: Icon(
                                                                  Icons.more_vert,
                                                                  color: Theme.of(context).colorScheme.onPrimary /*Colors.black*/,
                                                                  size: 25,
                                                                ))
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                      ],
                                                    ),
                                                  ),
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];
                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Container(
                                                      height: height / 9,
                                                      color: Theme.of(context).colorScheme.background,
                                                      alignment: Alignment.topLeft,
                                                      child: Padding(
                                                        padding: const EdgeInsets.all(12.0),
                                                        child: RichText(
                                                          textAlign: TextAlign.left,
                                                          text: TextSpan(
                                                            children: conversationFunctionsMain.spanListBillBoardHome(
                                                                message: mainVariables.valueMapListProfilePage[index].title.length > 140
                                                                    ? mainVariables.valueMapListProfilePage[index].title.substring(0, 140)
                                                                    : mainVariables.valueMapListProfilePage[index].title,
                                                                context: context,
                                                                isByte: true),
                                                          ),
                                                        ) /*Text( mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                     style:TextStyle(
                                                       fontSize: _text.scale(14),
                                                       fontWeight: FontWeight.w400,
                                                       color: Color(0XFF403D3D),
                                                     ),
                                                     textAlign: TextAlign.justify,
                                                     maxLines: 3,
                                                     overflow: TextOverflow.ellipsis,
                                                   )*/
                                                        ,
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Row(children: [
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.likeButtonHomeListWidget(
                                                                likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                index: index,
                                                                context: context,
                                                                initFunction: () {},
                                                                modelSetState: setState,
                                                                notUse: true,
                                                                dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                type: mainVariables.valueMapListProfilePage[index].type,
                                                                billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                    ? "news"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                    ? "forums"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                    ? "survey"
                                                                    : "billboard",
                                                                /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                                image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                title: mainVariables.valueMapListProfilePage[index].title,
                                                                description: "",
                                                                fromWhere: 'homePage',
                                                                responseId: '',
                                                                controller: bottomSheetController,
                                                                commentId: '',
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseFocusList: mainVariables.responseFocusList,
                                                                responseUserId: '',
                                                                valueMapList: mainVariables.valueMapListProfilePage,
                                                              ),
                                                              SizedBox(
                                                                width: width / 27.4,
                                                              ),
                                                              /*bookMarkWidget(
                                                        bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                        context: context,
                                                        scale: 3.2,
                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                        type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                        modelSetState: modelSetState,
                                                        index: index,
                                                        initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                        notUse: false,
                                                      ),*/
                                                              billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                            ]),
                                                            Row(
                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                                    mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                                    ? const SizedBox()
                                                                    : GestureDetector(
                                                                  onTap: () {
                                                                    billboardWidgetsMain.believedTabBottomSheet(
                                                                        context: context,
                                                                        id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                        type: mainVariables.valueMapListProfilePage[index].type);
                                                                  },
                                                                  child: Stack(
                                                                    children: [
                                                                      const SizedBox(
                                                                        height: 30,
                                                                        width: 30,
                                                                      ),
                                                                      Positioned(
                                                                        left: 0,
                                                                        bottom: 0,
                                                                        child: Container(
                                                                          height: 25,
                                                                          width: 25,
                                                                          decoration: BoxDecoration(
                                                                              borderRadius: BorderRadius.circular(5),
                                                                              image: const DecorationImage(
                                                                                image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                              )),
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                        top: 0,
                                                                        right: 0,
                                                                        child: Container(
                                                                          height: 15,
                                                                          width: 15,
                                                                          decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                          child: Center(
                                                                              child: Text(
                                                                                mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                                    ? "9+"
                                                                                    : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                                style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                              )),
                                                                        ),
                                                                      )
                                                                    ],
                                                                  ),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                                SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                  child: billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(
                                                        fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*  InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return QuestionnairePage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            defaultIndex: answeredQuestion,
                                                                          );
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            )
                                                : //final //NonBelievedCategory, NoFiles, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                //BoxShadow(color: Colors.black26.withOpacity(0.1), offset: const Offset(0.0, -0.5), blurRadius: 1.0, spreadRadius: 1.0)
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Column(
                                                children: [
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                                return UserProfilePage(
                                                                  id:valueMapList[index].userId,type:'forums',index:0);}));*/
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                        style: Theme.of(context)
                                                                            .textTheme
                                                                            .labelLarge /*TextStyle(
                                                          fontSize: text.scale(12),
                                                          color: const Color(0XFF202020),
                                                          fontWeight: FontWeight.w700,
                                                          fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /* TextStyle(
                                                            fontSize: text.scale(10),
                                                            color: const Color(0XFF737373),
                                                            fontWeight: FontWeight.w400,
                                                            fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                          fontSize: text.scale(11),
                                                          color: const Color(0XFF737373),
                                                          fontWeight: FontWeight.w400,
                                                        ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                              fontSize: text.scale(10),
                                                              color: const Color(0XFF737373),
                                                              fontWeight: FontWeight.w400,
                                                              fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                ? billboardWidgetsMain.getHomeBelieveButton(
                                                              heightValue: height / 33.76,
                                                              isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                              billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                              billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                              context: context,
                                                              modelSetState: setState,
                                                              index: index,
                                                              background: false,
                                                            )
                                                                : const SizedBox(),

                                                            ///more_vert
                                                            IconButton(
                                                                onPressed: () {
                                                                  billboardWidgetsMain.bottomSheet(
                                                                    context1: context,
                                                                    myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                    type: "billboard",
                                                                    responseId: "",
                                                                    responseUserId: "",
                                                                    commentId: "",
                                                                    commentUserId: "",
                                                                    callFunction: getData,
                                                                    contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                    modelSetState: setState,
                                                                    responseDetail: {},
                                                                    category: mainVariables.valueMapListProfilePage[index].category,
                                                                    valueMapList: mainVariables.valueMapListProfilePage,
                                                                    index: index,
                                                                  );
                                                                },
                                                                icon: Icon(
                                                                  Icons.more_vert,
                                                                  color: Theme.of(context).colorScheme.onPrimary /* Colors.black*/,
                                                                  size: 25,
                                                                ))
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                      ],
                                                    ),
                                                  ),
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];
                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Container(
                                                      height: height / 9,
                                                      color: Theme.of(context).colorScheme.background,
                                                      alignment: Alignment.topLeft,
                                                      child: Padding(
                                                        padding: const EdgeInsets.all(12.0),
                                                        child: RichText(
                                                          textAlign: TextAlign.left,
                                                          text: TextSpan(
                                                            children: conversationFunctionsMain.spanListBillBoardHome(
                                                                message: mainVariables.valueMapListProfilePage[index].title.length > 140
                                                                    ? mainVariables.valueMapListProfilePage[index].title.substring(0, 140)
                                                                    : mainVariables.valueMapListProfilePage[index].title,
                                                                context: context,
                                                                isByte: true),
                                                          ),
                                                        ) /*Text( mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                     style:TextStyle(
                                                       fontSize: _text.scale(14),
                                                       fontWeight: FontWeight.w400,
                                                       color: Color(0XFF403D3D),
                                                     ),
                                                     textAlign: TextAlign.justify,
                                                     maxLines: 3,
                                                     overflow: TextOverflow.ellipsis,
                                                   )*/
                                                        ,
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background.withOpacity(0.5),
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            Row(children: [
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.likeButtonHomeListWidget(
                                                                likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                                index: index,
                                                                context: context,
                                                                initFunction: () {},
                                                                modelSetState: setState,
                                                                notUse: true,
                                                                dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                                likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                                dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                                type: mainVariables.valueMapListProfilePage[index].type,
                                                                billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                    ? "news"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                    ? "forums"
                                                                    : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                    ? "survey"
                                                                    : "billboard",
                                                                /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                                image: mainVariables.valueMapListProfilePage[index].avatar,
                                                                title: mainVariables.valueMapListProfilePage[index].title,
                                                                description: "",
                                                                fromWhere: 'homePage',
                                                                responseId: '',
                                                                controller: bottomSheetController,
                                                                commentId: '',
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseFocusList: mainVariables.responseFocusList,
                                                                responseUserId: '',
                                                                valueMapList: mainVariables.valueMapListProfilePage,
                                                              ),
                                                              SizedBox(
                                                                width: width / 27.4,
                                                              ),
                                                              /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3.2,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false,
                                                          ),*/
                                                              billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                            ]),
                                                            Row(
                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                                    mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                                    ? const SizedBox()
                                                                    : GestureDetector(
                                                                  onTap: () {
                                                                    billboardWidgetsMain.believedTabBottomSheet(
                                                                        context: context,
                                                                        id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                        type: mainVariables.valueMapListProfilePage[index].type);
                                                                  },
                                                                  child: Stack(
                                                                    children: [
                                                                      const SizedBox(
                                                                        height: 30,
                                                                        width: 30,
                                                                      ),
                                                                      Positioned(
                                                                        left: 0,
                                                                        bottom: 0,
                                                                        child: Container(
                                                                          height: 25,
                                                                          width: 25,
                                                                          decoration: BoxDecoration(
                                                                              borderRadius: BorderRadius.circular(5),
                                                                              image: const DecorationImage(
                                                                                image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                              )),
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                        top: 0,
                                                                        right: 0,
                                                                        child: Container(
                                                                          height: 15,
                                                                          width: 15,
                                                                          decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                          child: Center(
                                                                              child: Text(
                                                                                mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                                    ? "9+"
                                                                                    : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                                style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                              )),
                                                                        ),
                                                                      )
                                                                    ],
                                                                  ),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                                SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                  child: billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ),
                                                                SizedBox(
                                                                  width: width / 27.4,
                                                                ),
                                                              ],
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /* InkWell(
                                                        onTap: () async {
                                                          billboardWidgetsMain.getLikeDislikeUsersList(
                                                              context: context,
                                                              billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                              responseId:"",
                                                              commentId:"",
                                                              billBoardType:"billboard",
                                                              action:"dislikes",
                                                              likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                              disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                              index: 2,
                                                              viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                              isViewIncluded: true
                                                          );
                                                        },
                                                        child: Text(
                                                          " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                          style: TextStyle(
                                                              fontSize: _text.scale(10),
                                                              color: Colors.black54),
                                                        ),
                                                      ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return QuestionnairePage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            defaultIndex: answeredQuestion,
                                                                          );
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            )
                                                : mainVariables.valueMapListProfilePage[index].postType == "repost"
                                                ? mainVariables.activeTypeMain.value == "believed"
                                                ? mainVariables.valueMapListProfilePage[index].repostStatus == 1
                                                ? mainVariables.valueMapListProfilePage[index].repostType == "private"
                                                ? mainVariables.valueMapListProfilePage[index].repostBelieved
                                                ? Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value =
                                                                mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value =
                                                                mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                            height: height / 3.97,
                                                            decoration: const BoxDecoration(
                                                              color: Colors.black,
                                                              borderRadius:
                                                              BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                            ),
                                                            child: CarouselSlider.builder(
                                                              carouselController: _carController,
                                                              options: CarouselOptions(
                                                                  enableInfiniteScroll: false,
                                                                  enlargeCenterPage: false,
                                                                  onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                    setState(() {
                                                                      carouselIndexGlobal = index;
                                                                    });
                                                                  }),
                                                              itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                              itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                                return mainVariables.valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                    "image"
                                                                    ? Image.network(
                                                                    mainVariables.valueMapListProfilePage[index].files[carouselIndex].file,
                                                                    fit: BoxFit.fill, errorBuilder: (context, __, error) {
                                                                  return Image.asset("lib/Constants/Assets/Settings/coverImage_default.png");
                                                                })
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                    "video"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constan,kits/Assets/Settings/coverImage_default.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                        height: 50,
                                                                        width: 50,
                                                                        decoration: BoxDecoration(
                                                                            shape: BoxShape.circle, color: Colors.black26.withOpacity(0.7)),
                                                                        child: const Icon(
                                                                          Icons.play_arrow_sharp,
                                                                          color: Colors.white,
                                                                          size: 40,
                                                                        ))
                                                                  ],
                                                                )
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                    "document"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                      height: 50,
                                                                      width: 50,
                                                                      decoration: BoxDecoration(
                                                                        shape: BoxShape.circle,
                                                                        color: Colors.black26.withOpacity(0.3),
                                                                      ),
                                                                      child: Center(
                                                                        child: Image.asset(
                                                                          "lib/Constants/Assets/BillBoard/document.png",
                                                                          color: Colors.white,
                                                                          height: 25,
                                                                          width: 25,
                                                                        ),
                                                                      ),
                                                                    )
                                                                  ],
                                                                )
                                                                    : const SizedBox();
                                                              },
                                                            )),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].files.length > 1
                                                            ? Positioned(
                                                            bottom: 75,
                                                            left: (width / 2) - 35,
                                                            child: SizedBox(
                                                              height: 5,
                                                              child: ListView.builder(
                                                                  shrinkWrap: true,
                                                                  scrollDirection: Axis.horizontal,
                                                                  physics: const NeverScrollableScrollPhysics(),
                                                                  itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                                  itemBuilder: (BuildContext context, int index1) {
                                                                    return Container(
                                                                      height: 5,
                                                                      width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                      margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                      decoration: BoxDecoration(
                                                                          borderRadius: BorderRadius.circular(8),
                                                                          color: carouselIndexGlobal == index1
                                                                              ? const Color(0XFF0EA102)
                                                                              : Colors.white),
                                                                    );
                                                                  }),
                                                            ))
                                                            : const SizedBox(),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(
                                                                top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0);}));*/
                                                                     Navigator.push(context,
                                                                          MaterialPageRoute(builder: (BuildContext context) {
                                                                            return UserBillBoardProfilePage(
                                                                                userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                          }));

                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username
                                                                          .toString()
                                                                          .capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .bodyLarge, /*TextStyle(
                                                                          fontSize: text.scale(12),
                                                                          color: const Color(0XFF202020),
                                                                          fontWeight: FontWeight.w700,
                                                                          fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0XFF737373),
                                                                            fontWeight: FontWeight.w400,
                                                                            fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                          fontSize: text.scale(11),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                        ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                              fontSize: text.scale(10),
                                                                              color: const Color(0XFF737373),
                                                                              fontWeight: FontWeight.w400,
                                                                              fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              responseUserId: '',
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0xFF017FDB),
                                                                    fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*  InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context,
                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                          userId: userIdMain,
                                                                        );
                                                                      }));

                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState:setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final //believed, private, status1, believedCategory, files, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                            style: Theme.of(context)
                                                                .textTheme
                                                                .bodyMedium!
                                                                .copyWith(color: Theme.of(context).colorScheme.background),
                                                            /*const TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white)*/
                                                            textAlign: TextAlign.center,
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                        width: width / 3.5,
                                                        child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                            ? billboardWidgetsMain.getRepostBelieveButton(
                                                          heightValue: height / 33.76,
                                                          billboardUserid: mainVariables.valueMapListProfilePage[index].repostUser,
                                                          billboardUserName: mainVariables.valueMapListProfilePage[index].repostUserName,
                                                          context: context,
                                                          modelSetState: setState,
                                                          index: index,
                                                          background: true,
                                                        )
                                                            : const SizedBox(),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //exclusive //notBelieved, private, status1, believedCategory, files, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                            height: height / 3.97,
                                                            decoration: const BoxDecoration(
                                                              color: Colors.black,
                                                              borderRadius:
                                                              BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                            ),
                                                            child: CarouselSlider.builder(
                                                              carouselController: _carController,
                                                              options: CarouselOptions(
                                                                  enableInfiniteScroll: false,
                                                                  enlargeCenterPage: false,
                                                                  onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                    setState(() {
                                                                      carouselIndexGlobal = index;
                                                                    });
                                                                  }),
                                                              itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                              itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                                return mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "image"
                                                                    ? Image.network(
                                                                    mainVariables.valueMapListProfilePage[index].files[carouselIndex].file,
                                                                    fit: BoxFit.fill, errorBuilder: (context, __, error) {
                                                                  return Image.asset("lib/Constants/Assets/Settings/coverImage_default.png");
                                                                })
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "video"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage_default.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                        height: 50,
                                                                        width: 50,
                                                                        decoration: BoxDecoration(
                                                                            shape: BoxShape.circle, color: Colors.black26.withOpacity(0.7)),
                                                                        child: const Icon(
                                                                          Icons.play_arrow_sharp,
                                                                          color: Colors.white,
                                                                          size: 40,
                                                                        ))
                                                                  ],
                                                                )
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                    "document"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                      height: 50,
                                                                      width: 50,
                                                                      decoration: BoxDecoration(
                                                                        shape: BoxShape.circle,
                                                                        color: Colors.black26.withOpacity(0.3),
                                                                      ),
                                                                      child: Center(
                                                                        child: Image.asset(
                                                                          "lib/Constants/Assets/BillBoard/document.png",
                                                                          color: Colors.white,
                                                                          height: 25,
                                                                          width: 25,
                                                                        ),
                                                                      ),
                                                                    )
                                                                  ],
                                                                )
                                                                    : const SizedBox();
                                                              },
                                                            )),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].files.length > 1
                                                            ? Positioned(
                                                            bottom: 75,
                                                            left: (width / 2) - 35,
                                                            child: SizedBox(
                                                              height: 5,
                                                              child: ListView.builder(
                                                                  shrinkWrap: true,
                                                                  scrollDirection: Axis.horizontal,
                                                                  physics: const NeverScrollableScrollPhysics(),
                                                                  itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                                  itemBuilder: (BuildContext context, int index1) {
                                                                    return Container(
                                                                      height: 5,
                                                                      width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                      margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                      decoration: BoxDecoration(
                                                                          borderRadius: BorderRadius.circular(8),
                                                                          color:
                                                                          carouselIndexGlobal == index1 ? const Color(0XFF0EA102) : Colors.white),
                                                                    );
                                                                  }),
                                                            ))
                                                            : const SizedBox(),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(
                                                                top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,

                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0);}));*/
                                                                      Navigator.push(context,
                                                                          MaterialPageRoute(builder: (BuildContext context) {
                                                                            return UserBillBoardProfilePage(
                                                                                userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                          }));

                                                                    },
                                                                    child: Text(
                                                                        mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                        style: Theme.of(context)
                                                                            .textTheme
                                                                            .bodyLarge /*TextStyle(
                                                                      fontSize: text.scale(12),
                                                                      color: const Color(0XFF202020),
                                                                      fontWeight: FontWeight.w700,
                                                                      fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                        fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                      fontSize: text.scale(11),
                                                                      color: const Color(0XFF737373),
                                                                      fontWeight: FontWeight.w400,
                                                                    ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              responseUserId: '',
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                fontSize: text.scale(10),
                                                                color: const Color(0xFF017FDB),
                                                                fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*  InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final  //public, status1, believedCategory, files, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.5),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 50.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Column(
                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Image.asset(
                                                                "lib/Constants/Assets/BillBoard/failImage.png",
                                                                scale: 2,
                                                              ),
                                                              Text(
                                                                "whoops!",
                                                                style: Theme.of(context)
                                                                    .textTheme
                                                                    .titleLarge!
                                                                    .copyWith(fontStyle: FontStyle.italic, color: Theme.of(context).colorScheme.background),
                                                                /*TextStyle(
                                                            fontSize: 24,
                                                            fontWeight: FontWeight.w900,
                                                            color: Colors.white,
                                                            fontStyle: FontStyle.italic),*/
                                                                textAlign: TextAlign.center,
                                                              ),
                                                            ],
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Content might be deleted or no longer active to display",
                                                            style: Theme.of(context)
                                                                .textTheme
                                                                .bodyMedium!
                                                                .copyWith(color: Theme.of(context).colorScheme.background),
                                                            /*TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white),*/
                                                            textAlign: TextAlign.center,
                                                          )),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //exclusive  //status0, believedCategory, files, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                                /*BoxShadow(
                                        color: Colors.black26.withOpacity(0.1), offset: const Offset(0.0, 0.0), blurRadius: 1.0, spreadRadius: 1.0)*/
                                              ]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                            height: height / 3.97,
                                                            decoration: const BoxDecoration(
                                                              color: Colors.black,
                                                              borderRadius: BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                            ),
                                                            child: CarouselSlider.builder(
                                                              carouselController: _carController,
                                                              options: CarouselOptions(
                                                                  enableInfiniteScroll: false,
                                                                  enlargeCenterPage: false,
                                                                  onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                    setState(() {
                                                                      carouselIndexGlobal = index;
                                                                    });
                                                                  }),
                                                              itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                              itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                                return mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "image"
                                                                    ? Image.network(mainVariables.valueMapListProfilePage[index].files[carouselIndex].file,
                                                                    fit: BoxFit.fill, errorBuilder: (context, __, error) {
                                                                      return Image.asset("lib/Constants/Assets/Settings/coverImage_default.png");
                                                                    })
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "video"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage_default.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                        height: 50,
                                                                        width: 50,
                                                                        decoration: BoxDecoration(
                                                                            shape: BoxShape.circle, color: Colors.black26.withOpacity(0.7)),
                                                                        child: const Icon(
                                                                          Icons.play_arrow_sharp,
                                                                          color: Colors.white,
                                                                          size: 40,
                                                                        ))
                                                                  ],
                                                                )
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "document"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                      height: 50,
                                                                      width: 50,
                                                                      decoration: BoxDecoration(
                                                                        shape: BoxShape.circle,
                                                                        color: Colors.black26.withOpacity(0.3),
                                                                      ),
                                                                      child: Center(
                                                                        child: Image.asset(
                                                                          "lib/Constants/Assets/BillBoard/document.png",
                                                                          color: Colors.white,
                                                                          height: 25,
                                                                          width: 25,
                                                                        ),
                                                                      ),
                                                                    )
                                                                  ],
                                                                )
                                                                    : const SizedBox();
                                                              },
                                                            )),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].files.length > 1
                                                            ? Positioned(
                                                            bottom: 75,
                                                            left: (width / 2) - 35,
                                                            child: SizedBox(
                                                              height: 5,
                                                              child: ListView.builder(
                                                                  shrinkWrap: true,
                                                                  scrollDirection: Axis.horizontal,
                                                                  physics: const NeverScrollableScrollPhysics(),
                                                                  itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                                  itemBuilder: (BuildContext context, int index1) {
                                                                    return Container(
                                                                      height: 5,
                                                                      width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                      margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                      decoration: BoxDecoration(
                                                                          borderRadius: BorderRadius.circular(8),
                                                                          color: carouselIndexGlobal == index1 ? const Color(0XFF0EA102) : Colors.white),
                                                                    );
                                                                  }),
                                                            ))
                                                            : const SizedBox(),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(
                                                                top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,

                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0);}));*/
                                                                     Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                            userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                        style: Theme.of(context)
                                                                            .textTheme
                                                                            .bodyLarge /*TextStyle(
                                                              fontSize: text.scale(12),
                                                              color: const Color(0XFF202020),
                                                              fontWeight: FontWeight.w700,
                                                              fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                fontSize: text.scale(10),
                                                                color: const Color(0XFF737373),
                                                                fontWeight: FontWeight.w400,
                                                                fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                              fontSize: text.scale(11),
                                                              color: const Color(0XFF737373),
                                                              fontWeight: FontWeight.w400,
                                                            ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0XFF737373),
                                                                  fontWeight: FontWeight.w400,
                                                                  fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              responseUserId: '',
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                        fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /* InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return QuestionnairePage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            defaultIndex: answeredQuestion,
                                                                          );
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final //NonBelievedCategory, files, byte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                            height: height / 3.97,
                                                            decoration: const BoxDecoration(
                                                              color: Colors.black,
                                                              borderRadius: BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                            ),
                                                            child: CarouselSlider.builder(
                                                              carouselController: _carController,
                                                              options: CarouselOptions(
                                                                  enableInfiniteScroll: false,
                                                                  enlargeCenterPage: false,
                                                                  onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                    setState(() {
                                                                      carouselIndexGlobal = index;
                                                                    });
                                                                  }),
                                                              itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                              itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                                return mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "image"
                                                                    ? Image.network(mainVariables.valueMapListProfilePage[index].files[carouselIndex].file,
                                                                    fit: BoxFit.fill, errorBuilder: (context, __, error) {
                                                                      return Image.asset("lib/Constants/Assets/Settings/coverImage_default.png");
                                                                    })
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "video"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage_default.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                        height: 50,
                                                                        width: 50,
                                                                        decoration:
                                                                        BoxDecoration(shape: BoxShape.circle, color: Colors.black26.withOpacity(0.7)),
                                                                        child: const Icon(
                                                                          Icons.play_arrow_sharp,
                                                                          color: Colors.white,
                                                                          size: 40,
                                                                        ))
                                                                  ],
                                                                )
                                                                    : mainVariables.valueMapListProfilePage[index].files[carouselIndex].type == "document"
                                                                    ? Stack(
                                                                  alignment: Alignment.center,
                                                                  children: [
                                                                    Image.asset(
                                                                      "lib/Constants/Assets/Settings/coverImage.png",
                                                                      fit: BoxFit.fill,
                                                                      height: height / 3.97,
                                                                    ),
                                                                    Container(
                                                                      height: 50,
                                                                      width: 50,
                                                                      decoration: BoxDecoration(
                                                                        shape: BoxShape.circle,
                                                                        color: Colors.black26.withOpacity(0.3),
                                                                      ),
                                                                      child: Center(
                                                                        child: Image.asset(
                                                                          "lib/Constants/Assets/BillBoard/document.png",
                                                                          color: Colors.white,
                                                                          height: 25,
                                                                          width: 25,
                                                                        ),
                                                                      ),
                                                                    )
                                                                  ],
                                                                )
                                                                    : const SizedBox();
                                                              },
                                                            )),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type:mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].files.length > 1
                                                            ? Positioned(
                                                            bottom: 75,
                                                            left: (width / 2) - 35,
                                                            child: SizedBox(
                                                              height: 5,
                                                              child: ListView.builder(
                                                                  shrinkWrap: true,
                                                                  scrollDirection: Axis.horizontal,
                                                                  physics: const NeverScrollableScrollPhysics(),
                                                                  itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                                  itemBuilder: (BuildContext context, int index1) {
                                                                    return Container(
                                                                      height: 5,
                                                                      width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                      margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                      decoration: BoxDecoration(
                                                                          borderRadius: BorderRadius.circular(8),
                                                                          color: carouselIndexGlobal == index1 ? const Color(0XFF0EA102) : Colors.white),
                                                                    );
                                                                  }),
                                                            ))
                                                            : const SizedBox(),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding:
                                                            EdgeInsets.only(top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0);}));*/
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .bodyLarge, /*TextStyle(
                                                          fontSize: text.scale(12),
                                                          color: const Color(0XFF202020),
                                                          fontWeight: FontWeight.w700,
                                                          fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                            fontSize: text.scale(10),
                                                            color: const Color(0XFF737373),
                                                            fontWeight: FontWeight.w400,
                                                            fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                          fontSize: text.scale(11),
                                                          color: const Color(0XFF737373),
                                                          fontWeight: FontWeight.w400,
                                                        ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                              fontSize: text.scale(10),
                                                              color: const Color(0XFF737373),
                                                              fontWeight: FontWeight.w400,
                                                              fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              responseUserId: '',
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: "billboard",
                                                                      action: "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*  InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:"billboard",
                                                          action:"dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];
                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return QuestionnairePage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            defaultIndex: answeredQuestion,
                                                                          );
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                 Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : mainVariables.valueMapListProfilePage[index].postType == "repost"
                                                ? mainVariables.activeTypeMain.value == "believed"
                                                ? mainVariables.valueMapListProfilePage[index].repostStatus == 1
                                                ? mainVariables.valueMapListProfilePage[index].repostType == "private"
                                                ? mainVariables.valueMapListProfilePage[index].repostBelieved
                                                ? Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context,
                                                                MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        case "news":
                                                          {
                                                            /*Navigator.push(context, MaterialPageRoute(builder: (context) {
                                                          return DemoPage(
                                                            url: "",
                                                            text: "",
                                                            image: "",
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type: 'news',
                                                            activity: true,
                                                            checkMain: false,
                                                          );
                                                        }));*/
                                                            Get.to(const DemoView(), arguments: {
                                                              "id": mainVariables.valueMapListProfilePage[index].id,
                                                              "type": "news",
                                                              "url": ""
                                                            });
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                          height: height / 3.97,
                                                          decoration: BoxDecoration(
                                                              borderRadius:
                                                              const BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                              gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(23, 25, 27, 0.90), Color.fromRGBO(85, 85, 85, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(0, 92, 175, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? const RadialGradient(
                                                                colors: [
                                                                  Color.fromRGBO(10, 122, 1, 0.90),
                                                                  Color.fromRGBO(13, 155, 1, 0.00)
                                                                ],
                                                                radius: 15.0,
                                                              )
                                                                  : const RadialGradient(
                                                                colors: [
                                                                  Color.fromRGBO(255, 255, 255, 1),
                                                                  Color.fromRGBO(255, 255, 255, 1)
                                                                ],
                                                                radius: 15.0,
                                                              ),
                                                              image: DecorationImage(
                                                                image: NetworkImage(
                                                                  mainVariables.valueMapListProfilePage[index].type == "news"
                                                                      ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                      : "",
                                                                ),
                                                                fit: BoxFit.fill,
                                                              )),
                                                          child: Center(
                                                            child: Text(
                                                              mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? ""
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? mainVariables.valueMapListProfilePage[index].type
                                                                  .toString()
                                                                  .capitalizeFirst!
                                                                  .substring(0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                  : mainVariables.valueMapListProfilePage[index].type.toString().capitalizeFirst!,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(40), fontWeight: FontWeight.w900, color: const Color(0XFFFFFFFF)),
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type: mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(
                                                                top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,

                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      Navigator.push(context,
                                                                          MaterialPageRoute(builder: (BuildContext context) {
                                                                            return UserBillBoardProfilePage(
                                                                                userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                          }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .bodyLarge, /*TextStyle(
                                                                      fontSize: text.scale(14),
                                                                      color: const Color(0XFF202020),
                                                                      fontWeight: FontWeight.w700,
                                                                      fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                        fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0XFF737373),
                                                                      fontWeight: FontWeight.w400,
                                                                    ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseUserId: '',
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                              ? Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xFF017FDB),
                                                                      fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "liked"
                                                                          : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "disliked"
                                                                          : "dislikes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 2,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                            ],
                                                          )
                                                              : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0xFF017FDB),
                                                                      fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "liked"
                                                                          : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(
                                                                                        mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];

                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId:
                                                                                  mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle:
                                                                                mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                            mainVariables.valueMapListProfilePage[index].type == 'news'
                                                            ? const SizedBox()
                                                            : Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context,
                                                                      MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                          userId: userIdMain,
                                                                        );
                                                                      }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final //believed, private, status1, believedCategory, NonFiles, nonByte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)
                                              ]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                            //style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white),
                                                            style: Theme.of(context)
                                                                .textTheme
                                                                .bodyMedium!
                                                                .copyWith(color: Theme.of(context).colorScheme.background),
                                                            textAlign: TextAlign.center,
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                        width: width / 3.5,
                                                        child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                            ? billboardWidgetsMain.getRepostBelieveButton(
                                                          heightValue: height / 33.76,
                                                          billboardUserid: mainVariables.valueMapListProfilePage[index].repostUser,
                                                          billboardUserName: mainVariables.valueMapListProfilePage[index].repostUserName,
                                                          context: context,
                                                          modelSetState: setState,
                                                          index: index,
                                                          background: true,
                                                        )
                                                            : const SizedBox(),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //exclusive //notBelieved, private, status1, believedCategory, NonFiles, nonByte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        case "news":
                                                          {
                                                            /*Navigator.push(context, MaterialPageRoute(builder: (context) {
                                                      return DemoPage(
                                                        url: "",
                                                        text: "",
                                                        image: "",
                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                        type: 'news',
                                                        activity: true,
                                                        checkMain: false,
                                                      );
                                                    }));*/
                                                            Get.to(const DemoView(), arguments: {
                                                              "id": mainVariables.valueMapListProfilePage[index].id,
                                                              "type": "news",
                                                              "url": ""
                                                            });
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                          height: height / 3.97,
                                                          decoration: BoxDecoration(
                                                              borderRadius:
                                                              const BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                              gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(23, 25, 27, 0.90), Color.fromRGBO(85, 85, 85, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(0, 92, 175, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(10, 122, 1, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : const RadialGradient(
                                                                colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(255, 255, 255, 1)],
                                                                radius: 15.0,
                                                              ),
                                                              image: DecorationImage(
                                                                  image: NetworkImage(
                                                                    mainVariables.valueMapListProfilePage[index].type == "news"
                                                                        ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                        : "",
                                                                  ),
                                                                  fit: BoxFit.fill)),
                                                          child: Center(
                                                            child: Text(
                                                              mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? ""
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? mainVariables.valueMapListProfilePage[index].type
                                                                  .toString()
                                                                  .capitalizeFirst!
                                                                  .substring(0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                  : mainVariables.valueMapListProfilePage[index].type.toString().capitalizeFirst!,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(40), fontWeight: FontWeight.w900, color: const Color(0XFFFFFFFF)),
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type: mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(
                                                                top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius:
                                                      const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,

                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0
                                                            );
                                                          }));*/
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(
                                                                            userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .bodyLarge, /* TextStyle(
                                                                  fontSize: text.scale(14),
                                                                  color: const Color(0XFF202020),
                                                                  fontWeight: FontWeight.w700,
                                                                  fontFamily: "Poppins")*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                    fontSize: text.scale(10),
                                                                    color: const Color(0XFF737373),
                                                                    fontWeight: FontWeight.w400,
                                                                    fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0XFF737373),
                                                                  fontWeight: FontWeight.w400,
                                                                ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: const Color(0XFF737373),
                                                                      fontWeight: FontWeight.w400,
                                                                      fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseUserId: '',
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                              ? Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xFF017FDB),
                                                                  fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "liked"
                                                                          : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "disliked"
                                                                          : "dislikes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 2,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                            ],
                                                          )
                                                              : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xFF017FDB),
                                                                  fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "liked"
                                                                          : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount:
                                                                      mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];

                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle:
                                                                                  mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                activity: false,
                                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                                navBool: false,
                                                                                fromWhere: 'similar',
                                                                              );
                                                                            }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                            mainVariables.valueMapListProfilePage[index].type == 'news'
                                                            ? const SizedBox()
                                                            : Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final  //public, status1, believedCategory, NonFiles, nonByte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(15),
                                                  color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.5),
                                                  boxShadow: [BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0)]),
                                              child: Center(
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(vertical: 50.0),
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.center,
                                                    crossAxisAlignment: CrossAxisAlignment.center,
                                                    children: [
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Column(
                                                            mainAxisAlignment: MainAxisAlignment.center,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Image.asset(
                                                                "lib/Constants/Assets/BillBoard/failImage.png",
                                                                scale: 2,
                                                              ),
                                                              Text(
                                                                "whoops!",
                                                                style: Theme.of(context)
                                                                    .textTheme
                                                                    .titleLarge!
                                                                    .copyWith(fontStyle: FontStyle.italic, color: Theme.of(context).colorScheme.background),
                                                                /*TextStyle(
                                                        fontSize: 24, fontWeight: FontWeight.w900, color: Colors.white, fontStyle: FontStyle.italic),*/
                                                                textAlign: TextAlign.center,
                                                              ),
                                                            ],
                                                          )),
                                                      const SizedBox(
                                                        height: 15,
                                                      ),
                                                      SizedBox(
                                                          width: width / 1.2,
                                                          child: Text(
                                                            "Content might be deleted or no longer active to display",
                                                            style:
                                                            Theme.of(context).textTheme.bodyMedium!.copyWith(color: Theme.of(context).colorScheme.background),
                                                            //TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.white),
                                                            textAlign: TextAlign.center,
                                                          )),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            )
                                                : //final  // status0, believedCategory, NonFiles, nonByte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                                BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0),
                                              ]),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(
                                                                context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        case "news":
                                                          {
                                                            /*Navigator.push(context, MaterialPageRoute(builder: (context) {
                                              return DemoPage(
                                                url: "",
                                                text: "",
                                                image: "",
                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                type: 'news',
                                                activity: true,
                                                checkMain: false,
                                              );
                                            }));*/
                                                            Get.to(const DemoView(),
                                                                arguments: {"id": mainVariables.valueMapListProfilePage[index].id, "type": "news", "url": ""});
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                          height: height / 3.97,
                                                          decoration: BoxDecoration(
                                                              borderRadius: const BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                              gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(23, 25, 27, 0.90), Color.fromRGBO(85, 85, 85, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(0, 92, 175, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(10, 122, 1, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : const RadialGradient(
                                                                colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(255, 255, 255, 1)],
                                                                radius: 15.0,
                                                              ),
                                                              image: DecorationImage(
                                                                  image: NetworkImage(
                                                                    mainVariables.valueMapListProfilePage[index].type == "news"
                                                                        ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                        : "",
                                                                  ),
                                                                  fit: BoxFit.fill)),
                                                          child: Center(
                                                            child: Text(
                                                              mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? ""
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? mainVariables.valueMapListProfilePage[index].type
                                                                  .toString()
                                                                  .capitalizeFirst!
                                                                  .substring(0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                  : mainVariables.valueMapListProfilePage[index].type.toString().capitalizeFirst!,
                                                              style: TextStyle(fontSize: text.scale(40), fontWeight: FontWeight.w900, color: const Color(0XFFFFFFFF)),
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type: mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding:
                                                            EdgeInsets.only(top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            ) /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background,
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0
                                                            );
                                                          }));*/
                                                                      await Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                      style: Theme.of(context)
                                                                          .textTheme
                                                                          .bodyLarge, /*TextStyle(
                                                          fontSize: text.scale(14),
                                                          color: const Color(0XFF202020),
                                                          fontWeight: FontWeight.w700,
                                                          fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                            fontSize: text.scale(10),
                                                            color: const Color(0XFF737373),
                                                            fontWeight: FontWeight.w400,
                                                            fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ), /*TextStyle(
                                                          fontSize: text.scale(10),
                                                          color: const Color(0XFF737373),
                                                          fontWeight: FontWeight.w400,
                                                        ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                              fontSize: text.scale(10),
                                                              color: const Color(0XFF737373),
                                                              fontWeight: FontWeight.w400,
                                                              fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseUserId: '',
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                              ? Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                          fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums" ? "liked" : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "disliked"
                                                                          : "dislikes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 2,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                            ],
                                                          )
                                                              : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                          fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums" ? "liked" : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              /*InkWell(
                                                    onTap: () async {
                                                      billboardWidgetsMain.getLikeDislikeUsersList(
                                                          context: context,
                                                          billBoardId:mainVariables.valueMapListProfilePage[index].id,
                                                          responseId:"",
                                                          commentId:"",
                                                          billBoardType:mainVariables.valueMapListProfilePage[index].type=="news"
                                                              ?"news":mainVariables.valueMapListProfilePage[index].type=="forums"
                                                              ?"forums": mainVariables.valueMapListProfilePage[index].type=="survey"
                                                              ?"survey":"billboard",
                                                          action:mainVariables.valueMapListProfilePage[index].type=="forums"?"disliked": "dislikes",
                                                          likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                          disLikeCount:mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                          index: 2,
                                                          viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                          isViewIncluded: true
                                                      );
                                                    },
                                                    child: Text(
                                                      " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                      style: TextStyle(
                                                          fontSize: _text.scale(10),
                                                          color: Colors.black54),
                                                    ),
                                                  ),*/
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];

                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return AnalyticsPage(
                                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                  activity: false,
                                                                                  navBool: false,
                                                                                  fromWhere: 'similar',
                                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                            }))
                                                                            : Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                              return QuestionnairePage(
                                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                                defaultIndex: answeredQuestion,
                                                                              );
                                                                            }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10),
                                                                      color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                            mainVariables.valueMapListProfilePage[index].type == 'news'
                                                            ? const SizedBox()
                                                            : Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                 Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            )
                                                : //final  // NonBelievedCategory, NonFiles, nonByte
                                            Container(
                                              padding: const EdgeInsets.all(1.5),
                                              decoration: BoxDecoration(
                                                borderRadius: BorderRadius.circular(15),
                                                boxShadow: [
                                                  BoxShadow(color: Theme.of(context).colorScheme.tertiary, blurRadius: 4.0, spreadRadius: 0.0),
                                                ],
                                              ),
                                              child: Column(
                                                children: [
                                                  GestureDetector(
                                                    onTap: () async {
                                                      switch (mainVariables.valueMapListProfilePage[index].type) {
                                                        case "blog":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                            break;
                                                          }
                                                        case "byte":
                                                          {
                                                            mainVariables.selectedBillboardIdMain.value = mainVariables.valueMapListProfilePage[index].id;
                                                            //gettingPageRoute(pageName: billBoardPageName.value);
                                                            Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                            break;
                                                          }
                                                        case "forums":
                                                          {
                                                            Navigator.push(
                                                                context,
                                                                MaterialPageRoute(
                                                                    builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                        idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                        comeFrom: "billBoardHome",
                                                                        forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                            break;
                                                          }
                                                        case "survey":
                                                          {
                                                            String activeStatus = "";
                                                            bool answerStatus = false;
                                                            int answeredQuestion = 0;
                                                            SharedPreferences prefs = await SharedPreferences.getInstance();
                                                            String mainUserId = prefs.getString('newUserId') ?? "";
                                                            String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                            var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                            var response = await http.post(url, headers: {
                                                              'Authorization': mainUserToken
                                                            }, body: {
                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                            });
                                                            var responseData = json.decode(response.body);
                                                            if (responseData["status"]) {
                                                              activeStatus = responseData["response"]["status"];

                                                              if (activeStatus == "active") {
                                                                var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                var response = await http.post(url, headers: {
                                                                  'Authorization': mainUserToken
                                                                }, body: {
                                                                  'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                });
                                                                var responseData = json.decode(response.body);
                                                                if (responseData["status"]) {
                                                                  answerStatus = responseData["response"][0]["final_question"];
                                                                  answeredQuestion = responseData["response"][0]["question_number"];
                                                                } else {
                                                                  answerStatus = false;
                                                                  answeredQuestion = 0;
                                                                }
                                                              }
                                                            }
                                                            if (!context.mounted) {
                                                              return;
                                                            }
                                                            mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }))
                                                                : activeStatus == 'active'
                                                                ? answerStatus
                                                                ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return QuestionnairePage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                defaultIndex: answeredQuestion,
                                                              );
                                                            }))
                                                                : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                              return AnalyticsPage(
                                                                surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                activity: false,
                                                                surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                navBool: false,
                                                                fromWhere: 'similar',
                                                              );
                                                            }));
                                                            break;
                                                          }
                                                        case "news":
                                                          {
                                                            /*Navigator.push(context, MaterialPageRoute(builder: (context) {
                                          return DemoPage(
                                            url: "",
                                            text: "",
                                            image: "",
                                            id: mainVariables.valueMapListProfilePage[index].id,
                                            type: 'news',
                                            activity: true,
                                            checkMain: false,
                                          );
                                        }));*/
                                                            Get.to(const DemoView(),
                                                                arguments: {"id": mainVariables.valueMapListProfilePage[index].id, "type": "news", "url": ""});
                                                            break;
                                                          }
                                                        default:
                                                          {
                                                            break;
                                                          }
                                                      }
                                                    },
                                                    child: Stack(
                                                      children: [
                                                        Container(
                                                          height: height / 3.97,
                                                          decoration: BoxDecoration(
                                                              borderRadius: const BorderRadius.only(topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                              gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(23, 25, 27, 0.90), Color.fromRGBO(85, 85, 85, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(0, 92, 175, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? const RadialGradient(
                                                                colors: [Color.fromRGBO(10, 122, 1, 0.90), Color.fromRGBO(13, 155, 1, 0.00)],
                                                                radius: 15.0,
                                                              )
                                                                  : const RadialGradient(
                                                                colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(255, 255, 255, 1)],
                                                                radius: 15.0,
                                                              ),
                                                              image: DecorationImage(
                                                                  image: NetworkImage(
                                                                    mainVariables.valueMapListProfilePage[index].type == "news"
                                                                        ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                        : "",
                                                                  ),
                                                                  fit: BoxFit.fill)),
                                                          child: Center(
                                                            child: Text(
                                                              mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? ""
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? mainVariables.valueMapListProfilePage[index].type
                                                                  .toString()
                                                                  .capitalizeFirst!
                                                                  .substring(0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                  : mainVariables.valueMapListProfilePage[index].type.toString().capitalizeFirst!,
                                                              style: TextStyle(fontSize: text.scale(40), fontWeight: FontWeight.w900, color: const Color(0XFFFFFFFF)),
                                                            ),
                                                          ),
                                                        ),
                                                        mainVariables.valueMapListProfilePage[index].repostCount == 0 ||
                                                            mainVariables.valueMapListProfilePage[index].repostAvatar == ""
                                                            ? const SizedBox()
                                                            : Positioned(
                                                          top: height / 15,
                                                          right: 15,
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              billboardWidgetsMain.believedTabBottomSheet(
                                                                  context: context,
                                                                  id: mainVariables.valueMapListProfilePage[index].repostId,
                                                                  type: mainVariables.valueMapListProfilePage[index].type);
                                                            },
                                                            child: Stack(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 35,
                                                                  width: 35,
                                                                ),
                                                                Positioned(
                                                                  left: 0,
                                                                  bottom: 0,
                                                                  child: Container(
                                                                    height: 30,
                                                                    width: 30,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(5),
                                                                        image: const DecorationImage(
                                                                          image: AssetImage("lib/Constants/Assets/BillBoard/repost_grey.png"),
                                                                        )),
                                                                  ),
                                                                ),
                                                                Positioned(
                                                                  top: 0,
                                                                  right: 0,
                                                                  child: Container(
                                                                    height: 15,
                                                                    width: 15,
                                                                    decoration: const BoxDecoration(shape: BoxShape.circle, color: Colors.red),
                                                                    child: Center(
                                                                        child: Text(
                                                                          mainVariables.valueMapListProfilePage[index].repostCount > 9
                                                                              ? "9+"
                                                                              : mainVariables.valueMapListProfilePage[index].repostCount.toString(),
                                                                          style: const TextStyle(color: Colors.white, fontSize: 10),
                                                                        )),
                                                                  ),
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          top: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 18,
                                                            width: width / 1.06,
                                                            padding: EdgeInsets.only(
                                                              left: width / 27.4,
                                                            ),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                              borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15),
                                                                topRight: Radius.circular(15),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                              crossAxisAlignment: CrossAxisAlignment.center,
                                                              children: [
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                                  children: [
                                                                    /*bookMarkWidget(
                                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks),
                                                            context: context,
                                                            scale: 3,
                                                            color: Colors.white,
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            type: mainVariables.valueMapListProfilePage[index].type=="byte"||mainVariables.valueMapListProfilePage[index].type=="blog"?"billboard":mainVariables.valueMapListProfilePage[index].type,
                                                            modelSetState: modelSetState,
                                                            index: index,
                                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                            notUse: false
                                                        ),*/
                                                                    billboardWidgetsMain.billBoardBookMarkWidget(context: context, index: index),
                                                                    const SizedBox(
                                                                      width: 15,
                                                                    ),
                                                                    billboardWidgetsMain.translationWidget(
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                            ? "forums"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                            ? "survey"
                                                                            : mainVariables.valueMapListProfilePage[index].type == "news"
                                                                            ? "news"
                                                                            : 'billboard',
                                                                        index: index,
                                                                        initFunction: getData,
                                                                        context: context,
                                                                        modelSetState: setState,
                                                                        notUse: false,
                                                                        valueMapList: mainVariables.valueMapListProfilePage),
                                                                  ],
                                                                ),
                                                                Row(
                                                                  mainAxisAlignment: MainAxisAlignment.end,
                                                                  children: [
                                                                    userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                        ? billboardWidgetsMain.getHomeBelieveButton(
                                                                      heightValue: height / 33.76,
                                                                      isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                      billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                                      billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      index: index,
                                                                      background: true,
                                                                    )
                                                                        : const SizedBox(),

                                                                    ///more_vert
                                                                    IconButton(
                                                                        onPressed: () {
                                                                          billboardWidgetsMain.bottomSheet(
                                                                            context1: context,
                                                                            myself: userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                            billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                            billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                            type: "billboard",
                                                                            responseId: "",
                                                                            responseUserId: "",
                                                                            commentId: "",
                                                                            commentUserId: "",
                                                                            callFunction: getData,
                                                                            contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                            modelSetState: setState,
                                                                            responseDetail: {},
                                                                            category: mainVariables.valueMapListProfilePage[index].category,
                                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                                            index: index,
                                                                          );
                                                                        },
                                                                        icon: const Icon(
                                                                          Icons.more_vert,
                                                                          color: Colors.white,
                                                                          size: 25,
                                                                        ))
                                                                  ],
                                                                )
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                          bottom: 0,
                                                          left: 0,
                                                          child: Container(
                                                            height: height / 14,
                                                            width: width,
                                                            padding: EdgeInsets.only(top: height / 86.6, bottom: height / 86.6, right: width / 13.7, left: width / 41.1),
                                                            decoration: BoxDecoration(
                                                              color: Colors.black12.withOpacity(0.3),
                                                            ),
                                                            child: RichText(
                                                              textAlign: TextAlign.left,
                                                              text: TextSpan(
                                                                children: conversationFunctionsMain.spanListBillBoardHome(
                                                                    message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                        ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                        : mainVariables.valueMapListProfilePage[index].title,
                                                                    context: context,
                                                                    isByte: false),
                                                              ),
                                                            )
                                                            /*Text(
                                                         mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                                         maxLines: 2,
                                                         style: TextStyle(
                                                             fontSize: _text*14,
                                                             color: Colors.white,
                                                             fontWeight: FontWeight.w500,
                                                             fontFamily: "Poppins",
                                                             overflow: TextOverflow.ellipsis
                                                         ),
                                                       )*/
                                                            ,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.background, //Colors.white,
                                                      borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        SizedBox(
                                                          height: height / 86.6,
                                                        ),
                                                        Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.center,
                                                          children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId,
                                                              repostAvatar: mainVariables.valueMapListProfilePage[index].repostAvatar,
                                                              repostUserId: mainVariables.valueMapListProfilePage[index].repostUser,
                                                              isRepostProfile: mainVariables.valueMapListProfilePage[index].repostProfileType,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            Expanded(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children: [
                                                                  InkWell(
                                                                    onTap: () async {
                                                                      /*Navigator.push(context, MaterialPageRoute(builder: (BuildContext context){
                                                            return UserProfilePage(
                                                                id:valueMapList[index].userId,
                                                                type:'forums',
                                                                index:0
                                                            );
                                                          }));*/
                                                                      Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                        return UserBillBoardProfilePage(userId: mainVariables.valueMapListProfilePage[index].userId);
                                                                      }));
                                                                    },
                                                                    child: Text(
                                                                      mainVariables.valueMapListProfilePage[index].username.toString().capitalizeFirst!,
                                                                      style: Theme.of(context).textTheme.bodyLarge,
                                                                      /*TextStyle(
                                                      fontSize: text.scale(14),
                                                      color: const Color(0XFF202020),
                                                      fontWeight: FontWeight.w700,
                                                      fontFamily: "Poppins"),*/
                                                                    ),
                                                                  ),
                                                                  const SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Row(
                                                                    children: [
                                                                      Text(
                                                                        mainVariables.valueMapListProfilePage[index].createdAt,
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ),
                                                                        /*TextStyle(
                                                        fontSize: text.scale(10),
                                                        color: const Color(0XFF737373),
                                                        fontWeight: FontWeight.w400,
                                                        fontFamily: "Poppins"),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      Text(
                                                                        " | ",
                                                                        style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                          fontWeight: FontWeight.w400,
                                                                          color: const Color(0XFF737373),
                                                                        ),
                                                                        /*TextStyle(
                                                      fontSize: text.scale(10),
                                                      color: const Color(0XFF737373),
                                                      fontWeight: FontWeight.w400,
                                                    ),*/
                                                                      ),
                                                                      const SizedBox(
                                                                        width: 3,
                                                                      ),
                                                                      InkWell(
                                                                        onTap: () async {
                                                                          billboardWidgetsMain.believersTabBottomSheet(
                                                                            context: context,
                                                                            id: mainVariables.valueMapListProfilePage[index].userId,
                                                                            isBelieversList: true,
                                                                          );
                                                                        },
                                                                        child: Text(
                                                                          "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                          style: Theme.of(context).textTheme.labelSmall!.copyWith(
                                                                            fontWeight: FontWeight.w400,
                                                                            color: const Color(0XFF737373),
                                                                          ), /*TextStyle(
                                                          fontSize: text.scale(10),
                                                          color: const Color(0XFF737373),
                                                          fontWeight: FontWeight.w400,
                                                          fontFamily: "Poppins"),*/
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(
                                                                  mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                  ? "news"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                  ? "forums"
                                                                  : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                  ? "survey"
                                                                  : "billboard",
                                                              /*mainVariables.valueMapListProfilePage[index].type=='survey'?'survey':'billboard',*/
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseUserId: '',
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                          ],
                                                        ),
                                                        SizedBox(height: height / 64),
                                                        Padding(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                              ? Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ), /*TextStyle(
                                                      fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(
                                                                      fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary /*Colors.black54*/),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums" ? "liked" : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action:
                                                                      mainVariables.valueMapListProfilePage[index].type == "forums" ? "disliked" : "dislikes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 2,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                  style: TextStyle(fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary),
                                                                ),
                                                              )
                                                            ],
                                                          )
                                                              : Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            children: [
                                                              Text(
                                                                mainVariables.valueMapListProfilePage[index].companyName == ""
                                                                    ? mainVariables.valueMapListProfilePage[index].category.capitalizeFirst!
                                                                    : mainVariables.valueMapListProfilePage[index].companyName.capitalizeFirst!,
                                                                style: Theme.of(context).textTheme.labelMedium!.copyWith(
                                                                  fontWeight: FontWeight.w700,
                                                                  color: const Color(0xFF017FDB),
                                                                ),
                                                                /*TextStyle(
                                                      fontSize: text.scale(10), color: const Color(0xFF017FDB), fontWeight: FontWeight.bold),*/
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: "views",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 0,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                  style: TextStyle(fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  billboardWidgetsMain.getLikeDislikeUsersList(
                                                                      context: context,
                                                                      billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                      responseId: "",
                                                                      commentId: "",
                                                                      billBoardType: mainVariables.valueMapListProfilePage[index].type == "news"
                                                                          ? "news"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : "billboard",
                                                                      action: mainVariables.valueMapListProfilePage[index].type == "forums" ? "liked" : "likes",
                                                                      likeCount: mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                      disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount.toString(),
                                                                      index: 1,
                                                                      viewCount: mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                      isViewIncluded: true);
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                  style: TextStyle(fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary),
                                                                ),
                                                              ),
                                                              InkWell(
                                                                onTap: () async {
                                                                  switch (mainVariables.valueMapListProfilePage[index].type) {
                                                                    case "blog":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BlogDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "byte":
                                                                      {
                                                                        mainVariables.selectedBillboardIdMain.value =
                                                                            mainVariables.valueMapListProfilePage[index].id;
                                                                        Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) => const BytesDescriptionPage()));
                                                                        break;
                                                                      }
                                                                    case "forums":
                                                                      {
                                                                        Navigator.push(
                                                                            context,
                                                                            MaterialPageRoute(
                                                                                builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                                    idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                                    comeFrom: "billBoardHome",
                                                                                    forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                                        break;
                                                                      }
                                                                    case "survey":
                                                                      {
                                                                        String activeStatus = "";
                                                                        bool answerStatus = false;
                                                                        int answeredQuestion = 0;
                                                                        SharedPreferences prefs = await SharedPreferences.getInstance();
                                                                        String mainUserId = prefs.getString('newUserId') ?? "";
                                                                        String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                                        var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                                        var response = await http.post(url, headers: {
                                                                          'Authorization': mainUserToken
                                                                        }, body: {
                                                                          'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                        });
                                                                        var responseData = json.decode(response.body);
                                                                        if (responseData["status"]) {
                                                                          activeStatus = responseData["response"]["status"];

                                                                          if (activeStatus == "active") {
                                                                            var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                                            var response = await http.post(url, headers: {
                                                                              'Authorization': mainUserToken
                                                                            }, body: {
                                                                              'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                                            });
                                                                            var responseData = json.decode(response.body);
                                                                            if (responseData["status"]) {
                                                                              answerStatus = responseData["response"][0]["final_question"];
                                                                              answeredQuestion = responseData["response"][0]["question_number"];
                                                                            } else {
                                                                              answerStatus = false;
                                                                              answeredQuestion = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        if (!context.mounted) {
                                                                          return;
                                                                        }
                                                                        mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }))
                                                                            : activeStatus == 'active'
                                                                            ? answerStatus
                                                                            ? Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                              surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                              activity: false,
                                                                              navBool: false,
                                                                              fromWhere: 'similar',
                                                                              surveyTitle: mainVariables.valueMapListProfilePage[index].title);
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return QuestionnairePage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            defaultIndex: answeredQuestion,
                                                                          );
                                                                        }))
                                                                            : Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                          return AnalyticsPage(
                                                                            surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                            activity: false,
                                                                            surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                            navBool: false,
                                                                            fromWhere: 'similar',
                                                                          );
                                                                        }));
                                                                        break;
                                                                      }
                                                                    default:
                                                                      {
                                                                        break;
                                                                      }
                                                                  }
                                                                },
                                                                child: Text(
                                                                  " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                                  style: TextStyle(fontSize: text.scale(10), color: Theme.of(context).colorScheme.onPrimary),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                        SizedBox(height: height / 42.6),
                                                        mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                            mainVariables.valueMapListProfilePage[index].type == 'news'
                                                            ? const SizedBox()
                                                            : Container(
                                                          padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              InkWell(
                                                                onTap: () async {
                                                                  Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
                                                                    return UserBillBoardProfilePage(
                                                                      userId: userIdMain,
                                                                    );
                                                                  }));
                                                                },
                                                                child: CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                              ),
                                                              SizedBox(
                                                                width: width / 41.1,
                                                              ),
                                                              billboardWidgetsMain.getResponseField(
                                                                context: context,
                                                                modelSetState: setState,
                                                                billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                responseId: "",
                                                                index: index,
                                                                fromWhere: 'homePage',
                                                                callFunction: () {},
                                                                contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                category: mainVariables.valueMapListProfilePage[index].category,
                                                                responseCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                        (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              ),
                                            ),
                                            
                                            SizedBox(
                                              height: height / 33.83,
                                            )
                                          ],
                                        ),
                                      );
                                    }),
                              ),
                      ),
                    )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
                    ),
            ],
          )
        : Center(
            child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
          );
  }
}

class FeaturedTabPage extends StatefulWidget {
  final String userId;
  final String tickerId;

  const FeaturedTabPage({Key? key, required this.tickerId, required this.userId}) : super(key: key);

  @override
  State<FeaturedTabPage> createState() => _FeaturedTabPageState();
}

class _FeaturedTabPageState extends State<FeaturedTabPage> {
  bool switchValue = false;
  bool loader = false;
  bool listLoader = true;
  final CarouselController _carController = CarouselController();
  int carouselIndexGlobal = 0;
  TextEditingController bottomSheetController = TextEditingController();
  final RefreshController _controller = RefreshController();
  int skipBillBoardCount = 0;
  int skipSurveyCount = 0;
  int skipNewsCount = 0;
  int skipForumCount = 0;
  int skipCount = 0;

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 7;
      mainVariables.selectedUserControllerIndex.value = 4;
      mainVariables.selectedIntermediaryControllerIndex.value = 8;
      getData();
    });
    super.initState();
  }

  getData() async {
    if (mainSkipValue == false) {
      context.read<LikeButtonListWidgetBloc>().add(const LikeButtonListLoadingEvent());
      context.read<ResponseFieldWidgetBloc>().add(const ResponseFieldInitialEvent());
      context.read<BillBoardTranslationBloc>().add(const BillBoardLoadingTranslationEvent());
      context.read<BookMarkWidgetBloc>().add(const LoadingEvent());
      switchValue = mainVariables.activeTypeMain.value == "believed";
      await billBoardApiMain.getPopularTraderData(searchValue: '', context: context);
      await getFeatureListData();
    }
  }

  getFeatureListData() async {
    setState(() {
      listLoader = false;
    });
    await billBoardApiMain.getFeatureListFunction(userId: widget.userId, tickerId: widget.tickerId, skipCount: "0");
    mainVariables.valueMapListProfilePage.clear();
    mainVariables.responseFocusList.clear();
    mainVariables.responseControllerList.clear();
    // mainVariables.globalKeyList.clear();
    mainVariables.valueMapListProfilePage.clear();
    mainVariables.pickedImageMain.clear();
    mainVariables.pickedVideoMain.clear();
    mainVariables.pickedFileMain.clear();
    mainVariables.docMain.clear();
    mainVariables.selectedUrlTypeMain.clear();
    mainVariables.docFilesMain.clear();
    if (mainVariables.billBoardFeaturesList!.value.response.isNotEmpty) {
      mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardFeaturesList!.value.response);
      for (int i = 0; i < mainVariables.billBoardFeaturesList!.value.response.length; i++) {
        mainVariables.responseFocusList.add(FocusNode());
        //mainVariables.globalKeyList.add(GlobalKey());
        mainVariables.responseControllerList.add(TextEditingController());
        mainVariables.pickedImageMain.add(null);
        mainVariables.pickedVideoMain.add(null);
        mainVariables.pickedFileMain.add(null);
        mainVariables.docMain.add(null);
        mainVariables.selectedUrlTypeMain.add("");
        mainVariables.docFilesMain.add([]);
      }
      setState(() {
        listLoader = true;
        loader = true;
      });
    } else {
      setState(() {
        listLoader = true;
        loader = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return loader
        ? Column(
            children: [
              billboardWidgetsMain.getBillBoardSearchField(context: context, modelSetState: setState, billBoardFunction: getFeatureListData),
              SizedBox(height: height / 57.73),
              listLoader
                  ? Expanded(
                      child: Obx(() => mainVariables.valueMapListProfilePage.isEmpty
                          ? Container(
                              margin: EdgeInsets.symmetric(horizontal: width / 24.17),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  SizedBox(
                                    height: height / 57.73,
                                  ),
                                  SvgPicture.asset(
                                    "lib/Constants/Assets/BillBoard/businessProfile/emptyList.svg",
                                    height: height / 3.464,
                                    width: width / 1.49,
                                    fit: BoxFit.fill,
                                  ),
                                  SizedBox(
                                    height: height / 57.73,
                                  ),
                                  SizedBox(
                                    width: width / 1.2,
                                    child: RichText(
                                      textAlign: TextAlign.center,
                                      text: TextSpan(
                                        children: [
                                          TextSpan(
                                              text: 'Unfortunately no posts found for this profile',
                                              style: TextStyle(fontFamily: "Poppins",color:Theme.of(context).colorScheme.onPrimary.withOpacity(0.3) ,fontSize: text.scale(14), fontWeight: FontWeight.w600)),
                                        ],
                                      ),
                                    ),
                                  )
                                ],
                              ),
                            )
                          : SmartRefresher(
                              controller: _controller,
                              enablePullDown: false,
                              enablePullUp: true,
                              footer: CustomFooter(
                                builder: (BuildContext context, LoadStatus? mode) {
                                  Widget body;
                                  if (mode == LoadStatus.idle) {
                                    body = const Text("pull up load");
                                  } else if (mode == LoadStatus.loading) {
                                    body = const CupertinoActivityIndicator();
                                  } else if (mode == LoadStatus.failed) {
                                    body = const Text("Load Failed!Click retry!");
                                  } else if (mode == LoadStatus.canLoading) {
                                    body = const Text("release to load more");
                                  } else {
                                    body = const Text("No more Data");
                                  }
                                  return SizedBox(
                                    height: 55.0,
                                    child: Center(child: body),
                                  );
                                },
                              ),
                              onLoading: () async {
                                skipCount += 10;
                                await billBoardApiMain.getFeatureListFunction(
                                    userId: widget.userId, tickerId: widget.tickerId, skipCount: skipCount.toString());
                                if (mainVariables.billBoardFeaturesList!.value.response.isNotEmpty) {
                                  mainVariables.valueMapListProfilePage.addAll(mainVariables.billBoardFeaturesList!.value.response);
                                  for (int i = 0; i < mainVariables.billBoardFeaturesList!.value.response.length; i++) {
                                    mainVariables.responseFocusList.add(FocusNode());
                                    // mainVariables.globalKeyList.add(GlobalKey());
                                    mainVariables.responseControllerList.add(TextEditingController());
                                    mainVariables.pickedImageMain.add(null);
                                    mainVariables.pickedVideoMain.add(null);
                                    mainVariables.pickedFileMain.add(null);
                                    mainVariables.docMain.add(null);
                                    mainVariables.selectedUrlTypeMain.add("");
                                    mainVariables.docFilesMain.add([]);
                                  }
                                }
                                if (mounted) {
                                  setState(() {});
                                }
                                _controller.loadComplete();
                              },
                              child: ListView.builder(
                                  physics: const ScrollPhysics(),
                                  padding: EdgeInsets.zero,
                                  scrollDirection: Axis.vertical,
                                  itemCount: mainVariables.valueMapListProfilePage.length,
                                  itemBuilder: (context, index) {
                                    return Container(
                                      padding: EdgeInsets.only(left: width / 41.1, right: width / 41.1),
                                      child: Column(
                                        children: [
                                          mainVariables.valueMapListProfilePage[index].type == "byte"
                                              ? mainVariables.valueMapListProfilePage[index].files.isEmpty
                                                  ? Container(
                                            padding: const EdgeInsets.all(1.5),
                                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                              BoxShadow(
                                                  color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                      mainVariables.valueMapListProfilePage[index].believed == false
                                                      ? Colors.black87.withOpacity(0.7)
                                                      : Colors.black26.withOpacity(0.1),
                                                  blurRadius: 4.0,
                                                  spreadRadius: 0.0)
                                            ]),
                                            child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                mainVariables.valueMapListProfilePage[index].believed == false
                                                ? Center(
                                              child: Padding(
                                                padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                  children: [
                                                    SizedBox(
                                                        width: width / 1.2,
                                                        child: Text(
                                                          "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                          style: TextStyle(
                                                              fontSize: 14,
                                                              fontWeight: FontWeight.w500,
                                                              color: Theme.of(context).colorScheme.background),
                                                          textAlign: TextAlign.center,
                                                        )),
                                                    const SizedBox(
                                                      height: 15,
                                                    ),
                                                    SizedBox(
                                                      width: width / 3.5,
                                                      child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                          ? billboardWidgetsMain.getHomeBelieveButton(
                                                        heightValue: height / 33.76,
                                                        isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                        billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                        billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                        context: context,
                                                        modelSetState: setState,
                                                        index: index,
                                                        background: true,
                                                      )
                                                          : const SizedBox(),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            )
                                                : Column(
                                              children: [
                                                Container(
                                                  decoration: BoxDecoration(
                                                    color: Theme.of(context).colorScheme.background,
                                                    borderRadius: const BorderRadius.only(
                                                        topRight: Radius.circular(15), topLeft: Radius.circular(15)),
                                                  ),
                                                  child: Column(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 86.6,
                                                      ),
                                                      Row(
                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                        children: [
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId),
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          Expanded(
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                InkWell(
                                                                  onTap: () {
                                                                    Navigator.push(context,
                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                          return UserBillBoardProfilePage(
                                                                              userId:
                                                                              mainVariables.valueMapListProfilePage[index].userId)
                                                                          /*UserProfilePage(
                                                  id:valueMapList[index].userId,type:'forums',index:0)*/
                                                                          ;
                                                                        }));
                                                                  },
                                                                  child: Text(
                                                                    mainVariables.valueMapListProfilePage[index].username
                                                                        .toString()
                                                                        .capitalizeFirst!,
                                                                    style: TextStyle(
                                                                        fontSize: text.scale(12),
                                                                        fontWeight: FontWeight.w700,
                                                                        fontFamily: "Poppins"),
                                                                  ),
                                                                ),
                                                                const SizedBox(
                                                                  height: 5,
                                                                ),
                                                                Row(
                                                                  children: [
                                                                    Text(
                                                                      mainVariables.valueMapListProfilePage[index].createdAt,
                                                                      style: TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    Text(
                                                                      " | ",
                                                                      style: TextStyle(
                                                                        fontSize: text.scale(11),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    InkWell(
                                                                      onTap: () {
                                                                        billboardWidgetsMain.believersTabBottomSheet(
                                                                          context: context,
                                                                          id: mainVariables.valueMapListProfilePage[index].userId,
                                                                          isBelieversList: true,
                                                                        );
                                                                      },
                                                                      child: Text(
                                                                        "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                        style: TextStyle(
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0XFF737373),
                                                                            fontWeight: FontWeight.w400,
                                                                            fontFamily: "Poppins"),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                              ? billboardWidgetsMain.getHomeBelieveButton(
                                                            heightValue: height / 33.76,
                                                            isBelieved: List.generate(
                                                                mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                            billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                            billboardUserName:
                                                            mainVariables.valueMapListProfilePage[index].username,
                                                            context: context,
                                                            modelSetState: setState,
                                                            index: index,
                                                            background: false,
                                                          )
                                                              : const SizedBox(),

                                                          ///more_vert
                                                          IconButton(
                                                              onPressed: () {
                                                                billboardWidgetsMain.bottomSheet(
                                                                  context1: context,
                                                                  myself:
                                                                  userIdMain == mainVariables.valueMapListProfilePage[index].userId,
                                                                  billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                  billboardUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                                  type: "billboard",
                                                                  responseId: "",
                                                                  responseUserId: "",
                                                                  commentId: "",
                                                                  commentUserId: "",
                                                                  callFunction: getData,
                                                                  contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                  modelSetState: setState,
                                                                  responseDetail: {},
                                                                  category: mainVariables.valueMapListProfilePage[index].category,
                                                                  valueMapList: mainVariables.valueMapListProfilePage,
                                                                  index: index,
                                                                );
                                                              },
                                                              icon: Icon(
                                                                Icons.more_vert,
                                                                color: Theme.of(context).colorScheme.onPrimary,
                                                                size: 25,
                                                              ))
                                                        ],
                                                      ),
                                                      SizedBox(height: height / 64),
                                                    ],
                                                  ),
                                                ),
                                                GestureDetector(
                                                  onTap: () async {
                                                    switch (mainVariables.valueMapListProfilePage[index].type) {
                                                      case "blog":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BlogDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "byte":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BytesDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "forums":
                                                        {
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                      idList: List.generate(
                                                                          mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                      comeFrom: "billBoardHome",
                                                                      forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "survey":
                                                        {
                                                          String activeStatus = "";
                                                          bool answerStatus = false;
                                                          int answeredQuestion = 0;
                                                          SharedPreferences prefs = await SharedPreferences.getInstance();
                                                          String mainUserId = prefs.getString('newUserId') ?? "";
                                                          String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                          var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                          var response = await http.post(url, headers: {
                                                            'Authorization': mainUserToken
                                                          }, body: {
                                                            'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                          });
                                                          var responseData = json.decode(response.body);
                                                          if (responseData["status"]) {
                                                            activeStatus = responseData["response"]["status"];
                                                            if (activeStatus == "active") {
                                                              var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                              var response = await http.post(url, headers: {
                                                                'Authorization': mainUserToken
                                                              }, body: {
                                                                'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                              });
                                                              var responseData = json.decode(response.body);
                                                              if (responseData["status"]) {
                                                                answerStatus = responseData["response"][0]["final_question"];
                                                                answeredQuestion = responseData["response"][0]["question_number"];
                                                              } else {
                                                                answerStatus = false;
                                                                answeredQuestion = 0;
                                                              }
                                                            }
                                                          }
                                                          bool responseBool =
                                                              mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                          if (!mounted) {
                                                            return;
                                                          }
                                                          mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }))
                                                              : activeStatus == 'active'
                                                              ? answerStatus
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                    surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                    activity: false,
                                                                    navBool: false,
                                                                    fromWhere: 'similar',
                                                                    surveyTitle:
                                                                    mainVariables.valueMapListProfilePage[index].title);
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return QuestionnairePage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  defaultIndex: answeredQuestion,
                                                                );
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }));
                                                          if (responseBool) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "news":
                                                        {
                                                          /*bool response = await Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                          return DemoPage(
                                                                            url: "",
                                                                            text: "",
                                                                            image: "",
                                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                                            type: 'news',
                                                                            activity: true,
                                                                            checkMain: false,
                                                                          );
                                                                        }));
                                                                        if (response) {
                                                                          getData();
                                                                        }*/
                                                          Get.to(const DemoView(), arguments: {
                                                            "id": mainVariables.valueMapListProfilePage[index].id,
                                                            "type": "news",
                                                            "url": ""
                                                          });
                                                          break;
                                                        }
                                                      default:
                                                        {
                                                          break;
                                                        }
                                                    }
                                                  },
                                                  child: Container(
                                                    height: height / 9,
                                                    color: Theme.of(context).colorScheme.background,
                                                    alignment: Alignment.topLeft,
                                                    child: Padding(
                                                      padding: const EdgeInsets.all(12.0),
                                                      child: RichText(
                                                        textAlign: TextAlign.left,
                                                        text: TextSpan(
                                                          children: conversationFunctionsMain.spanListBillBoardHome(
                                                              message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                  ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                  : mainVariables.valueMapListProfilePage[index].title,
                                                              context: context,
                                                              isByte: true),
                                                        ),
                                                      ) /*Text( mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                  style:TextStyle(
                                    fontSize: _text.scale(10)14,
                                    fontWeight: FontWeight.w400,
                                    color: Color(0XFF403D3D),
                                  ),
                                  textAlign: TextAlign.left,
                                  maxLines: 3,
                                  overflow: TextOverflow.ellipsis,
                                )*/
                                                      ,
                                                    ),
                                                  ),
                                                ),
                                                Container(
                                                  decoration: BoxDecoration(
                                                    color: Theme.of(context).colorScheme.background,
                                                    borderRadius: const BorderRadius.only(
                                                        bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                  ),
                                                  child: Column(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 86.6,
                                                      ),
                                                      Row(
                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                        children: [
                                                          Row(children: [
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.likeButtonHomeListWidget(
                                                              likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                              id: mainVariables.valueMapListProfilePage[index].id,
                                                              index: index,
                                                              context: context,
                                                              initFunction: () {},
                                                              modelSetState: setState,
                                                              notUse: true,
                                                              dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                              likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                              dislikeCountList: List.generate(
                                                                  mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                              type: mainVariables.valueMapListProfilePage[index].type,
                                                              billBoardType:
                                                              mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                  ? 'survey'
                                                                  : 'billboard',
                                                              image: mainVariables.valueMapListProfilePage[index].avatar,
                                                              title: mainVariables.valueMapListProfilePage[index].title,
                                                              description: "",
                                                              fromWhere: 'homePage',
                                                              responseId: '',
                                                              controller: bottomSheetController,
                                                              commentId: '',
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseFocusList: mainVariables.responseFocusList,
                                                              responseUserId: '',
                                                              valueMapList: mainVariables.valueMapListProfilePage,
                                                            ),
                                                            SizedBox(
                                                              width: width / 27.4,
                                                            ),
                                                            /*bookMarkWidget(
                                            bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) =>  mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                            context: context,
                                            scale: 3.2,
                                            id: mainVariables.valueMapListProfilePage[index].id,
                                            type: 'billboard',
                                            modelSetState: setState,
                                            index: index,
                                            initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                            notUse: false,
                                          ),*/
                                                            billboardWidgetsMain.billBoardBookMarkWidget(
                                                                context: context, index: index),
                                                          ]),
                                                          Row(
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              billboardWidgetsMain.translationWidget(
                                                                  id: mainVariables.valueMapListProfilePage[index].id,
                                                                  type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                      ? "forums"
                                                                      : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                      ? "survey"
                                                                      : 'billboard',
                                                                  index: index,
                                                                  initFunction: getData,
                                                                  context: context,
                                                                  modelSetState: setState,
                                                                  notUse: false,
                                                                  valueMapList: mainVariables.valueMapListProfilePage),
                                                              SizedBox(
                                                                width: width / 27.4,
                                                              ),
                                                            ],
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(height: height / 64),
                                                      Padding(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Text(
                                                              mainVariables.valueMapListProfilePage[index].companyName,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xFF017FDB),
                                                                  fontWeight: FontWeight.bold),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "views",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 0,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "likes",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 1,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "dislikes",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 2,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            Text(
                                                              " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                              style: TextStyle(fontSize: text.scale(10)),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(height: height / 42.6),
                                                      Container(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getResponseField(
                                                              context: context,
                                                              modelSetState: setState,
                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseId: "",
                                                              index: index,
                                                              fromWhere: 'homePage',
                                                              callFunction: () {},
                                                              contentType: mainVariables.valueMapListProfilePage[index].type,
                                                              category: mainVariables.valueMapListProfilePage[index].category,
                                                              responseCountList: List.generate(
                                                                  mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                          )
                                              : Container(
                                            padding: const EdgeInsets.all(1.5),
                                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                              BoxShadow(
                                                  color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                      mainVariables.valueMapListProfilePage[index].believed == false
                                                      ? Colors.black87.withOpacity(0.7)
                                                      : Colors.black26.withOpacity(0.1),
                                                  blurRadius: 4.0,
                                                  spreadRadius: 0.0)
                                            ]),
                                            child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                mainVariables.valueMapListProfilePage[index].believed == false
                                                ? Center(
                                              child: Padding(
                                                padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                  children: [
                                                    SizedBox(
                                                        width: width / 1.2,
                                                        child: Text(
                                                          "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                          style: TextStyle(
                                                              fontSize: 14,
                                                              fontWeight: FontWeight.w500,
                                                              color: Theme.of(context).colorScheme.background),
                                                          textAlign: TextAlign.center,
                                                        )),
                                                    const SizedBox(
                                                      height: 15,
                                                    ),
                                                    SizedBox(
                                                      width: width / 3.5,
                                                      child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                          ? billboardWidgetsMain.getHomeBelieveButton(
                                                        heightValue: height / 33.76,
                                                        isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                        billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                        billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                        context: context,
                                                        modelSetState: setState,
                                                        index: index,
                                                        background: true,
                                                      )
                                                          : const SizedBox(),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            )
                                                : Column(
                                              children: [
                                                GestureDetector(
                                                  onTap: () async {
                                                    switch (mainVariables.valueMapListProfilePage[index].type) {
                                                      case "blog":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BlogDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "byte":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BytesDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "forums":
                                                        {
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                      idList: List.generate(
                                                                          mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                      comeFrom: "billBoardHome",
                                                                      forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "survey":
                                                        {
                                                          String activeStatus = "";
                                                          bool answerStatus = false;
                                                          int answeredQuestion = 0;
                                                          SharedPreferences prefs = await SharedPreferences.getInstance();
                                                          String mainUserId = prefs.getString('newUserId') ?? "";
                                                          String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                          var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                          var response = await http.post(url, headers: {
                                                            'Authorization': mainUserToken
                                                          }, body: {
                                                            'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                          });
                                                          var responseData = json.decode(response.body);
                                                          if (responseData["status"]) {
                                                            activeStatus = responseData["response"]["status"];

                                                            if (activeStatus == "active") {
                                                              var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                              var response = await http.post(url, headers: {
                                                                'Authorization': mainUserToken
                                                              }, body: {
                                                                'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                              });
                                                              var responseData = json.decode(response.body);
                                                              if (responseData["status"]) {
                                                                answerStatus = responseData["response"][0]["final_question"];
                                                                answeredQuestion = responseData["response"][0]["question_number"];
                                                              } else {
                                                                answerStatus = false;
                                                                answeredQuestion = 0;
                                                              }
                                                            }
                                                          }
                                                          bool responseBool =
                                                              mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                          if (!mounted) {
                                                            return;
                                                          }
                                                          mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }))
                                                              : activeStatus == 'active'
                                                              ? answerStatus
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                    surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                    activity: false,
                                                                    navBool: false,
                                                                    fromWhere: 'similar',
                                                                    surveyTitle:
                                                                    mainVariables.valueMapListProfilePage[index].title);
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return QuestionnairePage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  defaultIndex: answeredQuestion,
                                                                );
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }));
                                                          if (responseBool) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "news":
                                                        {
                                                          /*bool response = await Navigator.push(context,
                                                                            MaterialPageRoute(builder: (BuildContext context) {
                                                                          return DemoPage(
                                                                            url: "",
                                                                            text: "",
                                                                            image: "",
                                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                                            type: 'news',
                                                                            activity: true,
                                                                            checkMain: false,
                                                                          );
                                                                        }));
                                                                        if (response) {
                                                                          getData();
                                                                        }*/
                                                          Get.to(const DemoView(), arguments: {
                                                            "id": mainVariables.valueMapListProfilePage[index].id,
                                                            "type": "news",
                                                            "url": ""
                                                          });
                                                          break;
                                                        }
                                                      default:
                                                        {
                                                          break;
                                                        }
                                                    }
                                                  },
                                                  child: Stack(
                                                    children: [
                                                      Container(
                                                          height: height / 3.97,
                                                          decoration: const BoxDecoration(
                                                            color: Colors.black,
                                                            borderRadius: BorderRadius.only(
                                                                topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                          ),
                                                          child: CarouselSlider.builder(
                                                            carouselController: _carController,
                                                            options: CarouselOptions(
                                                                enableInfiniteScroll: false,
                                                                enlargeCenterPage: false,
                                                                onPageChanged: (int index, CarouselPageChangedReason reason) {
                                                                  setState(() {
                                                                    carouselIndexGlobal = index;
                                                                  });
                                                                }),
                                                            itemCount: mainVariables.valueMapListProfilePage[index].files.length,
                                                            itemBuilder: (BuildContext context, int carouselIndex, int realIndex) {
                                                              return mainVariables
                                                                  .valueMapListProfilePage[index].files[carouselIndex].type ==
                                                                  "image"
                                                                  ? Image.network(
                                                                mainVariables
                                                                    .valueMapListProfilePage[index].files[carouselIndex].file,
                                                                fit: BoxFit.fill,
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index].files[carouselIndex]
                                                                  .type ==
                                                                  "video"
                                                                  ? Stack(
                                                                alignment: Alignment.center,
                                                                children: [
                                                                  Image.asset(
                                                                    "lib/Constants/Assets/Settings/coverImage_default.png",
                                                                    fit: BoxFit.fill,
                                                                    height: height / 3.97,
                                                                  ),
                                                                  Container(
                                                                      height: 50,
                                                                      width: 50,
                                                                      decoration: BoxDecoration(
                                                                          shape: BoxShape.circle,
                                                                          color: Colors.black26.withOpacity(0.7)),
                                                                      child: const Icon(
                                                                        Icons.play_arrow_sharp,
                                                                        color: Colors.white,
                                                                        size: 40,
                                                                      ))
                                                                ],
                                                              )
                                                                  : mainVariables.valueMapListProfilePage[index]
                                                                  .files[carouselIndex].type ==
                                                                  "document"
                                                                  ? Stack(
                                                                alignment: Alignment.center,
                                                                children: [
                                                                  Image.asset(
                                                                    "lib/Constants/Assets/Settings/coverImage.png",
                                                                    fit: BoxFit.fill,
                                                                    height: height / 3.97,
                                                                  ),
                                                                  Container(
                                                                    height: 50,
                                                                    width: 50,
                                                                    decoration: BoxDecoration(
                                                                      shape: BoxShape.circle,
                                                                      color: Colors.black26.withOpacity(0.3),
                                                                    ),
                                                                    child: Center(
                                                                      child: Image.asset(
                                                                        "lib/Constants/Assets/BillBoard/document.png",
                                                                        color: Colors.white,
                                                                        height: 25,
                                                                        width: 25,
                                                                      ),
                                                                    ),
                                                                  )
                                                                ],
                                                              )
                                                                  : const SizedBox();
                                                            },
                                                          )),
                                                      Positioned(
                                                        top: 0,
                                                        left: 0,
                                                        child: Container(
                                                          height: height / 18,
                                                          width: width / 1.06,
                                                          padding: EdgeInsets.only(
                                                            left: width / 27.4,
                                                          ),
                                                          decoration: BoxDecoration(
                                                            color: Colors.black12.withOpacity(0.3),
                                                            borderRadius: const BorderRadius.only(
                                                              topLeft: Radius.circular(15),
                                                              topRight: Radius.circular(15),
                                                            ),
                                                          ),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.start,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  /*bookMarkWidget(
                                                bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                                context: context,
                                                scale: 3,
                                                color: Colors.white,
                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                type: 'billboard',
                                                modelSetState: setState,
                                                index: index,
                                                initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                notUse: false
                                            ),*/
                                                                  billboardWidgetsMain.billBoardBookMarkWidget(
                                                                      context: context, index: index),
                                                                  const SizedBox(
                                                                    width: 15,
                                                                  ),
                                                                  billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type:
                                                                      mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type ==
                                                                          "survey"
                                                                          ? "survey"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ],
                                                              ),
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                      ? billboardWidgetsMain.getHomeBelieveButton(
                                                                    heightValue: height / 33.76,
                                                                    isBelieved: List.generate(
                                                                        mainVariables.valueMapListProfilePage.length,
                                                                            (ind) =>
                                                                        mainVariables.valueMapListProfilePage[ind].believed),
                                                                    billboardUserid:
                                                                    mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardUserName:
                                                                    mainVariables.valueMapListProfilePage[index].username,
                                                                    context: context,
                                                                    modelSetState: setState,
                                                                    index: index,
                                                                    background: true,
                                                                  )
                                                                      : const SizedBox(),

                                                                  ///more_vert
                                                                  IconButton(
                                                                      onPressed: () {
                                                                        billboardWidgetsMain.bottomSheet(
                                                                          context1: context,
                                                                          myself: userIdMain ==
                                                                              mainVariables.valueMapListProfilePage[index].userId,
                                                                          billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                          billboardUserId:
                                                                          mainVariables.valueMapListProfilePage[index].userId,
                                                                          type: "billboard",
                                                                          responseId: "",
                                                                          responseUserId: "",
                                                                          commentId: "",
                                                                          commentUserId: "",
                                                                          callFunction: getData,
                                                                          contentType:
                                                                          mainVariables.valueMapListProfilePage[index].type,
                                                                          modelSetState: setState,
                                                                          responseDetail: {},
                                                                          category:
                                                                          mainVariables.valueMapListProfilePage[index].category,
                                                                          valueMapList: mainVariables.valueMapListProfilePage,
                                                                          index: index,
                                                                        );
                                                                      },
                                                                      icon: const Icon(
                                                                        Icons.more_vert,
                                                                        color: Colors.white,
                                                                        size: 25,
                                                                      ))
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                      mainVariables.valueMapListProfilePage[index].files.length > 1
                                                          ? Positioned(
                                                          bottom: 75,
                                                          left: (width / 2) - 35,
                                                          child: SizedBox(
                                                            height: 5,
                                                            child: ListView.builder(
                                                                shrinkWrap: true,
                                                                scrollDirection: Axis.horizontal,
                                                                physics: const NeverScrollableScrollPhysics(),
                                                                itemCount:
                                                                mainVariables.valueMapListProfilePage[index].files.length,
                                                                itemBuilder: (BuildContext context, int index1) {
                                                                  return Container(
                                                                    height: 5,
                                                                    width: carouselIndexGlobal == index1 ? 20 : 5,
                                                                    margin: const EdgeInsets.symmetric(horizontal: 3),
                                                                    decoration: BoxDecoration(
                                                                        borderRadius: BorderRadius.circular(8),
                                                                        color: carouselIndexGlobal == index1
                                                                            ? const Color(0XFF0EA102)
                                                                            : Colors.white),
                                                                  );
                                                                }),
                                                          ))
                                                          : const SizedBox(),
                                                      Positioned(
                                                        bottom: 0,
                                                        left: 0,
                                                        child: Container(
                                                          height: height / 14,
                                                          width: width,
                                                          padding: EdgeInsets.only(
                                                              top: height / 86.6,
                                                              bottom: height / 86.6,
                                                              right: width / 13.7,
                                                              left: width / 41.1),
                                                          decoration: BoxDecoration(
                                                            color: Colors.black12.withOpacity(0.3),
                                                          ),
                                                          child: RichText(
                                                            textAlign: TextAlign.left,
                                                            text: TextSpan(
                                                              children: conversationFunctionsMain.spanListBillBoardHome(
                                                                  message:
                                                                  mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                      ? mainVariables.valueMapListProfilePage[index].title
                                                                      .substring(0, 100)
                                                                      : mainVariables.valueMapListProfilePage[index].title,
                                                                  context: context,
                                                                  isByte: false),
                                                            ),
                                                          ) /*Text(
                                      mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                      maxLines: 2,
                                      style: TextStyle(
                                          fontSize: _text*14,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w500,
                                          fontFamily: "Poppins",
                                          overflow: TextOverflow.ellipsis
                                      ),
                                    )*/
                                                          ,
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                Container(
                                                  decoration: BoxDecoration(
                                                    color: Theme.of(context).colorScheme.background,
                                                    borderRadius: const BorderRadius.only(
                                                        bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                  ),
                                                  child: Column(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 86.6,
                                                      ),
                                                      Row(
                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                        children: [
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId),
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          Expanded(
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                InkWell(
                                                                  onTap: () {
                                                                    Navigator.push(context,
                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                          return UserBillBoardProfilePage(
                                                                              userId:
                                                                              mainVariables.valueMapListProfilePage[index].userId)
                                                                          /*UserProfilePage(
                                                      id:valueMapList[index].userId,
                                                      type:'forums',
                                                      index:0)*/
                                                                          ;
                                                                        }));
                                                                  },
                                                                  child: Text(
                                                                    mainVariables.valueMapListProfilePage[index].username
                                                                        .toString()
                                                                        .capitalizeFirst!,
                                                                    style: TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        fontWeight: FontWeight.w700,
                                                                        fontFamily: "Poppins"),
                                                                  ),
                                                                ),
                                                                const SizedBox(
                                                                  height: 5,
                                                                ),
                                                                Row(
                                                                  children: [
                                                                    Text(
                                                                      mainVariables.valueMapListProfilePage[index].createdAt,
                                                                      style: TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    Text(
                                                                      " | ",
                                                                      style: TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    InkWell(
                                                                      onTap: () async {
                                                                        billboardWidgetsMain.believersTabBottomSheet(
                                                                          context: context,
                                                                          id: mainVariables.valueMapListProfilePage[index].userId,
                                                                          isBelieversList: true,
                                                                        );
                                                                      },
                                                                      child: Text(
                                                                        "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                        style: TextStyle(
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0XFF737373),
                                                                            fontWeight: FontWeight.w400,
                                                                            fontFamily: "Poppins"),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          billboardWidgetsMain.likeButtonHomeListWidget(
                                                            likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            index: index,
                                                            context: context,
                                                            initFunction: () {},
                                                            modelSetState: setState,
                                                            notUse: true,
                                                            dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                            likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                            dislikeCountList: List.generate(
                                                                mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                            type: mainVariables.valueMapListProfilePage[index].type,
                                                            billBoardType: mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                ? 'survey'
                                                                : 'billboard',
                                                            image: mainVariables.valueMapListProfilePage[index].avatar,
                                                            title: mainVariables.valueMapListProfilePage[index].title,
                                                            description: "",
                                                            fromWhere: 'homePage',
                                                            responseId: '',
                                                            controller: bottomSheetController,
                                                            commentId: '',
                                                            postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                            responseFocusList: mainVariables.responseFocusList,
                                                            responseUserId: '',
                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                          ),
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(height: height / 64),
                                                      Padding(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Text(
                                                              mainVariables.valueMapListProfilePage[index].companyName,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xFF017FDB),
                                                                  fontWeight: FontWeight.bold),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "views",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 0,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "likes",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 1,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType: "billboard",
                                                                    action: "dislikes",
                                                                    likeCount: mainVariables.valueMapListProfilePage[index].likesCount
                                                                        .toString(),
                                                                    disLikeCount: mainVariables
                                                                        .valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 2,
                                                                    viewCount: mainVariables.valueMapListProfilePage[index].viewsCount
                                                                        .toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            Text(
                                                              " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                              style: TextStyle(fontSize: text.scale(10)),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(height: height / 42.6),
                                                      Container(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getResponseField(
                                                              context: context,
                                                              modelSetState: setState,
                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseId: "",
                                                              index: index,
                                                              fromWhere: 'homePage',
                                                              callFunction: () {},
                                                              contentType: mainVariables.valueMapListProfilePage[index].type,
                                                              category: mainVariables.valueMapListProfilePage[index].category,
                                                              responseCountList: List.generate(
                                                                  mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                )
                                              ],
                                            ),
                                          )
                                              : Container(
                                            padding: const EdgeInsets.all(1.5),
                                            decoration: BoxDecoration(borderRadius: BorderRadius.circular(15), boxShadow: [
                                              BoxShadow(
                                                  color: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                      mainVariables.valueMapListProfilePage[index].believed == false
                                                      ? Colors.black87.withOpacity(0.7)
                                                      : Colors.black26.withOpacity(0.1),
                                                  blurRadius: 4.0,
                                                  spreadRadius: 0.0)
                                            ]),
                                            child: mainVariables.valueMapListProfilePage[index].publicView == "private" &&
                                                mainVariables.valueMapListProfilePage[index].believed == false
                                                ? Center(
                                              child: Padding(
                                                padding: const EdgeInsets.symmetric(vertical: 100.0),
                                                child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                  crossAxisAlignment: CrossAxisAlignment.center,
                                                  children: [
                                                    SizedBox(
                                                        width: width / 1.2,
                                                        child: Text(
                                                          "Exclusive Content: This post is private and only visible to those who believe. Believe ${mainVariables.valueMapListProfilePage[index].username} to unveil the full content.",
                                                          style: TextStyle(
                                                              fontSize: 14,
                                                              fontWeight: FontWeight.w500,
                                                              color: Theme.of(context).colorScheme.background),
                                                          textAlign: TextAlign.center,
                                                        )),
                                                    const SizedBox(
                                                      height: 15,
                                                    ),
                                                    SizedBox(
                                                      width: width / 3.5,
                                                      child: userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                          ? billboardWidgetsMain.getHomeBelieveButton(
                                                        heightValue: height / 33.76,
                                                        isBelieved: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                        billboardUserid: mainVariables.valueMapListProfilePage[index].userId,
                                                        billboardUserName: mainVariables.valueMapListProfilePage[index].username,
                                                        context: context,
                                                        modelSetState: setState,
                                                        index: index,
                                                        background: true,
                                                      )
                                                          : const SizedBox(),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            )
                                                : Column(
                                              children: [
                                                GestureDetector(
                                                  onTap: () async {
                                                    switch (mainVariables.valueMapListProfilePage[index].type) {
                                                      case "blog":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BlogDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "byte":
                                                        {
                                                          mainVariables.selectedBillboardIdMain.value =
                                                              mainVariables.valueMapListProfilePage[index].id;
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) =>
                                                                  const BytesDescriptionPage(fromWhere: "profile")));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "forums":
                                                        {
                                                          bool response = await Navigator.push(
                                                              context,
                                                              MaterialPageRoute(
                                                                  builder: (BuildContext context) => ForumPostDescriptionPage(
                                                                      idList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                              (ind) => mainVariables.valueMapListProfilePage[ind].id),
                                                                      comeFrom: "billBoardHome",
                                                                      forumId: mainVariables.valueMapListProfilePage[index].id)));
                                                          if (response) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "survey":
                                                        {
                                                          String activeStatus = "";
                                                          bool answerStatus = false;
                                                          int answeredQuestion = 0;
                                                          SharedPreferences prefs = await SharedPreferences.getInstance();
                                                          String mainUserId = prefs.getString('newUserId') ?? "";
                                                          String mainUserToken = prefs.getString('newUserToken') ?? "";
                                                          var url = Uri.parse(baseurl + versionSurvey + surveyStatusCheck);
                                                          var response = await http.post(url, headers: {
                                                            'Authorization': mainUserToken
                                                          }, body: {
                                                            'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                          });
                                                          var responseData = json.decode(response.body);
                                                          if (responseData["status"]) {
                                                            activeStatus = responseData["response"]["status"];
                                                            if (activeStatus == "active") {
                                                              var url = Uri.parse(baseurl + versionSurvey + checkAnswer);
                                                              var response = await http.post(url, headers: {
                                                                'Authorization': mainUserToken
                                                              }, body: {
                                                                'survey_id': mainVariables.valueMapListProfilePage[index].id,
                                                              });
                                                              var responseData = json.decode(response.body);
                                                              if (responseData["status"]) {
                                                                answerStatus = responseData["response"][0]["final_question"];
                                                                answeredQuestion = responseData["response"][0]["question_number"];
                                                              } else {
                                                                answerStatus = false;
                                                                answeredQuestion = 0;
                                                              }
                                                            }
                                                          }
                                                          bool responseBool =
                                                              mainUserId == mainVariables.valueMapListProfilePage[index].userId;
                                                          if (!mounted) {
                                                            return;
                                                          }
                                                          mainUserId == mainVariables.valueMapListProfilePage[index].userId
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }))
                                                              : activeStatus == 'active'
                                                              ? answerStatus
                                                              ? await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                    surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                    activity: false,
                                                                    navBool: false,
                                                                    fromWhere: 'similar',
                                                                    surveyTitle:
                                                                    mainVariables.valueMapListProfilePage[index].title);
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return QuestionnairePage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  defaultIndex: answeredQuestion,
                                                                );
                                                              }))
                                                              : await Navigator.push(context,
                                                              MaterialPageRoute(builder: (BuildContext context) {
                                                                return AnalyticsPage(
                                                                  surveyId: mainVariables.valueMapListProfilePage[index].id,
                                                                  activity: false,
                                                                  surveyTitle: mainVariables.valueMapListProfilePage[index].title,
                                                                  navBool: false,
                                                                  fromWhere: 'similar',
                                                                );
                                                              }));
                                                          if (responseBool) {
                                                            getData();
                                                          }
                                                          break;
                                                        }
                                                      case "news":
                                                        {
                                                          /* bool response = await Navigator.push(context,
                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                      return DemoPage(
                                                                        url: "",
                                                                        text: "",
                                                                        image: "",
                                                                        id: mainVariables.valueMapListProfilePage[index].id,
                                                                        type: 'news',
                                                                        activity: true,
                                                                        checkMain: false,
                                                                      );
                                                                    }));
                                                                    if (response) {
                                                                      getData();
                                                                    }*/
                                                          Get.to(const DemoView(), arguments: {
                                                            "id": mainVariables.valueMapListProfilePage[index].id,
                                                            "type": "news",
                                                            "url": ""
                                                          });
                                                          break;
                                                        }
                                                      default:
                                                        {
                                                          break;
                                                        }
                                                    }
                                                  },
                                                  child: Stack(
                                                    children: [
                                                      Container(
                                                        height: height / 3.97,
                                                        decoration: BoxDecoration(
                                                            borderRadius: const BorderRadius.only(
                                                                topLeft: Radius.circular(15), topRight: Radius.circular(15)),
                                                            gradient: mainVariables.valueMapListProfilePage[index].type == "blog"
                                                                ? const RadialGradient(
                                                              colors: [
                                                                Color.fromRGBO(23, 25, 27, 0.90),
                                                                Color.fromRGBO(85, 85, 85, 0.00)
                                                              ],
                                                              radius: 15.0,
                                                            )
                                                                : mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                ? const RadialGradient(
                                                              colors: [
                                                                Color.fromRGBO(0, 92, 175, 0.90),
                                                                Color.fromRGBO(13, 155, 1, 0.00)
                                                              ],
                                                              radius: 15.0,
                                                            )
                                                                : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                ? const RadialGradient(
                                                              colors: [
                                                                Color.fromRGBO(10, 122, 1, 0.90),
                                                                Color.fromRGBO(13, 155, 1, 0.00)
                                                              ],
                                                              radius: 15.0,
                                                            )
                                                                : const RadialGradient(
                                                              colors: [
                                                                Color.fromRGBO(255, 255, 255, 0),
                                                                Color.fromRGBO(255, 255, 255, 1)
                                                              ],
                                                              radius: 15.0,
                                                            ),
                                                            image: DecorationImage(
                                                                image: NetworkImage(
                                                                  mainVariables.valueMapListProfilePage[index].type == "news"
                                                                      ? mainVariables.valueMapListProfilePage[index].newsImage
                                                                      : "",
                                                                ),
                                                                fit: BoxFit.fill)),
                                                        child: Center(
                                                          child: Text(
                                                            mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                ? mainVariables.valueMapListProfilePage[index].type
                                                                .toString()
                                                                .capitalizeFirst!
                                                                .substring(
                                                                0, mainVariables.valueMapListProfilePage[index].type.length - 1)
                                                                : mainVariables.valueMapListProfilePage[index].type
                                                                .toString()
                                                                .capitalizeFirst!,
                                                            style: TextStyle(
                                                                fontSize: text.scale(40),
                                                                fontWeight: FontWeight.w900,
                                                                color: const Color(0XFFFFFFFF)),
                                                          ),
                                                        ),
                                                      ),
                                                      Positioned(
                                                        top: 0,
                                                        left: 0,
                                                        child: Container(
                                                          height: height / 18,
                                                          width: width / 1.06,
                                                          padding: EdgeInsets.only(
                                                            left: width / 27.4,
                                                          ),
                                                          decoration: BoxDecoration(
                                                            color: Colors.black12.withOpacity(0.3),
                                                            borderRadius: const BorderRadius.only(
                                                              topLeft: Radius.circular(15),
                                                              topRight: Radius.circular(15),
                                                            ),
                                                          ),
                                                          child: Row(
                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                            crossAxisAlignment: CrossAxisAlignment.center,
                                                            children: [
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.start,
                                                                crossAxisAlignment: CrossAxisAlignment.center,
                                                                children: [
                                                                  /*bookMarkWidget(
                                                bookMark: List.generate(mainVariables.valueMapListProfilePage.length, (ind) => mainVariables.valueMapListProfilePage[ind].bookmarks.value),
                                                context: context,
                                                scale: 3,
                                                color: Colors.white,
                                                id: mainVariables.valueMapListProfilePage[index].id,
                                                type: 'billboard',
                                                modelSetState: setState,
                                                index: index,
                                                initFunction: billBoardApiMain.getBillBoardListApiFunc,
                                                notUse: false
                                            ),*/
                                                                  billboardWidgetsMain.billBoardBookMarkWidget(
                                                                      context: context, index: index),
                                                                  const SizedBox(
                                                                    width: 15,
                                                                  ),
                                                                  billboardWidgetsMain.translationWidget(
                                                                      id: mainVariables.valueMapListProfilePage[index].id,
                                                                      type: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                          ? "forums"
                                                                          : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                          ? "survey"
                                                                          : 'billboard',
                                                                      index: index,
                                                                      initFunction: getData,
                                                                      context: context,
                                                                      modelSetState: setState,
                                                                      notUse: false,
                                                                      valueMapList: mainVariables.valueMapListProfilePage),
                                                                ],
                                                              ),
                                                              Row(
                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                children: [
                                                                  userIdMain != mainVariables.valueMapListProfilePage[index].userId
                                                                      ? billboardWidgetsMain.getHomeBelieveButton(
                                                                    heightValue: height / 33.76,
                                                                    isBelieved: List.generate(
                                                                        mainVariables.valueMapListProfilePage.length,
                                                                            (ind) => mainVariables.valueMapListProfilePage[ind].believed),
                                                                    billboardUserid:
                                                                    mainVariables.valueMapListProfilePage[index].userId,
                                                                    billboardUserName:
                                                                    mainVariables.valueMapListProfilePage[index].username,
                                                                    context: context,
                                                                    modelSetState: setState,
                                                                    index: index,
                                                                    background: true,
                                                                  )
                                                                      : const SizedBox(),

                                                                  ///more_vert
                                                                  IconButton(
                                                                      onPressed: () {
                                                                        billboardWidgetsMain.bottomSheet(
                                                                          context1: context,
                                                                          myself: userIdMain ==
                                                                              mainVariables.valueMapListProfilePage[index].userId,
                                                                          billboardId: mainVariables.valueMapListProfilePage[index].id,
                                                                          billboardUserId:
                                                                          mainVariables.valueMapListProfilePage[index].userId,
                                                                          type: "billboard",
                                                                          responseId: "",
                                                                          responseUserId: "",
                                                                          commentId: "",
                                                                          commentUserId: "",
                                                                          callFunction: getData,
                                                                          contentType: mainVariables.valueMapListProfilePage[index].type,
                                                                          modelSetState: setState,
                                                                          responseDetail: {},
                                                                          category: mainVariables.valueMapListProfilePage[index].category,
                                                                          valueMapList: mainVariables.valueMapListProfilePage,
                                                                          index: index,
                                                                        );
                                                                      },
                                                                      icon: const Icon(
                                                                        Icons.more_vert,
                                                                        color: Colors.white,
                                                                        size: 25,
                                                                      ))
                                                                ],
                                                              )
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                      Positioned(
                                                        bottom: 0,
                                                        left: 0,
                                                        child: Container(
                                                          height: height / 14,
                                                          width: width,
                                                          padding: EdgeInsets.only(
                                                              top: height / 86.6,
                                                              bottom: height / 86.6,
                                                              right: width / 13.7,
                                                              left: width / 41.1),
                                                          decoration: BoxDecoration(
                                                            color: Colors.black12.withOpacity(0.3),
                                                          ),
                                                          child: RichText(
                                                            textAlign: TextAlign.left,
                                                            text: TextSpan(
                                                              children: conversationFunctionsMain.spanListBillBoardHome(
                                                                  message: mainVariables.valueMapListProfilePage[index].title.length > 100
                                                                      ? mainVariables.valueMapListProfilePage[index].title.substring(0, 100)
                                                                      : mainVariables.valueMapListProfilePage[index].title,
                                                                  context: context,
                                                                  isByte: false),
                                                            ),
                                                          ) /*Text(
                                      mainVariables.valueMapListProfilePage[index].title.toString().capitalizeFirst!,
                                      maxLines: 2,
                                      style: TextStyle(
                                          fontSize: _text*14,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w500,
                                          fontFamily: "Poppins",
                                          overflow: TextOverflow.ellipsis
                                      ),
                                    )*/
                                                          ,
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                Container(
                                                  decoration: BoxDecoration(
                                                    color: Theme.of(context).colorScheme.background,
                                                    borderRadius: const BorderRadius.only(
                                                        bottomLeft: Radius.circular(15), bottomRight: Radius.circular(15)),
                                                  ),
                                                  child: Column(
                                                    children: [
                                                      SizedBox(
                                                        height: height / 86.6,
                                                      ),
                                                      Row(
                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                        crossAxisAlignment: CrossAxisAlignment.center,
                                                        children: [
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          billboardWidgetsMain.getProfile(
                                                              context: context,
                                                              heightValue: height / 17.32,
                                                              widthValue: width / 8.22,
                                                              myself: false,
                                                              avatar: mainVariables.valueMapListProfilePage[index].avatar,
                                                              isProfile: mainVariables.valueMapListProfilePage[index].profileType,
                                                              userId: mainVariables.valueMapListProfilePage[index].userId),
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                          Expanded(
                                                            child: Column(
                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                              mainAxisAlignment: MainAxisAlignment.center,
                                                              children: [
                                                                InkWell(
                                                                  onTap: () {
                                                                    Navigator.push(context,
                                                                        MaterialPageRoute(builder: (BuildContext context) {
                                                                          return UserBillBoardProfilePage(
                                                                              userId: mainVariables.valueMapListProfilePage[index].userId)
                                                                          /*UserProfilePage(
                                                  id:valueMapList[index].userId,
                                                  type:'forums',
                                                  index:0
                                              )*/
                                                                          ;
                                                                        }));
                                                                  },
                                                                  child: Text(
                                                                    mainVariables.valueMapListProfilePage[index].username
                                                                        .toString()
                                                                        .capitalizeFirst!,
                                                                    style: TextStyle(
                                                                        fontSize: text.scale(14),
                                                                        fontWeight: FontWeight.w700,
                                                                        fontFamily: "Poppins"),
                                                                  ),
                                                                ),
                                                                const SizedBox(
                                                                  height: 5,
                                                                ),
                                                                Row(
                                                                  children: [
                                                                    Text(
                                                                      mainVariables.valueMapListProfilePage[index].createdAt,
                                                                      style: TextStyle(
                                                                          fontSize: text.scale(10),
                                                                          color: const Color(0XFF737373),
                                                                          fontWeight: FontWeight.w400,
                                                                          fontFamily: "Poppins"),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    Text(
                                                                      " | ",
                                                                      style: TextStyle(
                                                                        fontSize: text.scale(10),
                                                                        color: const Color(0XFF737373),
                                                                        fontWeight: FontWeight.w400,
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 3,
                                                                    ),
                                                                    InkWell(
                                                                      onTap: () async {
                                                                        billboardWidgetsMain.believersTabBottomSheet(
                                                                          context: context,
                                                                          id: mainVariables.valueMapListProfilePage[index].userId,
                                                                          isBelieversList: true,
                                                                        );
                                                                      },
                                                                      child: Text(
                                                                        "${mainVariables.valueMapListProfilePage[index].believersCount} Believers",
                                                                        style: TextStyle(
                                                                            fontSize: text.scale(10),
                                                                            color: const Color(0XFF737373),
                                                                            fontWeight: FontWeight.w400,
                                                                            fontFamily: "Poppins"),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          billboardWidgetsMain.likeButtonHomeListWidget(
                                                            likeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].like),
                                                            id: mainVariables.valueMapListProfilePage[index].id,
                                                            index: index,
                                                            context: context,
                                                            initFunction: () {},
                                                            modelSetState: setState,
                                                            notUse: true,
                                                            dislikeList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].dislike),
                                                            likeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].likesCount),
                                                            dislikeCountList: List.generate(mainVariables.valueMapListProfilePage.length,
                                                                    (ind) => mainVariables.valueMapListProfilePage[ind].disLikesCount),
                                                            type: mainVariables.valueMapListProfilePage[index].type,
                                                            billBoardType: mainVariables.valueMapListProfilePage[index].type == 'survey'
                                                                ? 'survey'
                                                                : 'billboard',
                                                            image: mainVariables.valueMapListProfilePage[index].avatar,
                                                            title: mainVariables.valueMapListProfilePage[index].title,
                                                            description: "",
                                                            fromWhere: 'homePage',
                                                            responseId: '',
                                                            controller: bottomSheetController,
                                                            commentId: '',
                                                            postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                            responseUserId: '',
                                                            responseFocusList: mainVariables.responseFocusList,
                                                            valueMapList: mainVariables.valueMapListProfilePage,
                                                          ),
                                                          SizedBox(
                                                            width: width / 41.1,
                                                          ),
                                                        ],
                                                      ),
                                                      SizedBox(height: height / 64),
                                                      Padding(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          children: [
                                                            Text(
                                                              mainVariables.valueMapListProfilePage[index].companyName,
                                                              style: TextStyle(
                                                                  fontSize: text.scale(10),
                                                                  color: const Color(0xFF017FDB),
                                                                  fontWeight: FontWeight.bold),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType:
                                                                    mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                        ? "forums"
                                                                        : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                        ? "survey"
                                                                        : "billboard",
                                                                    action: "views",
                                                                    likeCount:
                                                                    mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                    disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 0,
                                                                    viewCount:
                                                                    mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].viewsCount} views ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType:
                                                                    mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                        ? "forums"
                                                                        : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                        ? "survey"
                                                                        : "billboard",
                                                                    action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                        ? "liked"
                                                                        : "likes",
                                                                    likeCount:
                                                                    mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                    disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 1,
                                                                    viewCount:
                                                                    mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].likesCount} likes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            InkWell(
                                                              onTap: () async {
                                                                billboardWidgetsMain.getLikeDislikeUsersList(
                                                                    context: context,
                                                                    billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                                    responseId: "",
                                                                    commentId: "",
                                                                    billBoardType:
                                                                    mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                        ? "forums"
                                                                        : mainVariables.valueMapListProfilePage[index].type == "survey"
                                                                        ? "survey"
                                                                        : "billboard",
                                                                    action: mainVariables.valueMapListProfilePage[index].type == "forums"
                                                                        ? "disliked"
                                                                        : "dislikes",
                                                                    likeCount:
                                                                    mainVariables.valueMapListProfilePage[index].likesCount.toString(),
                                                                    disLikeCount: mainVariables.valueMapListProfilePage[index].disLikesCount
                                                                        .toString(),
                                                                    index: 2,
                                                                    viewCount:
                                                                    mainVariables.valueMapListProfilePage[index].viewsCount.toString(),
                                                                    isViewIncluded: true);
                                                              },
                                                              child: Text(
                                                                " ${mainVariables.valueMapListProfilePage[index].disLikesCount} DisLikes ",
                                                                style: TextStyle(fontSize: text.scale(10)),
                                                              ),
                                                            ),
                                                            mainVariables.valueMapListProfilePage[index].profileType == "intermediate"
                                                                ? const SizedBox()
                                                                : Text(
                                                              " ${mainVariables.valueMapListProfilePage[index].responseCount} Responses ",
                                                              style: TextStyle(fontSize: text.scale(10)),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      SizedBox(height: height / 42.6),
                                                      mainVariables.valueMapListProfilePage[index].type == 'survey' ||
                                                          mainVariables.valueMapListProfilePage[index].type == 'news'
                                                          ? const SizedBox()
                                                          : Container(
                                                        padding: EdgeInsets.symmetric(horizontal: width / 51.375),
                                                        child: Row(
                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            CircleAvatar(radius: 22, backgroundImage: NetworkImage(avatarMain.value)),
                                                            SizedBox(
                                                              width: width / 41.1,
                                                            ),
                                                            billboardWidgetsMain.getResponseField(
                                                              context: context,
                                                              modelSetState: setState,
                                                              billBoardId: mainVariables.valueMapListProfilePage[index].id,
                                                              postUserId: mainVariables.valueMapListProfilePage[index].userId,
                                                              responseId: "",
                                                              index: index,
                                                              fromWhere: 'homePage',
                                                              callFunction: () {},
                                                              contentType: mainVariables.valueMapListProfilePage[index].type,
                                                              category: mainVariables.valueMapListProfilePage[index].category,
                                                              responseCountList: List.generate(
                                                                  mainVariables.valueMapListProfilePage.length,
                                                                      (ind) => mainVariables.valueMapListProfilePage[ind].responseCount),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                )
                                              ],
                                            ),
                                          ),
                                          SizedBox(
                                            height: height / 33.83,
                                          )
                                        ],
                                      ),
                                    );
                                  }),
                            )),
                    )
                  : Center(
                      child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
                    ),
            ],
          )
        : Center(
            child: Lottie.asset('lib/Constants/Assets/SMLogos/loading.json', height: height / 8.66, width: width / 4.11),
          );
  }
}

class ActivityTabPage extends StatefulWidget {
  const ActivityTabPage({Key? key}) : super(key: key);

  @override
  State<ActivityTabPage> createState() => _ActivityTabPageState();
}

class _ActivityTabPageState extends State<ActivityTabPage> {
  List<NativeAd> nativeAdList = <NativeAd>[];
  List<bool> nativeAdIsLoadedList = <bool>[];

  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 8;
      mainVariables.selectedUserControllerIndex.value = 6;
      mainVariables.selectedIntermediaryControllerIndex.value = 7;
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Container(
      margin: EdgeInsets.symmetric(horizontal: width / 24.17),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            height: height / 57.73,
          ),
          SvgPicture.asset(
            "lib/Constants/Assets/BillBoard/businessProfile/emptyList.svg",
            height: height / 3.464,
            width: width / 1.49,
            fit: BoxFit.fill,
          ),
          SizedBox(
            height: height / 57.73,
          ),
          SizedBox(
            width: width / 1.2,
            child: RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                children: [
                  TextSpan(
                      text: 'Unfortunately no activities found for this profile',
                      style: TextStyle(fontFamily: "Poppins", color: Theme.of(context).colorScheme.onPrimary.withOpacity(0.3), fontSize: text.scale(14), fontWeight: FontWeight.w600)),
                ],
              ),
            ),
          )
        ],
      ),
    );
  }
}

class OfficialTabPage extends StatefulWidget {
  const OfficialTabPage({Key? key}) : super(key: key);

  @override
  State<OfficialTabPage> createState() => _OfficialTabPageState();
}

class _OfficialTabPageState extends State<OfficialTabPage> {
  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    Future.delayed(const Duration(milliseconds: 100), () {
      mainVariables.selectedControllerIndex.value = 9;
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Container(
      margin: EdgeInsets.symmetric(horizontal: width / 24.17),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            height: height / 57.73,
          ),
          SvgPicture.asset(
            "lib/Constants/Assets/BillBoard/businessProfile/rocket.svg",
            height: height / 3.464,
            width: width / 1.49,
            fit: BoxFit.fill,
          ),
          SizedBox(
            height: height / 57.73,
          ),
          Center(
            child: Text(
              "Coming Soon",
              style: TextStyle(color: const Color(0XFF464141), fontWeight: FontWeight.w600, fontSize: text.scale(24)),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          SizedBox(
            width: width / 1.2,
            child: RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                children: [
                  TextSpan(
                      text: 'On your way very shortly, Stay tuned! ',
                      style: TextStyle(fontFamily: "Poppins", color: const Color(0XFF232323), fontSize: text.scale(12), fontWeight: FontWeight.w600)),
                ],
              ),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          // ElevatedButton(onPressed: (){}, child: Text("Notify",style: TextStyle(fontSize: _text*12,fontWeight: FontWeight.w600),))
        ],
      ),
    );
  }
}

class ComingSoonRocketPage extends StatefulWidget {
  const ComingSoonRocketPage({Key? key}) : super(key: key);

  @override
  State<ComingSoonRocketPage> createState() => _ComingSoonRocketPageState();
}

class _ComingSoonRocketPageState extends State<ComingSoonRocketPage> {
  @override
  void initState() {
    mainVariables.billBoardListSearchControllerMain.value.clear();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    TextScaler text = MediaQuery.of(context).textScaler;
    return Container(
      margin: EdgeInsets.symmetric(horizontal: width / 24.17),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            height: height / 57.73,
          ),
          SvgPicture.asset(
            "lib/Constants/Assets/BillBoard/businessProfile/rocket.svg",
            height: height / 3.464,
            width: width / 1.49,
            fit: BoxFit.fill,
          ),
          SizedBox(
            height: height / 57.73,
          ),
          Center(
            child: Text(
              "Coming Soon",
              style: TextStyle(color: const Color(0XFF464141), fontWeight: FontWeight.w600, fontSize: text.scale(24)),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          SizedBox(
            width: width / 1.2,
            child: RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                children: [
                  TextSpan(
                      text: 'On your way very shortly, Stay tuned! ',
                      style: TextStyle(fontFamily: "Poppins", color: const Color(0XFF232323), fontSize: text.scale(12), fontWeight: FontWeight.w600)),
                ],
              ),
            ),
          ),
          SizedBox(
            height: height / 57.73,
          ),
          //  ElevatedButton(onPressed: (){}, child: Text("Notify",style: TextStyle(fontSize: _text*12,fontWeight: FontWeight.w600),))
        ],
      ),
    );
  }
}
